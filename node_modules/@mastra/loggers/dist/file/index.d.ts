import type { WriteStream } from 'fs';
import { LoggerTransport } from '@mastra/core/logger';
import type { BaseLogMessage, LogLevel } from '@mastra/core/logger';
export declare class FileTransport extends LoggerTransport {
    path: string;
    fileStream: WriteStream;
    constructor({ path }: {
        path: string;
    });
    _transform(chunk: any, _encoding: string, callback: (error: Error | null, chunk: any) => void): void;
    _flush(callback: Function): void;
    _write(chunk: any, encoding?: string, callback?: (error?: Error | null) => void): boolean;
    _destroy(error: Error, callback: Function): void;
    getLogs(params?: {
        fromDate?: Date;
        toDate?: Date;
        logLevel?: LogLevel;
        filters?: Record<string, any>;
        returnPaginationResults?: boolean;
        page?: number;
        perPage?: number;
    }): Promise<{
        logs: BaseLogMessage[];
        total: number;
        page: number;
        perPage: number;
        hasMore: boolean;
    }>;
    getLogsByRunId({ runId, fromDate, toDate, logLevel, filters, page: pageInput, perPage: perPageInput, }: {
        runId: string;
        fromDate?: Date;
        toDate?: Date;
        logLevel?: LogLevel;
        filters?: Record<string, any>;
        page?: number;
        perPage?: number;
    }): Promise<{
        logs: BaseLogMessage[];
        total: number;
        page: number;
        perPage: number;
        hasMore: boolean;
    }>;
}
//# sourceMappingURL=index.d.ts.map