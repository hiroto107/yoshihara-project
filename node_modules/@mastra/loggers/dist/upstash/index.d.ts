import { LoggerTransport } from '@mastra/core/logger';
import type { BaseLogMessage, LogLevel } from '@mastra/core/logger';
export declare class UpstashTransport extends LoggerTransport {
    upstashUrl: string;
    upstashToken: string;
    listName: string;
    maxListLength: number;
    batchSize: number;
    flushInterval: number;
    logBuffer: any[];
    lastFlush: number;
    flushIntervalId: NodeJS.Timeout;
    constructor(opts: {
        listName?: string;
        maxListLength?: number;
        batchSize?: number;
        upstashUrl: string;
        flushInterval?: number;
        upstashToken: string;
    });
    private executeUpstashCommand;
    _flush(): Promise<void>;
    _write(chunk: any, encoding?: string, callback?: (error?: Error | null) => void): boolean;
    _transform(chunk: string, _enc: string, cb: Function): void;
    _destroy(err: Error, cb: Function): void;
    getLogs(params?: {
        fromDate?: Date;
        toDate?: Date;
        logLevel?: LogLevel;
        filters?: Record<string, any>;
        returnPaginationResults?: boolean;
        page?: number;
        perPage?: number;
    }): Promise<{
        logs: BaseLogMessage[];
        total: number;
        page: number;
        perPage: number;
        hasMore: boolean;
    }>;
    getLogsByRunId({ runId, fromDate, toDate, logLevel, filters, page: pageInput, perPage: perPageInput, }: {
        runId: string;
        fromDate?: Date;
        toDate?: Date;
        logLevel?: LogLevel;
        filters?: Record<string, any>;
        page?: number;
        perPage?: number;
    }): Promise<{
        logs: BaseLogMessage[];
        total: number;
        page: number;
        perPage: number;
        hasMore: boolean;
    }>;
}
//# sourceMappingURL=index.d.ts.map