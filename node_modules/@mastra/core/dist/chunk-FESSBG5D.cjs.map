{"version":3,"sources":["../src/mastra/index.ts","../src/events/event-emitter.ts","../src/mastra/hooks.ts"],"names":["MastraError","saveScorePayloadSchema","InstrumentClass","Mastra","randomUUID","InMemoryServerCache","WorkflowEventProcessor","noopLogger","LogLevel","ConsoleLogger","augmentWithInit","Telemetry","setupAITracing","registerHook","getAllAITracing","shutdownAITracingRegistry","__decoratorStart","__decorateElement","__runInitializers"],"mappings":"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","file":"chunk-FESSBG5D.cjs","sourcesContent":["import { randomUUID } from 'node:crypto';\nimport type { Agent } from '../agent';\nimport { getAllAITracing, setupAITracing, shutdownAITracingRegistry } from '../ai-tracing';\nimport type { ObservabilityRegistryConfig } from '../ai-tracing';\nimport type { BundlerConfig } from '../bundler/types';\nimport { InMemoryServerCache } from '../cache';\nimport type { MastraServerCache } from '../cache';\nimport type { MastraDeployer } from '../deployer';\nimport { MastraError, ErrorDomain, ErrorCategory } from '../error';\nimport { EventEmitterPubSub } from '../events/event-emitter';\nimport type { PubSub } from '../events/pubsub';\nimport type { Event } from '../events/types';\nimport { AvailableHooks, registerHook } from '../hooks';\nimport { LogLevel, noopLogger, ConsoleLogger } from '../logger';\nimport type { IMastraLogger } from '../logger';\nimport type { MCPServerBase } from '../mcp';\nimport type { MastraMemory } from '../memory/memory';\nimport type { MastraScorer } from '../scores';\nimport type { Middleware, ServerConfig } from '../server/types';\nimport type { MastraStorage } from '../storage';\nimport { augmentWithInit } from '../storage/storageWithInit';\nimport { InstrumentClass, Telemetry } from '../telemetry';\nimport type { OtelConfig } from '../telemetry';\nimport type { MastraTTS } from '../tts';\nimport type { MastraIdGenerator } from '../types';\nimport type { MastraVector } from '../vector';\nimport type { Workflow } from '../workflows';\nimport { WorkflowEventProcessor } from '../workflows/evented/workflow-event-processor';\nimport type { LegacyWorkflow } from '../workflows/legacy';\nimport { createOnScorerHook } from './hooks';\n\n/**\n * Configuration interface for initializing a Mastra instance.\n *\n * The Config interface defines all the optional components that can be registered\n * with a Mastra instance, including agents, workflows, storage, logging, and more.\n *\n * @template TAgents - Record of agent instances keyed by their names\n * @template TLegacyWorkflows - Record of legacy workflow instances\n * @template TWorkflows - Record of workflow instances\n * @template TVectors - Record of vector store instances\n * @template TTTS - Record of text-to-speech instances\n * @template TLogger - Logger implementation type\n * @template TVNextNetworks - Record of agent network instances\n * @template TMCPServers - Record of MCP server instances\n * @template TScorers - Record of scorer instances\n *\n * @example\n * ```typescript\n * const mastra = new Mastra({\n *   agents: {\n *     weatherAgent: new Agent({\n *       name: 'weather-agent',\n *       instructions: 'You help with weather information',\n *       model: 'openai/gpt-5'\n *     })\n *   },\n *   storage: new LibSQLStore({ url: ':memory:' }),\n *   logger: new PinoLogger({ name: 'MyApp' })\n * });\n * ```\n */\nexport interface Config<\n  TAgents extends Record<string, Agent<any>> = Record<string, Agent<any>>,\n  TLegacyWorkflows extends Record<string, LegacyWorkflow> = Record<string, LegacyWorkflow>,\n  TWorkflows extends Record<string, Workflow<any, any, any, any, any, any>> = Record<\n    string,\n    Workflow<any, any, any, any, any, any>\n  >,\n  TVectors extends Record<string, MastraVector> = Record<string, MastraVector>,\n  TTTS extends Record<string, MastraTTS> = Record<string, MastraTTS>,\n  TLogger extends IMastraLogger = IMastraLogger,\n  TMCPServers extends Record<string, MCPServerBase> = Record<string, MCPServerBase>,\n  TScorers extends Record<string, MastraScorer<any, any, any, any>> = Record<string, MastraScorer<any, any, any, any>>,\n> {\n  /**\n   * Agents are autonomous systems that can make decisions and take actions.\n   */\n  agents?: TAgents;\n\n  /**\n   * Storage provider for persisting data, conversation history, and workflow state.\n   * Required for agent memory and workflow persistence.\n   */\n  storage?: MastraStorage;\n\n  /**\n   * Vector stores for semantic search and retrieval-augmented generation (RAG).\n   * Used for storing and querying embeddings.\n   */\n  vectors?: TVectors;\n\n  /**\n   * Logger implementation for application logging and debugging.\n   * Set to `false` to disable logging entirely.\n   * @default `INFO` level in development, `WARN` in production.\n   */\n  logger?: TLogger | false;\n\n  /**\n   * Legacy workflow definitions for backward compatibility.\n   * @deprecated Use `workflows` instead.\n   */\n  legacy_workflows?: TLegacyWorkflows;\n\n  /**\n   * Workflows provide type-safe, composable task execution with built-in error handling.\n   */\n  workflows?: TWorkflows;\n\n  /**\n   * Text-to-speech providers for voice synthesis capabilities.\n   */\n  tts?: TTTS;\n\n  /**\n   * OpenTelemetry configuration for distributed tracing and observability.\n   *\n   * @deprecated Use {@link observability} instead.\n   */\n  telemetry?: OtelConfig;\n\n  /**\n   * AI-specific observability configuration for tracking model interactions.\n   */\n  observability?: ObservabilityRegistryConfig;\n\n  /**\n   * Custom ID generator function for creating unique identifiers.\n   * @default `crypto.randomUUID()`\n   */\n  idGenerator?: MastraIdGenerator;\n\n  /**\n   * Deployment provider for publishing applications to cloud platforms.\n   */\n  deployer?: MastraDeployer;\n\n  /**\n   * Server configuration for HTTP endpoints and middleware.\n   */\n  server?: ServerConfig;\n\n  /**\n   * MCP servers provide tools and resources that agents can use.\n   */\n  mcpServers?: TMCPServers;\n\n  /**\n   * Bundler configuration for packaging and deployment.\n   */\n  bundler?: BundlerConfig;\n\n  /**\n   * Pub/sub system for event-driven communication between components.\n   * @default EventEmitterPubSub\n   */\n  pubsub?: PubSub;\n\n  /**\n   * Scorers help assess the quality of agent responses and workflow outputs.\n   */\n  scorers?: TScorers;\n\n  /**\n   * Server middleware functions to be applied to API routes\n   * Each middleware can specify a path pattern (defaults to '/api/*')\n   * @deprecated use server.middleware instead\n   */\n  serverMiddleware?: Array<{\n    handler: (c: any, next: () => Promise<void>) => Promise<Response | void>;\n    path?: string;\n  }>;\n\n  // @deprecated add memory to your Agent directly instead\n  memory?: never;\n\n  /**\n   * Event handlers for custom application events.\n   * Maps event topics to handler functions for event-driven architectures.\n   */\n  events?: {\n    [topic: string]: (\n      event: Event,\n      cb?: () => Promise<void>,\n    ) => Promise<void> | ((event: Event, cb?: () => Promise<void>) => Promise<void>)[];\n  };\n}\n\n@InstrumentClass({\n  prefix: 'mastra',\n  excludeMethods: ['getLogger', 'getTelemetry'],\n})\n/**\n * The central orchestrator for Mastra applications, managing agents, workflows, storage, logging, telemetry, and more.\n *\n * The `Mastra` class serves as the main entry point and registry for all components in a Mastra application.\n * It coordinates the interaction between agents, workflows, storage systems, and other services.\n\n * @template TAgents - Record of agent instances keyed by their names\n * @template TLegacyWorkflows - Record of legacy workflow instances for backward compatibility\n * @template TWorkflows - Record of modern workflow instances\n * @template TVectors - Record of vector store instances for semantic search and RAG\n * @template TTTS - Record of text-to-speech provider instances\n * @template TLogger - Logger implementation type for application logging\n * @template TVNextNetworks - Record of next-generation agent network instances\n * @template TMCPServers - Record of Model Context Protocol server instances\n * @template TScorers - Record of evaluation scorer instances for measuring AI performance\n *\n * @example\n * ```typescript\n * const mastra = new Mastra({\n *   agents: {\n *     weatherAgent: new Agent({\n *       name: 'weather-agent',\n *       instructions: 'You provide weather information',\n *       model: 'openai/gpt-5',\n *       tools: [getWeatherTool]\n *     })\n *   },\n *   workflows: { dataWorkflow },\n *   storage: new LibSQLStore({ url: ':memory:' }),\n *   logger: new PinoLogger({ name: 'MyApp' })\n * });\n * ```\n */\nexport class Mastra<\n  TAgents extends Record<string, Agent<any>> = Record<string, Agent<any>>,\n  TLegacyWorkflows extends Record<string, LegacyWorkflow> = Record<string, LegacyWorkflow>,\n  TWorkflows extends Record<string, Workflow<any, any, any, any, any, any>> = Record<\n    string,\n    Workflow<any, any, any, any, any, any>\n  >,\n  TVectors extends Record<string, MastraVector> = Record<string, MastraVector>,\n  TTTS extends Record<string, MastraTTS> = Record<string, MastraTTS>,\n  TLogger extends IMastraLogger = IMastraLogger,\n  TMCPServers extends Record<string, MCPServerBase> = Record<string, MCPServerBase>,\n  TScorers extends Record<string, MastraScorer<any, any, any, any>> = Record<string, MastraScorer<any, any, any, any>>,\n> {\n  #vectors?: TVectors;\n  #agents: TAgents;\n  #logger: TLogger;\n  #legacy_workflows: TLegacyWorkflows;\n  #workflows: TWorkflows;\n  #tts?: TTTS;\n  #deployer?: MastraDeployer;\n  #serverMiddleware: Array<{\n    handler: (c: any, next: () => Promise<void>) => Promise<Response | void>;\n    path: string;\n  }> = [];\n\n  /**\n   * @deprecated Use {@link getAITracing()} instead.\n   */\n  #telemetry?: Telemetry;\n  #storage?: MastraStorage;\n  #memory?: MastraMemory;\n  #scorers?: TScorers;\n  #server?: ServerConfig;\n  #mcpServers?: TMCPServers;\n  #bundler?: BundlerConfig;\n  #idGenerator?: MastraIdGenerator;\n  #pubsub: PubSub;\n  #events: {\n    [topic: string]: ((event: Event, cb?: () => Promise<void>) => Promise<void>)[];\n  } = {};\n  #internalMastraWorkflows: Record<string, Workflow> = {};\n  // This is only used internally for server handlers that require temporary persistence\n  #serverCache: MastraServerCache;\n\n  /**\n   * @deprecated use {@link getAITracing()} instead\n   */\n  get telemetry() {\n    return this.#telemetry;\n  }\n\n  /**\n   * @deprecated use getStorage() instead\n   */\n  get storage() {\n    return this.#storage;\n  }\n\n  /**\n   * @deprecated use getMemory() instead\n   */\n  get memory() {\n    return this.#memory;\n  }\n\n  get pubsub() {\n    return this.#pubsub;\n  }\n\n  /**\n   * Gets the currently configured ID generator function.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   idGenerator: () => `custom-${Date.now()}`\n   * });\n   * const generator = mastra.getIdGenerator();\n   * console.log(generator?.()); // \"custom-1234567890\"\n   * ```\n   */\n  public getIdGenerator() {\n    return this.#idGenerator;\n  }\n\n  /**\n   * Generates a unique identifier using the configured generator or defaults to `crypto.randomUUID()`.\n   *\n   * This method is used internally by Mastra for creating unique IDs for various entities\n   * like workflow runs, agent conversations, and other resources that need unique identification.\n   *\n   * @throws {MastraError} When the custom ID generator returns an empty string\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra();\n   * const id = mastra.generateId();\n   * console.log(id); // \"550e8400-e29b-41d4-a716-446655440000\"\n   * ```\n   */\n  public generateId(): string {\n    if (this.#idGenerator) {\n      const id = this.#idGenerator();\n      if (!id) {\n        const error = new MastraError({\n          id: 'MASTRA_ID_GENERATOR_RETURNED_EMPTY_STRING',\n          domain: ErrorDomain.MASTRA,\n          category: ErrorCategory.USER,\n          text: 'ID generator returned an empty string, which is not allowed',\n        });\n        this.#logger?.trackException(error);\n        throw error;\n      }\n      return id;\n    }\n    return randomUUID();\n  }\n\n  /**\n   * Sets a custom ID generator function for creating unique identifiers.\n   *\n   * The ID generator function will be used by `generateId()` instead of the default\n   * `crypto.randomUUID()`. This is useful for creating application-specific ID formats\n   * or integrating with existing ID generation systems.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra();\n   * mastra.setIdGenerator(() => `custom-${Date.now()}`);\n   * const id = mastra.generateId();\n   * console.log(id); // \"custom-1234567890\"\n   * ```\n   */\n  public setIdGenerator(idGenerator: MastraIdGenerator) {\n    this.#idGenerator = idGenerator;\n  }\n\n  /**\n   * Creates a new Mastra instance with the provided configuration.\n   *\n   * The constructor initializes all the components specified in the config, sets up\n   * internal systems like logging and telemetry, and registers components with each other.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   agents: {\n   *     assistant: new Agent({\n   *       name: 'assistant',\n   *       instructions: 'You are a helpful assistant',\n   *       model: 'openai/gpt-5'\n   *     })\n   *   },\n   *   storage: new PostgresStore({\n   *     connectionString: process.env.DATABASE_URL\n   *   }),\n   *   logger: new PinoLogger({ name: 'MyApp' })\n   * });\n   * ```\n   */\n  constructor(config?: Config<TAgents, TLegacyWorkflows, TWorkflows, TVectors, TTTS, TLogger, TMCPServers, TScorers>) {\n    // Store server middleware with default path\n    if (config?.serverMiddleware) {\n      this.#serverMiddleware = config.serverMiddleware.map(m => ({\n        handler: m.handler,\n        path: m.path || '/api/*',\n      }));\n    }\n\n    /*\n    Server Cache\n    */\n\n    // This is only used internally for server handlers that require temporary persistence\n    this.#serverCache = new InMemoryServerCache();\n\n    /*\n    Events\n    */\n    if (config?.pubsub) {\n      this.#pubsub = config.pubsub;\n    } else {\n      this.#pubsub = new EventEmitterPubSub();\n    }\n\n    this.#events = {};\n    for (const topic in config?.events ?? {}) {\n      if (!Array.isArray(config?.events?.[topic])) {\n        this.#events[topic] = [config?.events?.[topic] as any];\n      } else {\n        this.#events[topic] = config?.events?.[topic] ?? [];\n      }\n    }\n\n    const workflowEventProcessor = new WorkflowEventProcessor({ mastra: this });\n    const workflowEventCb = async (event: Event, cb?: () => Promise<void>): Promise<void> => {\n      try {\n        await workflowEventProcessor.process(event, cb);\n      } catch (e) {\n        console.error('Error processing event', e);\n      }\n    };\n    if (this.#events.workflows) {\n      this.#events.workflows.push(workflowEventCb);\n    } else {\n      this.#events.workflows = [workflowEventCb];\n    }\n\n    /*\n      Logger\n    */\n\n    let logger: TLogger;\n    if (config?.logger === false) {\n      logger = noopLogger as unknown as TLogger;\n    } else {\n      if (config?.logger) {\n        logger = config.logger;\n      } else {\n        const levelOnEnv =\n          process.env.NODE_ENV === 'production' && process.env.MASTRA_DEV !== 'true' ? LogLevel.WARN : LogLevel.INFO;\n        logger = new ConsoleLogger({ name: 'Mastra', level: levelOnEnv }) as unknown as TLogger;\n      }\n    }\n    this.#logger = logger;\n\n    this.#idGenerator = config?.idGenerator;\n\n    let storage = config?.storage;\n\n    if (storage) {\n      storage = augmentWithInit(storage);\n    }\n\n    /*\n    Telemetry\n    */\n\n    this.#telemetry = Telemetry.init(config?.telemetry);\n\n    // Warn if telemetry is enabled but the instrumentation global is not set\n    if (\n      config?.telemetry?.enabled !== false &&\n      typeof globalThis !== 'undefined' &&\n      (globalThis as any).___MASTRA_TELEMETRY___ !== true\n    ) {\n      this.#logger?.warn(\n        `Mastra telemetry is enabled, but the required instrumentation file was not loaded. ` +\n          `If you are using Mastra outside of the mastra server environment, see: https://mastra.ai/en/docs/observability/tracing#tracing-outside-mastra-server-environment`,\n        `If you are using a custom instrumentation file or want to disable this warning, set the globalThis.___MASTRA_TELEMETRY___ variable to true in your instrumentation file.`,\n      );\n    }\n\n    if (config?.telemetry?.enabled !== false) {\n      this.#logger?.warn(\n        `Mastra telemetry is deprecated and will be removed on the Nov 4th release. Instead use AI Tracing. ` +\n          `More info can be found here: https://github.com/mastra-ai/mastra/issues/8577 and here: https://mastra.ai/en/docs/observability/ai-tracing/overview`,\n      );\n    }\n\n    /*\n    AI Tracing\n    */\n\n    if (config?.observability) {\n      setupAITracing(config.observability);\n    }\n\n    /*\n      Storage\n    */\n    if (this.#telemetry && storage) {\n      this.#storage = this.#telemetry.traceClass(storage, {\n        excludeMethods: ['__setTelemetry', '__getTelemetry', 'batchTraceInsert', 'getTraces', 'getEvalsByAgentName'],\n      });\n      this.#storage.__setTelemetry(this.#telemetry);\n    } else {\n      this.#storage = storage;\n    }\n\n    /*\n    Vectors\n    */\n    if (config?.vectors) {\n      let vectors: Record<string, MastraVector> = {};\n      Object.entries(config.vectors).forEach(([key, vector]) => {\n        if (this.#telemetry) {\n          vectors[key] = this.#telemetry.traceClass(vector, {\n            excludeMethods: ['__setTelemetry', '__getTelemetry'],\n          });\n          vectors[key].__setTelemetry(this.#telemetry);\n        } else {\n          vectors[key] = vector;\n        }\n      });\n\n      this.#vectors = vectors as TVectors;\n    }\n\n    if (config?.mcpServers) {\n      this.#mcpServers = config.mcpServers;\n\n      // Set logger/telemetry/Mastra instance/id for MCP servers\n      Object.entries(this.#mcpServers).forEach(([key, server]) => {\n        server.setId(key);\n        if (this.#telemetry) {\n          server.__setTelemetry(this.#telemetry);\n        }\n\n        server.__registerMastra(this);\n        server.__setLogger(this.getLogger());\n      });\n    }\n\n    if (config && `memory` in config) {\n      const error = new MastraError({\n        id: 'MASTRA_CONSTRUCTOR_INVALID_MEMORY_CONFIG',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `\n  Memory should be added to Agents, not to Mastra.\n\nInstead of:\n  new Mastra({ memory: new Memory() })\n\ndo:\n  new Agent({ memory: new Memory() })\n`,\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    if (config?.tts) {\n      this.#tts = config.tts;\n      Object.entries(this.#tts).forEach(([key, ttsCl]) => {\n        if (this.#tts?.[key]) {\n          if (this.#telemetry) {\n            // @ts-ignore\n            this.#tts[key] = this.#telemetry.traceClass(ttsCl, {\n              excludeMethods: ['__setTelemetry', '__getTelemetry'],\n            });\n            this.#tts[key].__setTelemetry(this.#telemetry);\n          }\n        }\n      });\n    }\n\n    /*\n    Agents\n    */\n    const agents: Record<string, Agent> = {};\n    if (config?.agents) {\n      Object.entries(config.agents).forEach(([key, agent]) => {\n        if (agents[key]) {\n          const error = new MastraError({\n            id: 'MASTRA_AGENT_REGISTRATION_DUPLICATE_ID',\n            domain: ErrorDomain.MASTRA,\n            category: ErrorCategory.USER,\n            text: `Agent with name ID:${key} already exists`,\n            details: {\n              agentId: key,\n            },\n          });\n          this.#logger?.trackException(error);\n          throw error;\n        }\n        agent.__registerMastra(this);\n\n        agent.__registerPrimitives({\n          logger: this.getLogger(),\n          telemetry: this.#telemetry,\n          storage: this.storage,\n          memory: this.memory,\n          agents: agents,\n          tts: this.#tts,\n          vectors: this.#vectors,\n        });\n\n        agents[key] = agent;\n      });\n    }\n\n    this.#agents = agents as TAgents;\n\n    /**\n     * Scorers\n     */\n\n    const scorers = {} as Record<string, MastraScorer<any, any, any, any>>;\n    if (config?.scorers) {\n      Object.entries(config.scorers).forEach(([key, scorer]) => {\n        scorers[key] = scorer;\n      });\n    }\n    this.#scorers = scorers as TScorers;\n\n    /*\n    Legacy Workflows\n    */\n    this.#legacy_workflows = {} as TLegacyWorkflows;\n\n    if (config?.legacy_workflows) {\n      Object.entries(config.legacy_workflows).forEach(([key, workflow]) => {\n        workflow.__registerMastra(this);\n        workflow.__registerPrimitives({\n          logger: this.getLogger(),\n          telemetry: this.#telemetry,\n          storage: this.storage,\n          memory: this.memory,\n          agents: agents,\n          tts: this.#tts,\n          vectors: this.#vectors,\n        });\n        // @ts-ignore\n        this.#legacy_workflows[key] = workflow;\n\n        const workflowSteps = Object.values(workflow.steps).filter(step => !!step.workflowId && !!step.workflow);\n        if (workflowSteps.length > 0) {\n          workflowSteps.forEach(step => {\n            // @ts-ignore\n            this.#legacy_workflows[step.workflowId] = step.workflow;\n          });\n        }\n      });\n    }\n\n    this.#workflows = {} as TWorkflows;\n    if (config?.workflows) {\n      Object.entries(config.workflows).forEach(([key, workflow]) => {\n        workflow.__registerMastra(this);\n        workflow.__registerPrimitives({\n          logger: this.getLogger(),\n          telemetry: this.#telemetry,\n          storage: this.storage,\n          memory: this.memory,\n          agents: agents,\n          tts: this.#tts,\n          vectors: this.#vectors,\n        });\n        // @ts-ignore\n        this.#workflows[key] = workflow;\n      });\n    }\n\n    if (config?.server) {\n      this.#server = config.server;\n    }\n\n    registerHook(AvailableHooks.ON_SCORER_RUN, createOnScorerHook(this));\n\n    /*\n      Register Mastra instance with AI tracing exporters and initialize them\n    */\n    if (config?.observability) {\n      this.registerAITracingExporters();\n      this.initAITracingExporters();\n    }\n\n    this.setLogger({ logger });\n  }\n\n  /**\n   * Register this Mastra instance with AI tracing exporters that need it\n   */\n  private registerAITracingExporters(): void {\n    const allTracingInstances = getAllAITracing();\n    allTracingInstances.forEach(tracing => {\n      const exporters = tracing.getExporters();\n      exporters.forEach(exporter => {\n        // Check if exporter has __registerMastra method\n        if ('__registerMastra' in exporter && typeof (exporter as any).__registerMastra === 'function') {\n          (exporter as any).__registerMastra(this);\n        }\n      });\n    });\n  }\n\n  /**\n   * Initialize all AI tracing exporters after registration is complete\n   */\n  private initAITracingExporters(): void {\n    const allTracingInstances = getAllAITracing();\n\n    allTracingInstances.forEach(tracing => {\n      const config = tracing.getConfig();\n      const exporters = tracing.getExporters();\n      exporters.forEach(exporter => {\n        // Initialize exporter if it has an init method\n        if ('init' in exporter && typeof exporter.init === 'function') {\n          try {\n            exporter.init(config);\n          } catch (error) {\n            this.#logger?.warn('Failed to initialize AI tracing exporter', {\n              exporterName: exporter.name,\n              error: error instanceof Error ? error.message : String(error),\n            });\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Retrieves a registered agent by its name.\n   *\n   * @template TAgentName - The specific agent name type from the registered agents\n   * @throws {MastraError} When the agent with the specified name is not found\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   agents: {\n   *     weatherAgent: new Agent({\n   *       name: 'weather-agent',\n   *       instructions: 'You provide weather information',\n   *       model: 'openai/gpt-5'\n   *     })\n   *   }\n   * });\n   * const agent = mastra.getAgent('weatherAgent');\n   * const response = await agent.generate('What is the weather?');\n   * ```\n   */\n  public getAgent<TAgentName extends keyof TAgents>(name: TAgentName): TAgents[TAgentName] {\n    const agent = this.#agents?.[name];\n    if (!agent) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_AGENT_BY_NAME_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Agent with name ${String(name)} not found`,\n        details: {\n          status: 404,\n          agentName: String(name),\n          agents: Object.keys(this.#agents ?? {}).join(', '),\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n    return this.#agents[name];\n  }\n\n  /**\n   * Retrieves a registered agent by its unique ID.\n   *\n   * This method searches for an agent using its internal ID property. If no agent\n   * is found with the given ID, it also attempts to find an agent using the ID as\n   * a name (for backward compatibility).\n   *\n   * @throws {MastraError} When no agent is found with the specified ID\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   agents: {\n   *     assistant: new Agent({\n   *       name: 'assistant',\n   *       instructions: 'You are a helpful assistant',\n   *       model: 'openai/gpt-5'\n   *     })\n   *   }\n   * });\n   *\n   * const assistant = mastra.getAgent('assistant');\n   * const sameAgent = mastra.getAgentById(assistant.id);\n   * ```\n   */\n  public getAgentById(id: string): Agent {\n    let agent = Object.values(this.#agents).find(a => a.id === id);\n\n    if (!agent) {\n      try {\n        agent = this.getAgent(id as any);\n      } catch {\n        // do nothing\n      }\n    }\n\n    if (!agent) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_AGENT_BY_AGENT_ID_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Agent with id ${String(id)} not found`,\n        details: {\n          status: 404,\n          agentId: String(id),\n          agents: Object.keys(this.#agents ?? {}).join(', '),\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    return agent;\n  }\n\n  /**\n   * Returns all registered agents as a record keyed by their names.\n   *\n   * This method provides access to the complete registry of agents, allowing you to\n   * iterate over them, check what agents are available, or perform bulk operations.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   agents: {\n   *     weatherAgent: new Agent({ name: 'weather', model: openai('gpt-4o') }),\n   *     supportAgent: new Agent({ name: 'support', model: openai('gpt-4o') })\n   *   }\n   * });\n   *\n   * const allAgents = mastra.getAgents();\n   * console.log(Object.keys(allAgents)); // ['weatherAgent', 'supportAgent']\n   * ```\n   */\n  public getAgents() {\n    return this.#agents;\n  }\n\n  /**\n   * Retrieves a registered vector store by its name.\n   *\n   * @template TVectorName - The specific vector store name type from the registered vectors\n   * @throws {MastraError} When the vector store with the specified name is not found\n   *\n   * @example Using a vector store for semantic search\n   * ```typescript\n   * import { PineconeVector } from '@mastra/pinecone';\n   * import { OpenAIEmbedder } from '@mastra/embedders';\n   *\n   * const mastra = new Mastra({\n   *   vectors: {\n   *     knowledge: new PineconeVector({\n   *       apiKey: process.env.PINECONE_API_KEY,\n   *       indexName: 'knowledge-base',\n   *       embedder: new OpenAIEmbedder({\n   *         apiKey: process.env.OPENAI_API_KEY,\n   *         model: 'text-embedding-3-small'\n   *       })\n   *     }),\n   *     products: new PineconeVector({\n   *       apiKey: process.env.PINECONE_API_KEY,\n   *       indexName: 'product-catalog'\n   *     })\n   *   }\n   * });\n   *\n   * // Get a vector store and perform semantic search\n   * const knowledgeBase = mastra.getVector('knowledge');\n   * const results = await knowledgeBase.query({\n   *   query: 'How to reset password?',\n   *   topK: 5\n   * });\n   *\n   * console.log('Relevant documents:', results);\n   * ```\n   */\n  public getVector<TVectorName extends keyof TVectors>(name: TVectorName): TVectors[TVectorName] {\n    const vector = this.#vectors?.[name];\n    if (!vector) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_VECTOR_BY_NAME_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Vector with name ${String(name)} not found`,\n        details: {\n          status: 404,\n          vectorName: String(name),\n          vectors: Object.keys(this.#vectors ?? {}).join(', '),\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n    return vector;\n  }\n\n  /**\n   * Returns all registered vector stores as a record keyed by their names.\n   *\n   * @example Listing all vector stores\n   * ```typescript\n   * const mastra = new Mastra({\n   *   vectors: {\n   *     documents: new PineconeVector({ indexName: 'docs' }),\n   *     images: new PineconeVector({ indexName: 'images' }),\n   *     products: new ChromaVector({ collectionName: 'products' })\n   *   }\n   * });\n   *\n   * const allVectors = mastra.getVectors();\n   * console.log(Object.keys(allVectors)); // ['documents', 'images', 'products']\n   *\n   * // Check vector store types and configurations\n   * for (const [name, vectorStore] of Object.entries(allVectors)) {\n   *   console.log(`Vector store ${name}:`, vectorStore.constructor.name);\n   * }\n   * ```\n   */\n  public getVectors() {\n    return this.#vectors;\n  }\n\n  /**\n   * Gets the currently configured deployment provider.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   deployer: new VercelDeployer({\n   *     token: process.env.VERCEL_TOKEN,\n   *     projectId: process.env.VERCEL_PROJECT_ID\n   *   })\n   * });\n   *\n   * const deployer = mastra.getDeployer();\n   * if (deployer) {\n   *   await deployer.deploy({\n   *     name: 'my-mastra-app',\n   *     environment: 'production'\n   *   });\n   * }\n   * ```\n   */\n  public getDeployer() {\n    return this.#deployer;\n  }\n\n  /**\n   * Retrieves a registered legacy workflow by its ID.\n   *\n   * Legacy workflows are the previous generation of workflow system in Mastra,\n   * maintained for backward compatibility. For new implementations, use the\n   * modern workflow system accessed via `getWorkflow()`.\n   *\n   * @template TWorkflowId - The specific workflow ID type from the registered legacy workflows\n   * @throws {MastraError} When the legacy workflow with the specified ID is not found\n   * @deprecated Use `getWorkflow()` for new implementations\n   *\n   * @example Getting a legacy workflow\n   * ```typescript\n   * const mastra = new Mastra({\n   *   legacy_workflows: {\n   *     oldDataFlow: legacyWorkflowInstance\n   *   }\n   * });\n   *\n   * const workflow = mastra.legacy_getWorkflow('oldDataFlow');\n   * const result = await workflow.execute({ input: 'data' });\n   * ```\n   */\n  public legacy_getWorkflow<TWorkflowId extends keyof TLegacyWorkflows>(\n    id: TWorkflowId,\n    { serialized }: { serialized?: boolean } = {},\n  ): TLegacyWorkflows[TWorkflowId] {\n    const workflow = this.#legacy_workflows?.[id];\n    if (!workflow) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_LEGACY_WORKFLOW_BY_ID_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Workflow with ID ${String(id)} not found`,\n        details: {\n          status: 404,\n          workflowId: String(id),\n          workflows: Object.keys(this.#legacy_workflows ?? {}).join(', '),\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    if (serialized) {\n      return { name: workflow.name } as TLegacyWorkflows[TWorkflowId];\n    }\n\n    return workflow;\n  }\n\n  /**\n   * Retrieves a registered workflow by its ID.\n   *\n   * @template TWorkflowId - The specific workflow ID type from the registered workflows\n   * @throws {MastraError} When the workflow with the specified ID is not found\n   *\n   * @example Getting and executing a workflow\n   * ```typescript\n   * import { createWorkflow, createStep } from '@mastra/core/workflows';\n   * import { z } from 'zod';\n   *\n   * const processDataWorkflow = createWorkflow({\n   *   name: 'process-data',\n   *   triggerSchema: z.object({ input: z.string() })\n   * })\n   *   .then(validateStep)\n   *   .then(transformStep)\n   *   .then(saveStep)\n   *   .commit();\n   *\n   * const mastra = new Mastra({\n   *   workflows: {\n   *     dataProcessor: processDataWorkflow\n   *   }\n   * });\n   * ```\n   */\n  public getWorkflow<TWorkflowId extends keyof TWorkflows>(\n    id: TWorkflowId,\n    { serialized }: { serialized?: boolean } = {},\n  ): TWorkflows[TWorkflowId] {\n    const workflow = this.#workflows?.[id];\n    if (!workflow) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_WORKFLOW_BY_ID_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Workflow with ID ${String(id)} not found`,\n        details: {\n          status: 404,\n          workflowId: String(id),\n          workflows: Object.keys(this.#workflows ?? {}).join(', '),\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    if (serialized) {\n      return { name: workflow.name } as TWorkflows[TWorkflowId];\n    }\n\n    return workflow;\n  }\n\n  __registerInternalWorkflow(workflow: Workflow) {\n    workflow.__registerMastra(this);\n    workflow.__registerPrimitives({\n      logger: this.getLogger(),\n      storage: this.storage,\n    });\n    this.#internalMastraWorkflows[workflow.id] = workflow;\n  }\n\n  __hasInternalWorkflow(id: string): boolean {\n    return Object.values(this.#internalMastraWorkflows).some(workflow => workflow.id === id);\n  }\n\n  __getInternalWorkflow(id: string): Workflow {\n    const workflow = Object.values(this.#internalMastraWorkflows).find(a => a.id === id);\n    if (!workflow) {\n      throw new MastraError({\n        id: 'MASTRA_GET_INTERNAL_WORKFLOW_BY_ID_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.SYSTEM,\n        text: `Workflow with id ${String(id)} not found`,\n        details: {\n          status: 404,\n          workflowId: String(id),\n        },\n      });\n    }\n\n    return workflow;\n  }\n\n  /**\n   * Retrieves a registered workflow by its unique ID.\n   *\n   * This method searches for a workflow using its internal ID property. If no workflow\n   * is found with the given ID, it also attempts to find a workflow using the ID as\n   * a name (for backward compatibility).\n   *\n   * @throws {MastraError} When no workflow is found with the specified ID\n   *\n   * @example Finding a workflow by ID\n   * ```typescript\n   * const mastra = new Mastra({\n   *   workflows: {\n   *     dataProcessor: createWorkflow({\n   *       name: 'process-data',\n   *       triggerSchema: z.object({ input: z.string() })\n   *     }).commit()\n   *   }\n   * });\n   *\n   * // Get the workflow's ID\n   * const workflow = mastra.getWorkflow('dataProcessor');\n   * const workflowId = workflow.id;\n   *\n   * // Later, retrieve the workflow by ID\n   * const sameWorkflow = mastra.getWorkflowById(workflowId);\n   * console.log(sameWorkflow.name); // \"process-data\"\n   * ```\n   */\n  public getWorkflowById(id: string): Workflow {\n    let workflow = Object.values(this.#workflows).find(a => a.id === id);\n\n    if (!workflow) {\n      try {\n        workflow = this.getWorkflow(id as any);\n      } catch {\n        // do nothing\n      }\n    }\n\n    if (!workflow) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_WORKFLOW_BY_ID_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Workflow with id ${String(id)} not found`,\n        details: {\n          status: 404,\n          workflowId: String(id),\n          workflows: Object.keys(this.#workflows ?? {}).join(', '),\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    return workflow;\n  }\n\n  /**\n   * Returns all registered legacy workflows as a record keyed by their IDs.\n   *\n   * Legacy workflows are the previous generation of workflow system in Mastra,\n   * maintained for backward compatibility. For new implementations, use `getWorkflows()`.\n   *\n   * @deprecated Use `getWorkflows()` for new implementations\n   *\n   * @example Listing all legacy workflows\n   * ```typescript\n   * const mastra = new Mastra({\n   *   legacy_workflows: {\n   *     oldFlow1: legacyWorkflow1,\n   *     oldFlow2: legacyWorkflow2\n   *   }\n   * });\n   *\n   * const allLegacyWorkflows = mastra.legacy_getWorkflows();\n   * console.log(Object.keys(allLegacyWorkflows)); // ['oldFlow1', 'oldFlow2']\n   *\n   * // Execute all legacy workflows\n   * for (const [id, workflow] of Object.entries(allLegacyWorkflows)) {\n   *   console.log(`Legacy workflow ${id}:`, workflow.name);\n   * }\n   * ```\n   */\n  public legacy_getWorkflows(props: { serialized?: boolean } = {}): Record<string, LegacyWorkflow> {\n    if (props.serialized) {\n      return Object.entries(this.#legacy_workflows).reduce((acc, [k, v]) => {\n        return {\n          ...acc,\n          [k]: { name: v.name },\n        };\n      }, {});\n    }\n    return this.#legacy_workflows;\n  }\n\n  /**\n   * Returns all registered scorers as a record keyed by their IDs.\n   *\n   * @example Listing all scorers\n   * ```typescript\n   * import { HelpfulnessScorer, AccuracyScorer, RelevanceScorer } from '@mastra/scorers';\n   *\n   * const mastra = new Mastra({\n   *   scorers: {\n   *     helpfulness: new HelpfulnessScorer(),\n   *     accuracy: new AccuracyScorer(),\n   *     relevance: new RelevanceScorer()\n   *   }\n   * });\n   *\n   * const allScorers = mastra.getScorers();\n   * console.log(Object.keys(allScorers)); // ['helpfulness', 'accuracy', 'relevance']\n   *\n   * // Check scorer configurations\n   * for (const [id, scorer] of Object.entries(allScorers)) {\n   *   console.log(`Scorer ${id}:`, scorer.name, scorer.description);\n   * }\n   * ```\n   */\n  public getScorers() {\n    return this.#scorers;\n  }\n\n  /**\n   * Retrieves a registered scorer by its key.\n   *\n   * @template TScorerKey - The specific scorer key type from the registered scorers\n   * @throws {MastraError} When the scorer with the specified key is not found\n   *\n   * @example Getting and using a scorer\n   * ```typescript\n   * import { HelpfulnessScorer, AccuracyScorer } from '@mastra/scorers';\n   *\n   * const mastra = new Mastra({\n   *   scorers: {\n   *     helpfulness: new HelpfulnessScorer({\n   *       model: openai('gpt-4o'),\n   *       criteria: 'Rate how helpful this response is'\n   *     }),\n   *     accuracy: new AccuracyScorer({\n   *       model: 'openai/gpt-5'\n   *     })\n   *   }\n   * });\n   *\n   * // Get a specific scorer\n   * const helpfulnessScorer = mastra.getScorer('helpfulness');\n   * const score = await helpfulnessScorer.score({\n   *   input: 'How do I reset my password?',\n   *   output: 'You can reset your password by clicking the forgot password link.',\n   *   expected: 'Detailed password reset instructions'\n   * });\n   *\n   * console.log('Helpfulness score:', score);\n   * ```\n   */\n  public getScorer<TScorerKey extends keyof TScorers>(key: TScorerKey): TScorers[TScorerKey] {\n    const scorer = this.#scorers?.[key];\n    if (!scorer) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_SCORER_NOT_FOUND',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Scorer with ${String(key)} not found`,\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n    return scorer;\n  }\n\n  /**\n   * Retrieves a registered scorer by its name.\n   *\n   * This method searches through all registered scorers to find one with the specified name.\n   * Unlike `getScorer()` which uses the registration key, this method uses the scorer's\n   * internal name property.\n   *\n   * @throws {MastraError} When no scorer is found with the specified name\n   *\n   * @example Finding a scorer by name\n   * ```typescript\n   * import { HelpfulnessScorer } from '@mastra/scorers';\n   *\n   * const mastra = new Mastra({\n   *   scorers: {\n   *     myHelpfulnessScorer: new HelpfulnessScorer({\n   *       name: 'helpfulness-evaluator',\n   *       model: 'openai/gpt-5'\n   *     })\n   *   }\n   * });\n   *\n   * // Find scorer by its internal name, not the registration key\n   * const scorer = mastra.getScorerByName('helpfulness-evaluator');\n   * const score = await scorer.score({\n   *   input: 'question',\n   *   output: 'answer'\n   * });\n   * ```\n   */\n  public getScorerByName(name: string): MastraScorer<any, any, any, any> {\n    for (const [_key, value] of Object.entries(this.#scorers ?? {})) {\n      if (value.name === name) {\n        return value;\n      }\n    }\n\n    const error = new MastraError({\n      id: 'MASTRA_GET_SCORER_BY_NAME_NOT_FOUND',\n      domain: ErrorDomain.MASTRA,\n      category: ErrorCategory.USER,\n      text: `Scorer with name ${String(name)} not found`,\n    });\n    this.#logger?.trackException(error);\n    throw error;\n  }\n\n  /**\n   * Returns all registered workflows as a record keyed by their IDs.\n   *\n   * @example Listing all workflows\n   * ```typescript\n   * const mastra = new Mastra({\n   *   workflows: {\n   *     dataProcessor: createWorkflow({...}).commit(),\n   *     emailSender: createWorkflow({...}).commit(),\n   *     reportGenerator: createWorkflow({...}).commit()\n   *   }\n   * });\n   *\n   * const allWorkflows = mastra.getWorkflows();\n   * console.log(Object.keys(allWorkflows)); // ['dataProcessor', 'emailSender', 'reportGenerator']\n   *\n   * // Execute all workflows with sample data\n   * for (const [id, workflow] of Object.entries(allWorkflows)) {\n   *   console.log(`Workflow ${id}:`, workflow.name);\n   *   // const result = await workflow.execute(sampleData);\n   * }\n   * ```\n   */\n  public getWorkflows(props: { serialized?: boolean } = {}): Record<string, Workflow> {\n    if (props.serialized) {\n      return Object.entries(this.#workflows).reduce((acc, [k, v]) => {\n        return {\n          ...acc,\n          [k]: { name: v.name },\n        };\n      }, {});\n    }\n    return this.#workflows;\n  }\n\n  /**\n   * Sets the storage provider for the Mastra instance.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra();\n   *\n   * // Set PostgreSQL storage\n   * mastra.setStorage(new PostgresStore({\n   *   connectionString: process.env.DATABASE_URL\n   * }));\n   *\n   * // Now agents can use memory with the storage\n   * const agent = new Agent({\n   *   name: 'assistant',\n   *   memory: new Memory({ storage: mastra.getStorage() })\n   * });\n   * ```\n   */\n  public setStorage(storage: MastraStorage) {\n    this.#storage = augmentWithInit(storage);\n  }\n\n  public setLogger({ logger }: { logger: TLogger }) {\n    this.#logger = logger;\n\n    if (this.#agents) {\n      Object.keys(this.#agents).forEach(key => {\n        this.#agents?.[key]?.__setLogger(this.#logger);\n      });\n    }\n\n    if (this.#memory) {\n      this.#memory.__setLogger(this.#logger);\n    }\n\n    if (this.#deployer) {\n      this.#deployer.__setLogger(this.#logger);\n    }\n\n    if (this.#tts) {\n      Object.keys(this.#tts).forEach(key => {\n        this.#tts?.[key]?.__setLogger(this.#logger);\n      });\n    }\n\n    if (this.#storage) {\n      this.#storage.__setLogger(this.#logger);\n    }\n\n    if (this.#vectors) {\n      Object.keys(this.#vectors).forEach(key => {\n        this.#vectors?.[key]?.__setLogger(this.#logger);\n      });\n    }\n\n    if (this.#mcpServers) {\n      Object.keys(this.#mcpServers).forEach(key => {\n        this.#mcpServers?.[key]?.__setLogger(this.#logger);\n      });\n    }\n\n    // Set logger for AI tracing instances\n    const allTracingInstances = getAllAITracing();\n    allTracingInstances.forEach(instance => {\n      instance.__setLogger(this.#logger);\n    });\n  }\n\n  public setTelemetry(telemetry: OtelConfig) {\n    this.#telemetry = Telemetry.init(telemetry);\n\n    if (this.#agents) {\n      Object.keys(this.#agents).forEach(key => {\n        if (this.#telemetry) {\n          this.#agents?.[key]?.__setTelemetry(this.#telemetry);\n        }\n      });\n    }\n\n    if (this.#memory) {\n      this.#memory = this.#telemetry.traceClass(this.#memory, {\n        excludeMethods: ['__setTelemetry', '__getTelemetry'],\n      });\n      this.#memory.__setTelemetry(this.#telemetry);\n    }\n\n    if (this.#deployer) {\n      this.#deployer = this.#telemetry.traceClass(this.#deployer, {\n        excludeMethods: ['__setTelemetry', '__getTelemetry'],\n      });\n      this.#deployer.__setTelemetry(this.#telemetry);\n    }\n\n    if (this.#tts) {\n      let tts = {} as Record<string, MastraTTS>;\n      Object.entries(this.#tts).forEach(([key, ttsCl]) => {\n        if (this.#telemetry) {\n          tts[key] = this.#telemetry.traceClass(ttsCl, {\n            excludeMethods: ['__setTelemetry', '__getTelemetry'],\n          });\n          tts[key].__setTelemetry(this.#telemetry);\n        }\n      });\n      this.#tts = tts as TTTS;\n    }\n\n    if (this.#storage) {\n      this.#storage = this.#telemetry.traceClass(this.#storage, {\n        excludeMethods: ['__setTelemetry', '__getTelemetry'],\n      });\n      this.#storage.__setTelemetry(this.#telemetry);\n    }\n\n    if (this.#vectors) {\n      let vectors = {} as Record<string, MastraVector>;\n      Object.entries(this.#vectors).forEach(([key, vector]) => {\n        if (this.#telemetry) {\n          vectors[key] = this.#telemetry.traceClass(vector, {\n            excludeMethods: ['__setTelemetry', '__getTelemetry'],\n          });\n          vectors[key].__setTelemetry(this.#telemetry);\n        }\n      });\n      this.#vectors = vectors as TVectors;\n    }\n  }\n\n  /**\n   * Gets all registered text-to-speech (TTS) providers.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   tts: {\n   *     openai: new OpenAITTS({\n   *       apiKey: process.env.OPENAI_API_KEY,\n   *       voice: 'alloy'\n   *     })\n   *   }\n   * });\n   *\n   * const ttsProviders = mastra.getTTS();\n   * const openaiTTS = ttsProviders?.openai;\n   * if (openaiTTS) {\n   *   const audioBuffer = await openaiTTS.synthesize('Hello, world!');\n   * }\n   * ```\n   */\n  public getTTS() {\n    return this.#tts;\n  }\n\n  /**\n   * Gets the currently configured logger instance.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   logger: new PinoLogger({\n   *     name: 'MyApp',\n   *     level: 'info'\n   *   })\n   * });\n   *\n   * const logger = mastra.getLogger();\n   * logger.info('Application started');\n   * logger.error('An error occurred', { error: 'details' });\n   * ```\n   */\n  public getLogger() {\n    return this.#logger;\n  }\n\n  /**\n   * Gets the currently configured telemetry instance.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   telemetry: {\n   *     enabled: true,\n   *     serviceName: 'my-mastra-app'\n   *   }\n   * });\n   *\n   * const telemetry = mastra.getTelemetry();\n   * if (telemetry) {\n   *   const span = telemetry.startSpan('custom-operation');\n   *   span.setAttributes({ operation: 'data-processing' });\n   *   span.end();\n   * }\n   * ```\n   *\n   * @deprecated use {@link getAITracing()} instead\n   */\n  public getTelemetry() {\n    return this.#telemetry;\n  }\n\n  /**\n   * Gets the currently configured memory instance.\n   *\n   * @deprecated Memory should be configured directly on agents instead of on the Mastra instance.\n   * Use `new Agent({ memory: new Memory() })` instead.\n   *\n   * @example Legacy memory usage (deprecated)\n   * ```typescript\n   * // This approach is deprecated\n   * const mastra = new Mastra({\n   *   // memory: new Memory() // This is no longer supported\n   * });\n   *\n   * // Use this instead:\n   * const agent = new Agent({\n   *   name: 'assistant',\n   *   memory: new Memory({\n   *     storage: new LibSQLStore({ url: ':memory:' })\n   *   })\n   * });\n   * ```\n   */\n  public getMemory() {\n    return this.#memory;\n  }\n\n  /**\n   * Gets the currently configured storage provider.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   storage: new LibSQLStore({ url: 'file:./data.db' })\n   * });\n   *\n   * // Use the storage in agent memory\n   * const agent = new Agent({\n   *   name: 'assistant',\n   *   memory: new Memory({\n   *     storage: mastra.getStorage()\n   *   })\n   * });\n   * ```\n   */\n  public getStorage() {\n    return this.#storage;\n  }\n\n  public getServerMiddleware() {\n    return this.#serverMiddleware;\n  }\n\n  public getServerCache() {\n    return this.#serverCache;\n  }\n\n  public setServerMiddleware(serverMiddleware: Middleware | Middleware[]) {\n    if (typeof serverMiddleware === 'function') {\n      this.#serverMiddleware = [\n        {\n          handler: serverMiddleware,\n          path: '/api/*',\n        },\n      ];\n      return;\n    }\n\n    if (!Array.isArray(serverMiddleware)) {\n      const error = new MastraError({\n        id: 'MASTRA_SET_SERVER_MIDDLEWARE_INVALID_TYPE',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: `Invalid middleware: expected a function or array, received ${typeof serverMiddleware}`,\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    this.#serverMiddleware = serverMiddleware.map(m => {\n      if (typeof m === 'function') {\n        return {\n          handler: m,\n          path: '/api/*',\n        };\n      }\n      return {\n        handler: m.handler,\n        path: m.path || '/api/*',\n      };\n    });\n  }\n\n  public getServer() {\n    return this.#server;\n  }\n\n  public getBundlerConfig() {\n    return this.#bundler;\n  }\n\n  public async getLogsByRunId({\n    runId,\n    transportId,\n    fromDate,\n    toDate,\n    logLevel,\n    filters,\n    page,\n    perPage,\n  }: {\n    runId: string;\n    transportId: string;\n    fromDate?: Date;\n    toDate?: Date;\n    logLevel?: LogLevel;\n    filters?: Record<string, any>;\n    page?: number;\n    perPage?: number;\n  }) {\n    if (!transportId) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_LOGS_BY_RUN_ID_MISSING_TRANSPORT',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: 'Transport ID is required',\n        details: {\n          runId,\n          transportId,\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    if (!this.#logger?.getLogsByRunId) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_LOGS_BY_RUN_ID_LOGGER_NOT_CONFIGURED',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.SYSTEM,\n        text: 'Logger is not configured or does not support getLogsByRunId operation',\n        details: {\n          runId,\n          transportId,\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    return await this.#logger.getLogsByRunId({\n      runId,\n      transportId,\n      fromDate,\n      toDate,\n      logLevel,\n      filters,\n      page,\n      perPage,\n    });\n  }\n\n  public async getLogs(\n    transportId: string,\n    params?: {\n      fromDate?: Date;\n      toDate?: Date;\n      logLevel?: LogLevel;\n      filters?: Record<string, any>;\n      page?: number;\n      perPage?: number;\n    },\n  ) {\n    if (!transportId) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_LOGS_MISSING_TRANSPORT',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.USER,\n        text: 'Transport ID is required',\n        details: {\n          transportId,\n        },\n      });\n      this.#logger?.trackException(error);\n      throw error;\n    }\n\n    if (!this.#logger) {\n      const error = new MastraError({\n        id: 'MASTRA_GET_LOGS_LOGGER_NOT_CONFIGURED',\n        domain: ErrorDomain.MASTRA,\n        category: ErrorCategory.SYSTEM,\n        text: 'Logger is not set',\n        details: {\n          transportId,\n        },\n      });\n      throw error;\n    }\n\n    return await this.#logger.getLogs(transportId, params);\n  }\n\n  /**\n   * Gets all registered Model Context Protocol (MCP) server instances.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   mcpServers: {\n   *     filesystem: new FileSystemMCPServer({\n   *       rootPath: '/app/data'\n   *     })\n   *   }\n   * });\n   *\n   * const mcpServers = mastra.getMCPServers();\n   * if (mcpServers) {\n   *   const fsServer = mcpServers.filesystem;\n   *   const tools = await fsServer.getTools();\n   * }\n   * ```\n   */\n  public getMCPServers(): Record<string, MCPServerBase> | undefined {\n    return this.#mcpServers;\n  }\n\n  /**\n   * Retrieves a specific Model Context Protocol (MCP) server instance by its logical ID.\n   *\n   * This method searches for an MCP server using its logical ID. If a version is specified,\n   * it returns the exact version match. If no version is provided, it returns the server\n   * with the most recent release date.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   mcpServers: {\n   *     filesystem: new FileSystemMCPServer({\n   *       id: 'fs-server',\n   *       version: '1.0.0',\n   *       rootPath: '/app/data'\n   *     })\n   *   }\n   * });\n   *\n   * const fsServer = mastra.getMCPServer('fs-server');\n   * if (fsServer) {\n   *   const tools = await fsServer.getTools();\n   * }\n   * ```\n   */\n  public getMCPServer(serverId: string, version?: string): MCPServerBase | undefined {\n    if (!this.#mcpServers) {\n      return undefined;\n    }\n\n    const allRegisteredServers = Object.values(this.#mcpServers || {});\n\n    const matchingLogicalIdServers = allRegisteredServers.filter(server => server.id === serverId);\n\n    if (matchingLogicalIdServers.length === 0) {\n      this.#logger?.debug(`No MCP servers found with logical ID: ${serverId}`);\n      return undefined;\n    }\n\n    if (version) {\n      const specificVersionServer = matchingLogicalIdServers.find(server => server.version === version);\n      if (!specificVersionServer) {\n        this.#logger?.debug(`MCP server with logical ID '${serverId}' found, but not version '${version}'.`);\n      }\n      return specificVersionServer;\n    } else {\n      // No version specified, find the one with the most recent releaseDate\n      if (matchingLogicalIdServers.length === 1) {\n        return matchingLogicalIdServers[0];\n      }\n\n      matchingLogicalIdServers.sort((a, b) => {\n        // Ensure releaseDate exists and is a string before creating a Date object\n        const dateAVal = a.releaseDate && typeof a.releaseDate === 'string' ? new Date(a.releaseDate).getTime() : NaN;\n        const dateBVal = b.releaseDate && typeof b.releaseDate === 'string' ? new Date(b.releaseDate).getTime() : NaN;\n\n        if (isNaN(dateAVal) && isNaN(dateBVal)) return 0;\n        if (isNaN(dateAVal)) return 1; // Treat invalid/missing dates as older\n        if (isNaN(dateBVal)) return -1; // Treat invalid/missing dates as older\n\n        return dateBVal - dateAVal; // Sorts in descending order of time (latest first)\n      });\n\n      // After sorting, the first element should be the latest if its date is valid\n      if (matchingLogicalIdServers.length > 0) {\n        const latestServer = matchingLogicalIdServers[0];\n        if (\n          latestServer &&\n          latestServer.releaseDate &&\n          typeof latestServer.releaseDate === 'string' &&\n          !isNaN(new Date(latestServer.releaseDate).getTime())\n        ) {\n          return latestServer;\n        }\n      }\n      this.#logger?.warn(\n        `Could not determine the latest server for logical ID '${serverId}' due to invalid or missing release dates, or no servers left after filtering.`,\n      );\n      return undefined;\n    }\n  }\n\n  public async addTopicListener(topic: string, listener: (event: any) => Promise<void>) {\n    await this.#pubsub.subscribe(topic, listener);\n  }\n\n  public async removeTopicListener(topic: string, listener: (event: any) => Promise<void>) {\n    await this.#pubsub.unsubscribe(topic, listener);\n  }\n\n  public async startEventEngine() {\n    for (const topic in this.#events) {\n      if (!this.#events[topic]) {\n        continue;\n      }\n\n      const listeners = Array.isArray(this.#events[topic]) ? this.#events[topic] : [this.#events[topic]];\n      for (const listener of listeners) {\n        await this.#pubsub.subscribe(topic, listener);\n      }\n    }\n  }\n\n  public async stopEventEngine() {\n    for (const topic in this.#events) {\n      if (!this.#events[topic]) {\n        continue;\n      }\n\n      const listeners = Array.isArray(this.#events[topic]) ? this.#events[topic] : [this.#events[topic]];\n      for (const listener of listeners) {\n        await this.#pubsub.unsubscribe(topic, listener);\n      }\n    }\n\n    await this.#pubsub.flush();\n  }\n\n  /**\n   * Gracefully shuts down the Mastra instance and cleans up all resources.\n   *\n   * This method performs a clean shutdown of all Mastra components, including:\n   * - AI tracing registry and all tracing instances\n   * - Event engine and pub/sub system\n   * - All registered components and their resources\n   *\n   * It's important to call this method when your application is shutting down\n   * to ensure proper cleanup and prevent resource leaks.\n   *\n   * @example\n   * ```typescript\n   * const mastra = new Mastra({\n   *   agents: { myAgent },\n   *   workflows: { myWorkflow }\n   * });\n   *\n   * // Graceful shutdown on SIGINT\n   * process.on('SIGINT', async () => {\n   *   await mastra.shutdown();\n   *   process.exit(0);\n   * });\n   * ```\n   */\n  async shutdown(): Promise<void> {\n    // Shutdown AI tracing registry and all instances\n    await shutdownAITracingRegistry();\n    await this.stopEventEngine();\n\n    this.#logger?.info('Mastra shutdown completed');\n  }\n\n  // This method is only used internally for server hnadlers that require temporary persistence\n  public get serverCache() {\n    return this.#serverCache;\n  }\n}\n","import EventEmitter from 'events';\nimport { PubSub } from './pubsub';\nimport type { Event } from './types';\n\nexport class EventEmitterPubSub extends PubSub {\n  private emitter: EventEmitter;\n\n  constructor() {\n    super();\n    this.emitter = new EventEmitter();\n  }\n\n  async publish(topic: string, event: Omit<Event, 'id' | 'createdAt'>): Promise<void> {\n    const id = crypto.randomUUID();\n    const createdAt = new Date();\n    this.emitter.emit(topic, {\n      ...event,\n      id,\n      createdAt,\n    });\n  }\n\n  async subscribe(topic: string, cb: (event: Event, ack?: () => Promise<void>) => void): Promise<void> {\n    this.emitter.on(topic, cb);\n  }\n\n  async unsubscribe(topic: string, cb: (event: Event, ack?: () => Promise<void>) => void): Promise<void> {\n    this.emitter.off(topic, cb);\n  }\n\n  async flush(): Promise<void> {\n    // no-op\n  }\n}\n","import pMap from 'p-map';\nimport type { Mastra } from '..';\nimport { ErrorCategory, ErrorDomain, MastraError } from '../error';\nimport { saveScorePayloadSchema } from '../scores';\nimport type { ScoringHookInput } from '../scores/types';\nimport type { MastraStorage } from '../storage';\n\nexport function createOnScorerHook(mastra: Mastra) {\n  return async (hookData: ScoringHookInput) => {\n    const storage = mastra.getStorage();\n\n    if (!storage) {\n      mastra.getLogger()?.warn('Storage not found, skipping score validation and saving');\n      return;\n    }\n\n    const entityId = hookData.entity.id;\n    const entityType = hookData.entityType;\n    const scorer = hookData.scorer;\n    try {\n      const scorerToUse = await findScorer(mastra, entityId, entityType, scorer.name);\n\n      if (!scorerToUse) {\n        throw new MastraError({\n          id: 'MASTRA_SCORER_NOT_FOUND',\n          domain: ErrorDomain.MASTRA,\n          category: ErrorCategory.USER,\n          text: `Scorer with ID ${hookData.scorer.id} not found`,\n        });\n      }\n\n      let input = hookData.input;\n      let output = hookData.output;\n\n      const { structuredOutput, ...rest } = hookData;\n\n      const runResult = await scorerToUse.scorer.run({\n        ...rest,\n        input,\n        output,\n      });\n\n      let spanId;\n      let traceId;\n      const currentSpan = hookData.tracingContext?.currentSpan;\n      if (currentSpan && currentSpan.isValid) {\n        spanId = currentSpan.id;\n        traceId = currentSpan.traceId;\n      }\n\n      const payload = {\n        ...rest,\n        ...runResult,\n        entityId,\n        scorerId: hookData.scorer.name,\n        spanId,\n        traceId,\n        metadata: {\n          structuredOutput: !!structuredOutput,\n        },\n      };\n      await validateAndSaveScore(storage, payload);\n\n      if (currentSpan && spanId && traceId) {\n        await pMap(\n          currentSpan.aiTracing.getExporters(),\n          async exporter => {\n            if (exporter.addScoreToTrace) {\n              await exporter.addScoreToTrace({\n                traceId: traceId,\n                spanId: spanId,\n                score: runResult.score,\n                reason: runResult.reason,\n                scorerName: scorerToUse.scorer.name,\n                metadata: {\n                  ...(currentSpan.metadata ?? {}),\n                },\n              });\n            }\n          },\n          { concurrency: 3 },\n        );\n      }\n    } catch (error) {\n      const mastraError = new MastraError(\n        {\n          id: 'MASTRA_SCORER_FAILED_TO_RUN_HOOK',\n          domain: ErrorDomain.SCORER,\n          category: ErrorCategory.USER,\n          details: {\n            scorerId: scorer.id,\n            entityId,\n            entityType,\n          },\n        },\n        error,\n      );\n\n      mastra.getLogger()?.trackException(mastraError);\n      mastra.getLogger()?.error(mastraError.toString());\n    }\n  };\n}\n\nexport async function validateAndSaveScore(storage: MastraStorage, payload: unknown) {\n  const payloadToSave = saveScorePayloadSchema.parse(payload);\n  await storage?.saveScore(payloadToSave);\n}\n\nasync function findScorer(mastra: Mastra, entityId: string, entityType: string, scorerName: string) {\n  let scorerToUse;\n  if (entityType === 'AGENT') {\n    const scorers = await mastra.getAgentById(entityId).getScorers();\n    for (const [_, scorer] of Object.entries(scorers)) {\n      if (scorer.scorer.name === scorerName) {\n        scorerToUse = scorer;\n        break;\n      }\n    }\n  } else if (entityType === 'WORKFLOW') {\n    const scorers = await mastra.getWorkflowById(entityId).getScorers();\n    for (const [_, scorer] of Object.entries(scorers)) {\n      if (scorer.scorer.name === scorerName) {\n        scorerToUse = scorer;\n        break;\n      }\n    }\n  }\n\n  // Fallback to mastra-registered scorer\n  if (!scorerToUse) {\n    const mastraRegisteredScorer = mastra.getScorerByName(scorerName);\n    scorerToUse = mastraRegisteredScorer ? { scorer: mastraRegisteredScorer } : undefined;\n  }\n\n  return scorerToUse;\n}\n"]}