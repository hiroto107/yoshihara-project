{"version":3,"sources":["../src/bundler/index.ts"],"names":[],"mappings":";;;;AAkBO,IAAe,aAAA,GAAf,cAAqC,UAAA,CAA+B;AAAA,EACzE,WAAA,CAAY,EAAE,IAAA,EAAM,SAAA,GAAY,WAAU,EAAyD;AACjG,IAAA,KAAA,CAAM,EAAE,SAAA,EAAW,IAAA,EAAM,CAAA;AAAA,EAC3B;AAAA,EAEA,MAAM,WAAA,GAA4C;AAChD,IAAA,MAAM,OAAA,uBAAc,GAAA,EAAI;AAExB,IAAA,KAAA,MAAW,IAAA,IAAQ,MAAM,IAAA,CAAK,WAAA,EAAY,EAAG;AAC3C,MAAA,MAAM,OAAA,GAAU,MAAM,QAAA,CAAS,IAAA,EAAM,OAAO,CAAA;AAC5C,MAAA,MAAM,MAAA,GAAS,MAAM,OAAO,CAAA;AAE5B,MAAA,MAAA,CAAO,OAAA,CAAQ,MAAM,CAAA,CAAE,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAA,KAAM;AAC/C,QAAA,OAAA,CAAQ,GAAA,CAAI,KAAK,KAAK,CAAA;AAAA,MACxB,CAAC,CAAA;AAAA,IACH;AAEA,IAAA,OAAO,OAAA;AAAA,EACT;AAYF","file":"chunk-ZMELUU72.js","sourcesContent":["import { readFile } from 'fs/promises';\nimport { parse } from 'dotenv';\n\nimport { MastraBase } from '../base';\n\nexport interface IBundler {\n  loadEnvVars(): Promise<Map<string, string>>;\n  getEnvFiles(): Promise<string[]>;\n  bundle(\n    entryFile: string,\n    outputDirectory: string,\n    options: { toolsPaths: (string | string[])[]; projectRoot: string },\n  ): Promise<void>;\n  prepare(outputDirectory: string): Promise<void>;\n  writePackageJson(outputDirectory: string, dependencies: Map<string, string>): Promise<void>;\n  lint(entryFile: string, outputDirectory: string, toolsPaths: (string | string[])[]): Promise<void>;\n}\n\nexport abstract class MastraBundler extends MastraBase implements IBundler {\n  constructor({ name, component = 'BUNDLER' }: { name: string; component?: 'BUNDLER' | 'DEPLOYER' }) {\n    super({ component, name });\n  }\n\n  async loadEnvVars(): Promise<Map<string, string>> {\n    const envVars = new Map();\n\n    for (const file of await this.getEnvFiles()) {\n      const content = await readFile(file, 'utf-8');\n      const config = parse(content);\n\n      Object.entries(config).forEach(([key, value]) => {\n        envVars.set(key, value);\n      });\n    }\n\n    return envVars;\n  }\n\n  abstract prepare(outputDirectory: string): Promise<void>;\n  abstract writePackageJson(outputDirectory: string, dependencies: Map<string, string>): Promise<void>;\n  abstract writeInstrumentationFile(outputDirectory: string): Promise<void>;\n  abstract getEnvFiles(): Promise<string[]>;\n  abstract bundle(\n    entryFile: string,\n    outputDirectory: string,\n    { toolsPaths, projectRoot }: { toolsPaths: (string | string[])[]; projectRoot: string },\n  ): Promise<void>;\n  abstract lint(entryFile: string, outputDirectory: string, toolsPaths: (string | string[])[]): Promise<void>;\n}\n"]}