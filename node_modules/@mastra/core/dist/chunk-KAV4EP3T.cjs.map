{"version":3,"sources":["../src/scores/types.ts"],"names":["z","AISpanType"],"mappings":"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","file":"chunk-KAV4EP3T.cjs","sourcesContent":["import type { CoreMessage, CoreSystemMessage } from 'ai';\nimport { z } from 'zod';\nimport type { UIMessageWithMetadata } from '../agent';\nimport { AISpanType } from '../ai-tracing';\nimport type { TracingContext } from '../ai-tracing';\n\nexport type ScoringSamplingConfig = { type: 'none' } | { type: 'ratio'; rate: number };\n\nexport type ScoringSource = 'LIVE' | 'TEST';\n\nexport type ScoringEntityType = 'AGENT' | 'WORKFLOW' | AISpanType;\n\nexport type ScoringPrompts = {\n  description: string;\n  prompt: string;\n};\n\nexport type ScoringInput = {\n  runId?: string;\n  input?: any;\n  output: any;\n  additionalContext?: Record<string, any>;\n  runtimeContext?: Record<string, any>;\n  tracingContext?: TracingContext;\n};\n\nexport type ScoringHookInput = {\n  runId?: string;\n  scorer: Record<string, any>;\n  input: any;\n  output: any;\n  metadata?: Record<string, any>;\n  additionalContext?: Record<string, any>;\n  source: ScoringSource;\n  entity: Record<string, any>;\n  entityType: ScoringEntityType;\n  runtimeContext?: Record<string, any>;\n  tracingContext?: TracingContext;\n  structuredOutput?: boolean;\n  traceId?: string;\n  spanId?: string;\n  resourceId?: string;\n  threadId?: string;\n};\n\nexport const scoringExtractStepResultSchema = z.record(z.string(), z.any()).optional();\n\nexport type ScoringExtractStepResult = z.infer<typeof scoringExtractStepResultSchema>;\n\nexport const scoringValueSchema = z.number();\n\nexport const scoreResultSchema = z.object({\n  result: z.record(z.string(), z.any()).optional(),\n  score: scoringValueSchema,\n  prompt: z.string().optional(),\n});\n\nexport type ScoringAnalyzeStepResult = z.infer<typeof scoreResultSchema>;\n\nexport type ScoringInputWithExtractStepResult<TExtract = any> = ScoringInput & {\n  runId: string;\n  extractStepResult?: TExtract;\n  extractPrompt?: string;\n};\n\nexport type ScoringInputWithExtractStepResultAndAnalyzeStepResult<\n  TExtract = any,\n  TScore = any,\n> = ScoringInputWithExtractStepResult<TExtract> & {\n  score: number;\n  analyzeStepResult?: TScore;\n  analyzePrompt?: string;\n};\n\nexport type ScoringInputWithExtractStepResultAndScoreAndReason =\n  ScoringInputWithExtractStepResultAndAnalyzeStepResult & {\n    reason?: string;\n    reasonPrompt?: string;\n  };\n\nexport type ScoreRowData = ScoringInputWithExtractStepResultAndScoreAndReason &\n  ScoringHookInput & {\n    id: string;\n    entityId: string;\n    scorerId: string;\n    createdAt: Date;\n    updatedAt: Date;\n    preprocessStepResult?: Record<string, any>;\n    preprocessPrompt?: string;\n    generateScorePrompt?: string;\n    generateReasonPrompt?: string;\n  };\n\nexport type ExtractionStepFn = (input: ScoringInput) => Promise<Record<string, any>>;\n\nexport type AnalyzeStepFn = (input: ScoringInputWithExtractStepResult) => Promise<ScoringAnalyzeStepResult>;\n\nexport type ReasonStepFn = (\n  input: ScoringInputWithExtractStepResultAndAnalyzeStepResult,\n) => Promise<{ reason: string; reasonPrompt?: string } | null>;\n\nexport type ScorerOptions = {\n  name: string;\n  description: string;\n  extract?: ExtractionStepFn;\n  analyze: AnalyzeStepFn;\n  reason?: ReasonStepFn;\n  metadata?: Record<string, any>;\n  isLLMScorer?: boolean;\n};\n\nexport type ScorerRunInputForAgent = {\n  inputMessages: UIMessageWithMetadata[];\n  rememberedMessages: UIMessageWithMetadata[];\n  systemMessages: CoreMessage[];\n  taggedSystemMessages: Record<string, CoreSystemMessage[]>;\n};\n\nexport type ScorerRunOutputForAgent = UIMessageWithMetadata[];\n\nexport const saveScorePayloadSchema = z.object({\n  runId: z.string(),\n  scorerId: z.string(),\n  entityId: z.string(),\n  score: z.number(),\n  input: z.any().optional(),\n  output: z.any(),\n  source: z.enum(['LIVE', 'TEST']),\n  entityType: z.enum(['AGENT', 'WORKFLOW', ...Object.values(AISpanType)]).optional(),\n  scorer: z.record(z.string(), z.any()),\n\n  traceId: z.string().optional(),\n  spanId: z.string().optional(),\n  preprocessStepResult: z.record(z.string(), z.any()).optional(),\n  extractStepResult: z.record(z.string(), z.any()).optional(),\n  analyzeStepResult: z.record(z.string(), z.any()).optional(),\n  reason: z.string().optional(),\n  metadata: z.record(z.string(), z.any()).optional(),\n  preprocessPrompt: z.string().optional(),\n  extractPrompt: z.string().optional(),\n  generateScorePrompt: z.string().optional(),\n  generateReasonPrompt: z.string().optional(),\n  analyzePrompt: z.string().optional(),\n  additionalContext: z.record(z.string(), z.any()).optional(),\n  runtimeContext: z.record(z.string(), z.any()).optional(),\n  entity: z.record(z.string(), z.any()).optional(),\n  resourceId: z.string().optional(),\n  threadId: z.string().optional(),\n});\n\nexport type ValidatedSaveScorePayload = z.infer<typeof saveScorePayloadSchema>;\n"]}