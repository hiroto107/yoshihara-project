{"version":3,"sources":["../src/agent/index.warning.ts","../src/base.warning.ts","../src/deployer/index.warning.ts","../src/storage/base.warning.ts","../src/integration/integration.warning.ts","../src/integration/openapi-toolset.warning.ts","../src/memory/index.warning.ts","../src/tools/index.warning.ts","../src/tts/index.warning.ts","../src/vector/index.warning.ts","../src/workflows/workflow.warning.ts"],"names":["Agent","MastraBase","MastraDeployer","MastraStorage","Integration","OpenAPIToolset","MastraMemory","Tool","MastraTTS","MastraVector","Workflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAWO,IAAMA,MAAAA,GAAN,cAIG,KAAA,CAAsC;AAAA,EAC9C,YAAY,MAAA,EAAiD;AAC3D,IAAA,KAAA,CAAM,MAAM,CAAA;AAEZ,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,yEAAyE,CAAA;AAAA,EAC5F;AACF;;;AClBO,IAAMC,WAAAA,GAAN,cAAyB,UAAA,CAAe;AAAA,EAC7C,YAAY,IAAA,EAAuD;AACjE,IAAA,KAAA,CAAM,IAAI,CAAA;AAEV,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,+EAA+E,CAAA;AAAA,EAClG;AACF;;;ACPO,IAAeC,eAAAA,GAAf,cAAsC,cAAA,CAAmB;AAAA,EAC9D,YAAY,IAAA,EAAoE;AAC9E,IAAA,KAAA,CAAM,IAAI,CAAA;AAEV,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,uFAAuF,CAAA;AAAA,EAC1G;AACF;;;ACJO,IAAeC,cAAAA,GAAf,cAAqC,aAAA,CAAkB;AAAA,EAC5D,WAAA,CAAY,EAAE,IAAA,EAAK,EAAqB;AACtC,IAAA,KAAA,CAAM;AAAA,MACJ;AAAA,KACD,CAAA;AAED,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,qFAAqF,CAAA;AAAA,EACxG;AACF;;;ACVO,IAAMC,YAAAA,GAAN,cAAgE,WAAA,CAAwC;AAAA,EAC7G,WAAA,GAAc;AACZ,IAAA,KAAA,EAAM;AAEN,IAAA,OAAA,CAAQ,KAAK,uFAAuF,CAAA;AAAA,EACtG;AACF;;;ACNO,IAAeC,eAAAA,GAAf,cAAsC,cAAA,CAAmB;AAAA,EAC9D,WAAA,GAAc;AACZ,IAAA,KAAA,EAAM;AAEN,IAAA,OAAA,CAAQ,KAAK,0FAA0F,CAAA;AAAA,EACzG;AACF;;;ACJO,IAAeC,aAAAA,GAAf,cAAoC,YAAA,CAAW;AAAA,EACpD,YAAY,IAAA,EAAY;AAEtB,IAAA,KAAA,CAAM,EAAE,IAAA,EAAM,CAAA,iBAAA,CAAA,EAAqB,CAAA;AAEnC,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,mFAAmF,CAAA;AAAA,EACtG;AACF;;;ACJO,IAAMC,KAAAA,GAAN,cAUG,IAAA,CAAyE;AAAA,EACjF,YAAY,IAAA,EAAkF;AAC5F,IAAA,KAAA,CAAM,IAAI,CAAA;AAEV,IAAA,OAAA,CAAQ,KAAK,0EAA0E,CAAA;AAAA,EACzF;AACF;;;AClBO,IAAeC,UAAAA,GAAf,cAAiC,SAAA,CAAc;AAAA,EACpD,YAAY,IAAA,EAAiB;AAC3B,IAAA,KAAA,CAAM,IAAI,CAAA;AAEV,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,6EAA6E,CAAA;AAAA,EAChG;AACF;;;ACPO,IAAeC,aAAAA,GAAf,cAAoC,YAAA,CAAiB;AAAA,EAC1D,WAAA,GAAc;AACZ,IAAA,KAAA,EAAM;AAEN,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,mFAAmF,CAAA;AAAA,EACtG;AACF;;;ACFO,IAAMC,SAAAA,GAAN,cAgBG,QAAA,CAAqF;AAAA,EAC7F,YAAY,IAAA,EAAoE;AAC9E,IAAA,KAAA,CAAM,IAAI,CAAA;AAEV,IAAA,IAAA,CAAK,MAAA,CAAO,KAAK,kFAAkF,CAAA;AAAA,EACrG;AACF","file":"index.js","sourcesContent":["import type { Metric } from '../eval';\nimport type { ToolAction } from '../tools';\n\nimport type { AgentConfig } from './types';\nimport { Agent as BaseAgent } from './index';\n\n/**\n * @deprecated Please import Agent from \"@mastra/core/agent\" instead of \"@mastra/core\"\n *\n * This import path has restricted types and may cause type errors with provider-defined tools.\n */\nexport class Agent<\n  TAgentId extends string = string,\n  TTools extends Record<string, ToolAction<any, any, any>> = Record<string, ToolAction<any, any, any>>,\n  TMetrics extends Record<string, Metric> = Record<string, Metric>,\n> extends BaseAgent<TAgentId, TTools, TMetrics> {\n  constructor(config: AgentConfig<TAgentId, TTools, TMetrics>) {\n    super(config);\n\n    this.logger.warn('Please import Agent from \"@mastra/core/agent\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraBase as MastraBaseBase } from './base';\nimport type { RegisteredLogger } from './logger';\n\nexport class MastraBase extends MastraBaseBase {\n  constructor(args: { component?: RegisteredLogger; name?: string }) {\n    super(args);\n\n    this.logger.warn('Please import \"MastraBase\" from \"@mastra/core/base\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraDeployer as BaseMastraDeployer } from './index';\n\nexport abstract class MastraDeployer extends BaseMastraDeployer {\n  constructor(args: { name: string; mastraDir: string; outputDirectory: string }) {\n    super(args);\n\n    this.logger.warn('Please import \"MastraDeployer\" from \"@mastra/core/deployer\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraStorage as BaseMastraStorage } from './base';\n\nexport * from './base';\n\nexport abstract class MastraStorage extends BaseMastraStorage {\n  constructor({ name }: { name: string }) {\n    super({\n      name,\n    });\n\n    this.logger.warn('Please import \"MastraStorage\" from \"@mastra/core/storage\" instead of \"@mastra/core\"');\n  }\n}\n","import { Integration as BaseIntegration } from './integration';\n\nexport class Integration<ToolsParams = void, ApiClient = void> extends BaseIntegration<ToolsParams, ApiClient> {\n  constructor() {\n    super();\n\n    console.warn('Please import \"Integration\" from \"@mastra/core/integration\" instead of \"@mastra/core\"');\n  }\n}\n","import { OpenAPIToolset as BaseOpenAPIToolset } from './openapi-toolset';\n\nexport abstract class OpenAPIToolset extends BaseOpenAPIToolset {\n  constructor() {\n    super();\n\n    console.warn('Please import \"OpenAPIToolset\" from \"@mastra/core/integration\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraMemory as BaseMemory } from './memory';\n\nexport * from './index';\n\nexport abstract class MastraMemory extends BaseMemory {\n  constructor(_arg?: any) {\n    // @ts-ignore\n    super({ name: `Deprecated memory` });\n\n    this.logger.warn('Please import \"MastraMemory\" from \"@mastra/core/memory\" instead of \"@mastra/core\"');\n  }\n}\n","import type { z } from 'zod';\n\nimport { Tool as BaseTool } from './tool';\nimport type { ToolAction, ToolExecutionContext } from './types';\n\nexport * from './tool';\n\nexport class Tool<\n  TSchemaIn extends z.ZodSchema | undefined = undefined,\n  TSchemaOut extends z.ZodSchema | undefined = undefined,\n  TSuspendSchema extends z.ZodSchema = any,\n  TResumeSchema extends z.ZodSchema = any,\n  TContext extends ToolExecutionContext<TSchemaIn, TSuspendSchema, TResumeSchema> = ToolExecutionContext<\n    TSchemaIn,\n    TSuspendSchema,\n    TResumeSchema\n  >,\n> extends BaseTool<TSchemaIn, TSchemaOut, TSuspendSchema, TResumeSchema, TContext> {\n  constructor(opts: ToolAction<TSchemaIn, TSchemaOut, TSuspendSchema, TResumeSchema, TContext>) {\n    super(opts);\n\n    console.warn('Please import \"Tool\" from \"@mastra/core/tools\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraTTS as BaseMastraTTS } from './index';\nimport type { TTSConfig } from './index';\n\nexport * from './index';\n\nexport abstract class MastraTTS extends BaseMastraTTS {\n  constructor(args: TTSConfig) {\n    super(args);\n\n    this.logger.warn('Please import \"MastraTTS\" from \"@mastra/core/tts\" instead of \"@mastra/core\"');\n  }\n}\n","import { MastraVector as BaseMastraVector } from './vector';\n\nexport * from './index';\n\nexport abstract class MastraVector extends BaseMastraVector {\n  constructor() {\n    super();\n\n    this.logger.warn('Please import \"MastraVector\" from \"@mastra/core/vector\" instead of \"@mastra/core\"');\n  }\n}\n","import type { z } from 'zod';\n\nimport type { Step } from './step';\nimport type { DefaultEngineType, WorkflowConfig } from './types';\nimport { Workflow as BaseWorkflow } from './workflow';\n\nexport * from './index';\n\nexport class Workflow<\n  TEngineType = DefaultEngineType,\n  TSteps extends Step<string, any, any, any, any, any, TEngineType>[] = Step<\n    string,\n    any,\n    any,\n    any,\n    any,\n    any,\n    TEngineType\n  >[],\n  TWorkflowId extends string = string,\n  TState extends z.ZodObject<any> = z.ZodObject<any>,\n  TInput extends z.ZodType<any> = z.ZodType<any>,\n  TOutput extends z.ZodType<any> = z.ZodType<any>,\n  TPrevSchema extends z.ZodType<any> = TInput,\n> extends BaseWorkflow<TEngineType, TSteps, TWorkflowId, TState, TInput, TOutput, TPrevSchema> {\n  constructor(args: WorkflowConfig<TWorkflowId, TState, TInput, TOutput, TSteps>) {\n    super(args);\n\n    this.logger.warn('Please import \"Workflow\" from \"@mastra/core/workflows\" instead of \"@mastra/core\"');\n  }\n}\n"]}