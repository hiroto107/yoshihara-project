import type { SystemMessage } from '@mastra/core';
import type { Workflow, WorkflowInfo } from '@mastra/core/workflows';
export declare function getWorkflowInfo(workflow: Workflow): WorkflowInfo;
/**
 * Workflow Registry for temporarily registering additional workflows
 * that are not part of the user's Mastra instance (e.g., internal template workflows)
 */
export declare class WorkflowRegistry {
    private static additionalWorkflows;
    /**
     * Register a workflow temporarily
     */
    static registerTemporaryWorkflow(id: string, workflow: Workflow): void;
    /**
     * Register all workflows from map
     */
    static registerTemporaryWorkflows(workflows: Record<string, Workflow>, mastra?: any): void;
    /**
     * Get a workflow by ID from the registry (returns undefined if not found)
     */
    static getWorkflow(workflowId: string): Workflow | undefined;
    /**
     * Get all workflows from the registry
     */
    static getAllWorkflows(): Record<string, Workflow>;
    /**
     * Clean up a temporary workflow
     */
    static cleanupTemporaryWorkflow(workflowId: string): void;
    /**
     * Clean up all registered workflows
     */
    static cleanup(): void;
    /**
     * Check if a workflow ID is a valid agent-builder workflow
     */
    static isAgentBuilderWorkflow(workflowId: string): boolean;
    /**
     * Get all registered temporary workflow IDs (for debugging)
     */
    static getRegisteredWorkflowIds(): string[];
}
export declare function convertInstructionsToString(message: SystemMessage): string;
//# sourceMappingURL=utils.d.ts.map