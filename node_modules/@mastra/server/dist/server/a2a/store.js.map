{"version":3,"sources":["../../../src/server/a2a/store.ts"],"names":[],"mappings":";AAEO,IAAM,oBAAN,MAAwB;AAAA,EACrB,KAAA,uBAA+B,GAAA,EAAI;AAAA,EACpC,mBAAA,uBAA0B,GAAA,EAAY;AAAA,EAE7C,MAAM,IAAA,CAAK,EAAE,OAAA,EAAS,QAAO,EAA8D;AACzF,IAAA,MAAM,KAAA,GAAQ,KAAK,KAAA,CAAM,GAAA,CAAI,GAAG,OAAO,CAAA,CAAA,EAAI,MAAM,CAAA,CAAE,CAAA;AAEnD,IAAA,IAAI,CAAC,KAAA,EAAO;AACV,MAAA,OAAO,IAAA;AAAA,IACT;AAGA,IAAA,OAAO,EAAE,GAAG,KAAA,EAAM;AAAA,EACpB;AAAA,EAEA,MAAM,IAAA,CAAK,EAAE,OAAA,EAAS,MAAK,EAAmD;AAE5E,IAAA,MAAM,GAAA,GAAM,CAAA,EAAG,OAAO,CAAA,CAAA,EAAI,KAAK,EAAE,CAAA,CAAA;AACjC,IAAA,IAAI,CAAC,KAAK,EAAA,EAAI;AACZ,MAAA,MAAM,IAAI,MAAM,qBAAqB,CAAA;AAAA,IACvC;AACA,IAAA,IAAA,CAAK,MAAM,GAAA,CAAI,GAAA,EAAK,EAAE,GAAG,MAAM,CAAA;AAAA,EACjC;AACF","file":"store.js","sourcesContent":["import type { Task } from '@mastra/core/a2a';\n\nexport class InMemoryTaskStore {\n  private store: Map<string, Task> = new Map();\n  public activeCancellations = new Set<string>();\n\n  async load({ agentId, taskId }: { agentId: string; taskId: string }): Promise<Task | null> {\n    const entry = this.store.get(`${agentId}-${taskId}`);\n\n    if (!entry) {\n      return null;\n    }\n\n    // Return copies to prevent external mutation\n    return { ...entry };\n  }\n\n  async save({ agentId, data }: { agentId: string; data: Task }): Promise<void> {\n    // Store copies to prevent internal mutation if caller reuses objects\n    const key = `${agentId}-${data.id}`;\n    if (!data.id) {\n      throw new Error('Task ID is required');\n    }\n    this.store.set(key, { ...data });\n  }\n}\n"]}