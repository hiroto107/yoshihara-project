import type { AITracesPaginatedArg, StoragePagination } from '@mastra/core';
import type { Context } from '../types.js';
interface ObservabilityContext extends Context {
    traceId?: string;
    body?: AITracesPaginatedArg;
}
interface ScoreTracesContext extends Context {
    body?: {
        scorerName: string;
        targets: Array<{
            traceId: string;
            spanId?: string;
        }>;
    };
}
/**
 * Get a complete AI trace by trace ID
 * Returns all spans in the trace with their parent-child relationships
 */
export declare function getAITraceHandler({ mastra, traceId }: ObservabilityContext & {
    traceId: string;
}): Promise<import("@mastra/core").AITraceRecord>;
/**
 * Get paginated AI traces with filtering and pagination
 * Returns only root spans (parent spans) for pagination, not child spans
 */
export declare function getAITracesPaginatedHandler({ mastra, body }: ObservabilityContext): Promise<{
    pagination: import("@mastra/core").PaginationInfo;
    spans: import("@mastra/core").AISpanRecord[];
}>;
/**
 * Score traces using a specified scorer
 * Fire-and-forget approach - returns immediately while scoring runs in background
 */
export declare function scoreTracesHandler({ mastra, body }: ScoreTracesContext): Promise<{
    status: string;
    message: string;
    traceCount: number;
}>;
export declare function getScoresBySpan({ mastra, traceId, spanId, pagination, }: Context & {
    traceId: string;
    spanId: string;
    pagination: StoragePagination;
}): Promise<{
    pagination: import("@mastra/core").PaginationInfo;
    scores: import("@mastra/core/scores").ScoreRowData[];
}>;
export {};
//# sourceMappingURL=observability.d.ts.map