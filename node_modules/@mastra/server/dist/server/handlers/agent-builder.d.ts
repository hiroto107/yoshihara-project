import type { WorkflowInfo } from '@mastra/core/workflows';
import type { Context } from '../types.js';
import * as workflows from './workflows.js';
interface AgentBuilderContext extends Context {
    actionId?: string;
}
export declare const getAgentBuilderActionsHandler: (builderArgs: AgentBuilderContext) => Promise<Record<string, WorkflowInfo>>;
export declare const getAgentBuilderActionByIdHandler: (builderArgs: workflows.WorkflowContext & AgentBuilderContext) => Promise<WorkflowInfo>;
export declare const getAgentBuilderActionRunByIdHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & AgentBuilderContext) => Promise<Promise<import("@mastra/core").WorkflowRun | null>>;
export declare const getAgentBuilderActionRunExecutionResultHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & AgentBuilderContext) => Promise<{
    status: import("@mastra/core").WorkflowRunStatus;
    steps: Record<string, {
        status: import("@mastra/core").WorkflowRunStatus;
        output?: Record<string, any>;
        payload?: Record<string, any>;
        resumePayload?: Record<string, any>;
        error?: string | Error;
        startedAt: number;
        endedAt: number;
        suspendedAt?: number;
        resumedAt?: number;
    }>;
    result?: Record<string, any>;
    payload?: Record<string, any>;
    error?: string | Error;
}>;
export declare const createAgentBuilderActionRunHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & AgentBuilderContext) => Promise<{
    runId: string;
}>;
export declare const startAsyncAgentBuilderActionHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & {
    inputData?: unknown;
    runtimeContext?: import("@mastra/core/runtime-context").RuntimeContext;
    tracingOptions?: import("@mastra/core/ai-tracing").TracingOptions;
} & AgentBuilderContext) => Promise<import("@mastra/core").WorkflowResult<any, any, any, any>>;
export declare const startAgentBuilderActionRunHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & {
    inputData?: unknown;
    runtimeContext?: import("@mastra/core/runtime-context").RuntimeContext;
    tracingOptions?: import("@mastra/core/ai-tracing").TracingOptions;
} & AgentBuilderContext) => Promise<{
    message: string;
}>;
export declare const watchAgentBuilderActionHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & {
    eventType?: "watch" | "watch-v2";
} & AgentBuilderContext) => Promise<import("stream/web").ReadableStream<string>>;
export declare const streamAgentBuilderActionHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & {
    inputData?: unknown;
    runtimeContext?: import("@mastra/core/runtime-context").RuntimeContext;
    tracingOptions?: import("@mastra/core/ai-tracing").TracingOptions;
} & AgentBuilderContext) => Promise<{
    stream: import("stream/web").ReadableStream<import("@mastra/core").StreamEvent>;
    getWorkflowState: () => Promise<import("@mastra/core").WorkflowResult<any, any, any, any>>;
}>;
export declare const streamVNextAgentBuilderActionHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & {
    inputData?: unknown;
    runtimeContext?: import("@mastra/core/runtime-context").RuntimeContext;
    closeOnSuspend?: boolean;
    tracingOptions?: import("@mastra/core/ai-tracing").TracingOptions;
} & AgentBuilderContext) => Promise<import("@mastra/core").MastraWorkflowStream<any, any, any, any>>;
export declare const resumeAsyncAgentBuilderActionHandler: (builderArgs: workflows.WorkflowContext & {
    body: {
        step: string | string[];
        resumeData?: unknown;
    };
    runtimeContext?: import("@mastra/core/runtime-context").RuntimeContext;
    tracingOptions?: import("@mastra/core/ai-tracing").TracingOptions;
} & AgentBuilderContext) => Promise<import("@mastra/core").WorkflowResult<any, any, any, any>>;
export declare const resumeAgentBuilderActionHandler: (builderArgs: workflows.WorkflowContext & {
    body: {
        step: string | string[];
        resumeData?: unknown;
    };
    runtimeContext?: import("@mastra/core/runtime-context").RuntimeContext;
    tracingOptions?: import("@mastra/core/ai-tracing").TracingOptions;
} & AgentBuilderContext) => Promise<{
    message: string;
}>;
export declare const getAgentBuilderActionRunsHandler: (builderArgs: workflows.WorkflowContext & {
    fromDate?: Date;
    toDate?: Date;
    limit?: number;
    offset?: number;
    resourceId?: string;
} & AgentBuilderContext) => Promise<import("@mastra/core").WorkflowRuns>;
export declare const cancelAgentBuilderActionRunHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & AgentBuilderContext) => Promise<{
    message: string;
}>;
export declare const sendAgentBuilderActionRunEventHandler: (builderArgs: Pick<workflows.WorkflowContext, "mastra" | "workflowId" | "runId"> & {
    event: string;
    data: unknown;
} & AgentBuilderContext) => Promise<{
    message: string;
}>;
export {};
//# sourceMappingURL=agent-builder.d.ts.map