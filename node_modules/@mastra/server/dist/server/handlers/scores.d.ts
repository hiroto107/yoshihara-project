import type { RuntimeContext } from '@mastra/core/runtime-context';
import type { MastraScorerEntry, ScoreRowData } from '@mastra/core/scores';
import type { StoragePagination } from '@mastra/core/storage';
import type { Context } from '../types.js';
export declare function getScorersHandler({ mastra, runtimeContext }: Context & {
    runtimeContext: RuntimeContext;
}): Promise<{
    [k: string]: MastraScorerEntry & {
        agentIds: string[];
        agentNames: string[];
        workflowIds: string[];
        isRegistered: boolean;
    };
}>;
export declare function getScorerHandler({ mastra, scorerId, runtimeContext, }: Context & {
    scorerId: string;
    runtimeContext: RuntimeContext;
}): Promise<(MastraScorerEntry & {
    agentIds: string[];
    agentNames: string[];
    workflowIds: string[];
    isRegistered: boolean;
}) | null>;
export declare function getScoresByRunIdHandler({ mastra, runId, pagination, }: Context & {
    runId: string;
    pagination: StoragePagination;
}): Promise<{
    pagination: import("@mastra/core").PaginationInfo;
    scores: {
        spanId?: string;
        traceId?: string;
        runId: string;
        input: any;
        output: any;
        additionalContext?: Record<string, any>;
        runtimeContext?: Record<string, any>;
        tracingContext?: import("@mastra/core/ai-tracing").TracingContext;
        extractStepResult?: any;
        extractPrompt?: string;
        score: number;
        analyzeStepResult?: any;
        analyzePrompt?: string;
        reason?: string;
        reasonPrompt?: string;
        scorer: Record<string, any>;
        metadata?: Record<string, any>;
        source: import("@mastra/core/scores").ScoringSource;
        entity: Record<string, any>;
        entityType: import("@mastra/core/scores").ScoringEntityType;
        structuredOutput?: boolean;
        resourceId?: string;
        threadId?: string;
        id: string;
        entityId: string;
        scorerId: string;
        createdAt: Date;
        updatedAt: Date;
        preprocessStepResult?: Record<string, any>;
        preprocessPrompt?: string;
        generateScorePrompt?: string;
        generateReasonPrompt?: string;
    }[];
}>;
export declare function getScoresByScorerIdHandler({ mastra, scorerId, pagination, entityId, entityType, }: Context & {
    scorerId: string;
    pagination: StoragePagination;
    entityId?: string;
    entityType?: string;
}): Promise<{
    pagination: import("@mastra/core").PaginationInfo;
    scores: {
        spanId?: string;
        traceId?: string;
        runId: string;
        input: any;
        output: any;
        additionalContext?: Record<string, any>;
        runtimeContext?: Record<string, any>;
        tracingContext?: import("@mastra/core/ai-tracing").TracingContext;
        extractStepResult?: any;
        extractPrompt?: string;
        score: number;
        analyzeStepResult?: any;
        analyzePrompt?: string;
        reason?: string;
        reasonPrompt?: string;
        scorer: Record<string, any>;
        metadata?: Record<string, any>;
        source: import("@mastra/core/scores").ScoringSource;
        entity: Record<string, any>;
        entityType: import("@mastra/core/scores").ScoringEntityType;
        structuredOutput?: boolean;
        resourceId?: string;
        threadId?: string;
        id: string;
        entityId: string;
        scorerId: string;
        createdAt: Date;
        updatedAt: Date;
        preprocessStepResult?: Record<string, any>;
        preprocessPrompt?: string;
        generateScorePrompt?: string;
        generateReasonPrompt?: string;
    }[];
}>;
export declare function getScoresByEntityIdHandler({ mastra, entityId, entityType, pagination, }: Context & {
    entityId: string;
    entityType: string;
    pagination: StoragePagination;
}): Promise<{
    pagination: import("@mastra/core").PaginationInfo;
    scores: {
        spanId?: string;
        traceId?: string;
        runId: string;
        input: any;
        output: any;
        additionalContext?: Record<string, any>;
        runtimeContext?: Record<string, any>;
        tracingContext?: import("@mastra/core/ai-tracing").TracingContext;
        extractStepResult?: any;
        extractPrompt?: string;
        score: number;
        analyzeStepResult?: any;
        analyzePrompt?: string;
        reason?: string;
        reasonPrompt?: string;
        scorer: Record<string, any>;
        metadata?: Record<string, any>;
        source: import("@mastra/core/scores").ScoringSource;
        entity: Record<string, any>;
        entityType: import("@mastra/core/scores").ScoringEntityType;
        structuredOutput?: boolean;
        resourceId?: string;
        threadId?: string;
        id: string;
        entityId: string;
        scorerId: string;
        createdAt: Date;
        updatedAt: Date;
        preprocessStepResult?: Record<string, any>;
        preprocessPrompt?: string;
        generateScorePrompt?: string;
        generateReasonPrompt?: string;
    }[];
}>;
export declare function saveScoreHandler({ mastra, score }: Context & {
    score: ScoreRowData;
}): Promise<never[] | {
    score: ScoreRowData;
}>;
//# sourceMappingURL=scores.d.ts.map