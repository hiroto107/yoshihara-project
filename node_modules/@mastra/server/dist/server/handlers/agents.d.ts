import type { Agent, AgentModelManagerConfig } from '@mastra/core/agent';
import type { SystemMessage } from '@mastra/core/llm';
import type { InputProcessor, OutputProcessor } from '@mastra/core/processors';
import { RuntimeContext } from '@mastra/core/runtime-context';
import type { StreamTextOnFinishCallback, StreamTextOnStepFinishCallback } from '../../../../core/dist/llm/model/base.types.js';
import type { Context } from '../types.js';
import { handleError } from './error.js';
type GetBody<T extends keyof Agent & {
    [K in keyof Agent]: Agent[K] extends (...args: any) => any ? K : never;
}[keyof Agent]> = {
    messages: Parameters<Agent[T]>[0];
} & Parameters<Agent[T]>[1];
type GetHITLBody<T extends keyof Agent & {
    [K in keyof Agent]: Agent[K] extends (...args: any) => any ? K : never;
}[keyof Agent]> = Parameters<Agent[T]>[0];
export interface SerializedProcessor {
    name: string;
}
export interface SerializedTool {
    id: string;
    description?: string;
    inputSchema?: string;
    outputSchema?: string;
    requireApproval?: boolean;
}
export interface SerializedWorkflow {
    name: string;
    steps?: Record<string, {
        id: string;
        description?: string;
    }>;
}
export interface SerializedAgent {
    name: string;
    instructions?: SystemMessage;
    tools: Record<string, SerializedTool>;
    agents: Record<string, SerializedAgentDefinition>;
    workflows: Record<string, SerializedWorkflow>;
    inputProcessors: SerializedProcessor[];
    outputProcessors: SerializedProcessor[];
    provider?: string;
    modelId?: string;
    modelVersion?: string;
    modelList?: Array<Omit<AgentModelManagerConfig, 'model'> & {
        model: {
            modelId: string;
            provider: string;
            modelVersion: string;
        };
    }>;
    defaultGenerateOptions?: Record<string, unknown>;
    defaultStreamOptions?: Record<string, unknown>;
}
export interface SerializedAgentWithId extends SerializedAgent {
    id: string;
}
export declare function getSerializedAgentTools(tools: Record<string, unknown>): Promise<Record<string, SerializedTool>>;
export declare function getSerializedProcessors(processors: (InputProcessor | OutputProcessor)[]): SerializedProcessor[];
interface SerializedAgentDefinition {
    id: string;
    name: string;
}
export declare function getAgentsHandler({ mastra, runtimeContext, }: Context & {
    runtimeContext: RuntimeContext;
}): Promise<Record<string, SerializedAgent>>;
export declare function getAgentByIdHandler({ mastra, runtimeContext, agentId, isPlayground, }: Context & {
    isPlayground?: boolean;
    runtimeContext: RuntimeContext;
    agentId: string;
}): Promise<SerializedAgent | ReturnType<typeof handleError>>;
export declare function getEvalsByAgentIdHandler({ mastra, runtimeContext, agentId, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
}): Promise<{
    id: string;
    name: any;
    instructions: SystemMessage;
    evals: import("@mastra/core").EvalRow[];
}>;
export declare function getLiveEvalsByAgentIdHandler({ mastra, runtimeContext, agentId, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
}): Promise<{
    id: string;
    name: any;
    instructions: SystemMessage;
    evals: import("@mastra/core").EvalRow[];
}>;
export declare function generateLegacyHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'generateLegacy'> & {
        resourceid?: string;
        runtimeContext?: Record<string, unknown>;
    };
    abortSignal?: AbortSignal;
}): Promise<import("@mastra/core").GenerateTextResult<any, undefined>>;
export declare function generateHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'generate'> & {
        runtimeContext?: Record<string, unknown>;
        format?: 'mastra' | 'aisdk';
    };
    abortSignal?: AbortSignal;
}): Promise<ReturnType<Agent['generate']>>;
export declare function streamGenerateLegacyHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'streamLegacy'> & {
        resourceid?: string;
        runtimeContext?: string;
    };
    abortSignal?: AbortSignal;
}): Promise<Response | undefined>;
export declare function streamGenerateHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'stream'> & {
        runtimeContext?: string;
        format?: 'aisdk' | 'mastra';
    };
    abortSignal?: AbortSignal;
}): ReturnType<Agent['stream']>;
export declare function approveToolCallHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetHITLBody<'approveToolCall'> & {
        runtimeContext?: string;
        format?: 'aisdk' | 'mastra';
    };
    abortSignal?: AbortSignal;
}): ReturnType<Agent['approveToolCall']>;
export declare function declineToolCallHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetHITLBody<'declineToolCall'> & {
        runtimeContext?: string;
        format?: 'aisdk' | 'mastra';
    };
    abortSignal?: AbortSignal;
}): ReturnType<Agent['declineToolCall']>;
export declare function streamNetworkHandler({ mastra, runtimeContext, agentId, body, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'network'> & {
        thread?: string;
        resourceId?: string;
    };
}): ReturnType<Agent['network']>;
export declare function streamUIMessageHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'stream'> & {
        runtimeContext?: string;
        onStepFinish?: StreamTextOnStepFinishCallback<any>;
        onFinish?: StreamTextOnFinishCallback<any>;
        output?: undefined;
    };
    abortSignal?: AbortSignal;
}): Promise<Response | undefined>;
export declare function updateAgentModelHandler({ mastra, agentId, body, }: Context & {
    agentId: string;
    body: {
        modelId: string;
        provider: string;
    };
}): Promise<{
    message: string;
}>;
export declare function reorderAgentModelListHandler({ mastra, agentId, body, }: Context & {
    agentId: string;
    body: {
        reorderedModelIds: Array<string>;
    };
}): Promise<{
    message: string;
}>;
export declare function updateAgentModelInModelListHandler({ mastra, agentId, modelConfigId, body, }: Context & {
    agentId: string;
    modelConfigId: string;
    body: {
        model?: {
            modelId: string;
            provider: string;
        };
        maxRetries?: number;
        enabled?: boolean;
    };
}): Promise<{
    message: string;
}>;
export declare function getProvidersHandler(): Promise<{
    providers: {
        id: string;
        name: string;
        envVar: string | string[];
        connected: boolean;
        docUrl: string | undefined;
        models: string[];
    }[];
}>;
export {};
//# sourceMappingURL=agents.d.ts.map