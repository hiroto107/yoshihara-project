{"version":3,"sources":["../src/server/handlers/agents.ts"],"names":["__export","stringify","zodToJsonSchema","agent","handleError","acc","key","HTTPException","runtimeContext","sanitizeBody","RuntimeContext","validateBody","PROVIDER_REGISTRY"],"mappings":"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","file":"chunk-BZLZFHAT.cjs","sourcesContent":["import type { Agent, AgentModelManagerConfig } from '@mastra/core/agent';\nimport { PROVIDER_REGISTRY } from '@mastra/core/llm';\nimport type { SystemMessage } from '@mastra/core/llm';\nimport type { InputProcessor, OutputProcessor } from '@mastra/core/processors';\nimport { RuntimeContext } from '@mastra/core/runtime-context';\nimport { zodToJsonSchema } from '@mastra/core/utils/zod-to-json';\nimport { stringify } from 'superjson';\n\nimport type {\n  StreamTextOnFinishCallback,\n  StreamTextOnStepFinishCallback,\n} from '../../../../core/dist/llm/model/base.types';\nimport { HTTPException } from '../http-exception';\nimport type { Context } from '../types';\n\nimport { handleError } from './error';\nimport { sanitizeBody, validateBody } from './utils';\n\ntype GetBody<\n  T extends keyof Agent & { [K in keyof Agent]: Agent[K] extends (...args: any) => any ? K : never }[keyof Agent],\n> = {\n  messages: Parameters<Agent[T]>[0];\n} & Parameters<Agent[T]>[1];\n\ntype GetHITLBody<\n  T extends keyof Agent & { [K in keyof Agent]: Agent[K] extends (...args: any) => any ? K : never }[keyof Agent],\n> = Parameters<Agent[T]>[0];\n\nexport interface SerializedProcessor {\n  name: string;\n}\n\nexport interface SerializedTool {\n  id: string;\n  description?: string;\n  inputSchema?: string;\n  outputSchema?: string;\n  requireApproval?: boolean;\n}\n\nexport interface SerializedWorkflow {\n  name: string;\n  steps?: Record<string, { id: string; description?: string }>;\n}\n\nexport interface SerializedAgent {\n  name: string;\n  instructions?: SystemMessage;\n  tools: Record<string, SerializedTool>;\n  agents: Record<string, SerializedAgentDefinition>;\n  workflows: Record<string, SerializedWorkflow>;\n  inputProcessors: SerializedProcessor[];\n  outputProcessors: SerializedProcessor[];\n  provider?: string;\n  modelId?: string;\n  modelVersion?: string;\n  modelList?: Array<\n    Omit<AgentModelManagerConfig, 'model'> & {\n      model: {\n        modelId: string;\n        provider: string;\n        modelVersion: string;\n      };\n    }\n  >;\n  // We can't use the true types here because they are not serializable\n  defaultGenerateOptions?: Record<string, unknown>;\n  defaultStreamOptions?: Record<string, unknown>;\n}\n\nexport interface SerializedAgentWithId extends SerializedAgent {\n  id: string;\n}\n\nexport async function getSerializedAgentTools(tools: Record<string, unknown>): Promise<Record<string, SerializedTool>> {\n  return Object.entries(tools || {}).reduce<Record<string, SerializedTool>>((acc, [key, tool]) => {\n    const _tool = tool as {\n      id?: string;\n      description?: string;\n      inputSchema?: { jsonSchema?: unknown } | unknown;\n      outputSchema?: { jsonSchema?: unknown } | unknown;\n    };\n\n    const toolId = _tool.id ?? `tool-${key}`;\n\n    let inputSchemaForReturn: string | undefined = undefined;\n\n    if (_tool.inputSchema) {\n      if (_tool.inputSchema && typeof _tool.inputSchema === 'object' && 'jsonSchema' in _tool.inputSchema) {\n        inputSchemaForReturn = stringify(_tool.inputSchema.jsonSchema);\n      } else if (_tool.inputSchema) {\n        inputSchemaForReturn = stringify(zodToJsonSchema(_tool.inputSchema as Parameters<typeof zodToJsonSchema>[0]));\n      }\n    }\n\n    let outputSchemaForReturn: string | undefined = undefined;\n\n    if (_tool.outputSchema) {\n      if (_tool.outputSchema && typeof _tool.outputSchema === 'object' && 'jsonSchema' in _tool.outputSchema) {\n        outputSchemaForReturn = stringify(_tool.outputSchema.jsonSchema);\n      } else if (_tool.outputSchema) {\n        outputSchemaForReturn = stringify(zodToJsonSchema(_tool.outputSchema as Parameters<typeof zodToJsonSchema>[0]));\n      }\n    }\n\n    acc[key] = {\n      ..._tool,\n      id: toolId,\n      inputSchema: inputSchemaForReturn,\n      outputSchema: outputSchemaForReturn,\n    };\n    return acc;\n  }, {});\n}\n\nexport function getSerializedProcessors(processors: (InputProcessor | OutputProcessor)[]): SerializedProcessor[] {\n  return processors.map(processor => {\n    // Processors are class instances or objects with a name property\n    // Use the name property if available, otherwise fall back to constructor name\n    return {\n      name: processor.name || processor.constructor.name,\n    };\n  });\n}\n\ninterface SerializedAgentDefinition {\n  id: string;\n  name: string;\n}\n\nasync function getSerializedAgentDefinition({\n  agent,\n  runtimeContext,\n}: {\n  agent: Agent;\n  runtimeContext: RuntimeContext;\n}): Promise<Record<string, SerializedAgentDefinition>> {\n  let serializedAgentAgents: Record<string, SerializedAgentDefinition> = {};\n\n  if ('listAgents' in agent) {\n    const agents = await agent.listAgents({ runtimeContext });\n    serializedAgentAgents = Object.entries(agents || {}).reduce<Record<string, SerializedAgentDefinition>>(\n      (acc, [key, agent]) => {\n        return {\n          ...acc,\n          [key]: { id: agent.id, name: agent.name },\n        };\n      },\n      {},\n    );\n  }\n  return serializedAgentAgents;\n}\n\nasync function formatAgentList({\n  id,\n  mastra,\n  agent,\n  runtimeContext,\n}: {\n  id: string;\n  mastra: Context['mastra'];\n  agent: Agent;\n  runtimeContext: RuntimeContext;\n}): Promise<SerializedAgentWithId> {\n  const instructions = await agent.getInstructions({ runtimeContext });\n  const tools = await agent.getTools({ runtimeContext });\n  const llm = await agent.getLLM({ runtimeContext });\n  const defaultGenerateOptions = await agent.getDefaultGenerateOptions({ runtimeContext });\n  const defaultStreamOptions = await agent.getDefaultStreamOptions({ runtimeContext });\n  const serializedAgentTools = await getSerializedAgentTools(tools);\n\n  let serializedAgentWorkflows: Record<\n    string,\n    { name: string; steps?: Record<string, { id: string; description?: string }> }\n  > = {};\n\n  if ('getWorkflows' in agent) {\n    const logger = mastra.getLogger();\n    try {\n      const workflows = await agent.getWorkflows({ runtimeContext });\n      serializedAgentWorkflows = Object.entries(workflows || {}).reduce<\n        Record<string, { name: string; steps?: Record<string, { id: string; description?: string }> }>\n      >((acc, [key, workflow]) => {\n        return {\n          ...acc,\n          [key]: {\n            name: workflow.name || 'Unnamed workflow',\n          },\n        };\n      }, {});\n    } catch (error) {\n      logger.error('Error getting workflows for agent', { agentName: agent.name, error });\n    }\n  }\n\n  const serializedAgentAgents = await getSerializedAgentDefinition({ agent, runtimeContext });\n\n  // Get and serialize processors\n  const inputProcessors = await agent.getInputProcessors(runtimeContext);\n  const outputProcessors = await agent.getOutputProcessors(runtimeContext);\n  const serializedInputProcessors = getSerializedProcessors(inputProcessors);\n  const serializedOutputProcessors = getSerializedProcessors(outputProcessors);\n\n  const model = llm?.getModel();\n  const models = await agent.getModelList(runtimeContext);\n  const modelList = models?.map(md => ({\n    ...md,\n    model: {\n      modelId: md.model.modelId,\n      provider: md.model.provider,\n      modelVersion: md.model.specificationVersion,\n    },\n  }));\n\n  return {\n    id,\n    name: agent.name,\n    instructions,\n    agents: serializedAgentAgents,\n    tools: serializedAgentTools,\n    workflows: serializedAgentWorkflows,\n    inputProcessors: serializedInputProcessors,\n    outputProcessors: serializedOutputProcessors,\n    provider: llm?.getProvider(),\n    modelId: llm?.getModelId(),\n    modelVersion: model?.specificationVersion,\n    defaultGenerateOptions,\n    defaultStreamOptions,\n    modelList,\n  };\n}\n\n// Agent handlers\nexport async function getAgentsHandler({\n  mastra,\n  runtimeContext,\n}: Context & { runtimeContext: RuntimeContext }): Promise<Record<string, SerializedAgent>> {\n  try {\n    const agents = mastra.getAgents();\n\n    const serializedAgentsMap = await Promise.all(\n      Object.entries(agents).map(async ([id, agent]) => {\n        return formatAgentList({ id, mastra, agent, runtimeContext });\n      }),\n    );\n\n    const serializedAgents = serializedAgentsMap.reduce<\n      Record<string, Omit<(typeof serializedAgentsMap)[number], 'id'>>\n    >((acc, { id, ...rest }) => {\n      acc[id] = rest;\n      return acc;\n    }, {});\n\n    return serializedAgents;\n  } catch (error) {\n    return handleError(error, 'Error getting agents');\n  }\n}\n\nasync function formatAgent({\n  mastra,\n  agent,\n  runtimeContext,\n  isPlayground,\n}: {\n  mastra: Context['mastra'];\n  agent: Agent;\n  runtimeContext: RuntimeContext;\n  isPlayground: boolean;\n}): Promise<SerializedAgent> {\n  const tools = await agent.getTools({ runtimeContext });\n\n  const serializedAgentTools = await getSerializedAgentTools(tools);\n\n  let serializedAgentWorkflows: Record<\n    string,\n    { name: string; steps: Record<string, { id: string; description?: string }> }\n  > = {};\n\n  if ('getWorkflows' in agent) {\n    const logger = mastra.getLogger();\n    try {\n      const workflows = await agent.getWorkflows({ runtimeContext });\n\n      serializedAgentWorkflows = Object.entries(workflows || {}).reduce<\n        Record<string, { name: string; steps: Record<string, { id: string; description?: string }> }>\n      >((acc, [key, workflow]) => {\n        return {\n          ...acc,\n          [key]: {\n            name: workflow.name || 'Unnamed workflow',\n            steps: Object.entries(workflow.steps).reduce<Record<string, { id: string; description?: string }>>(\n              (acc, [key, step]) => {\n                return {\n                  ...acc,\n                  [key]: {\n                    id: step.id,\n                    description: step.description,\n                  },\n                };\n              },\n              {},\n            ),\n          },\n        };\n      }, {});\n    } catch (error) {\n      logger.error('Error getting workflows for agent', { agentName: agent.name, error });\n    }\n  }\n\n  let proxyRuntimeContext = runtimeContext;\n  if (isPlayground) {\n    proxyRuntimeContext = new Proxy(runtimeContext, {\n      get(target, prop) {\n        if (prop === 'get') {\n          return function (key: string) {\n            const value = target.get(key);\n            return value ?? `<${key}>`;\n          };\n        }\n        return Reflect.get(target, prop);\n      },\n    });\n  }\n\n  const instructions = await agent.getInstructions({ runtimeContext: proxyRuntimeContext });\n  const llm = await agent.getLLM({ runtimeContext });\n  const defaultGenerateOptions = await agent.getDefaultGenerateOptions({ runtimeContext: proxyRuntimeContext });\n  const defaultStreamOptions = await agent.getDefaultStreamOptions({ runtimeContext: proxyRuntimeContext });\n\n  const model = llm?.getModel();\n  const models = await agent.getModelList(runtimeContext);\n  const modelList = models?.map(md => ({\n    ...md,\n    model: {\n      modelId: md.model.modelId,\n      provider: md.model.provider,\n      modelVersion: md.model.specificationVersion,\n    },\n  }));\n\n  const serializedAgentAgents = await getSerializedAgentDefinition({ agent, runtimeContext: proxyRuntimeContext });\n\n  // Get and serialize processors\n  const inputProcessors = await agent.getInputProcessors(proxyRuntimeContext);\n  const outputProcessors = await agent.getOutputProcessors(proxyRuntimeContext);\n  const serializedInputProcessors = getSerializedProcessors(inputProcessors);\n  const serializedOutputProcessors = getSerializedProcessors(outputProcessors);\n\n  return {\n    name: agent.name,\n    instructions,\n    tools: serializedAgentTools,\n    agents: serializedAgentAgents,\n    workflows: serializedAgentWorkflows,\n    inputProcessors: serializedInputProcessors,\n    outputProcessors: serializedOutputProcessors,\n    provider: llm?.getProvider(),\n    modelId: llm?.getModelId(),\n    modelVersion: model?.specificationVersion,\n    modelList,\n    defaultGenerateOptions,\n    defaultStreamOptions,\n  };\n}\n\nexport async function getAgentByIdHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  isPlayground = false,\n}: Context & { isPlayground?: boolean; runtimeContext: RuntimeContext; agentId: string }): Promise<\n  SerializedAgent | ReturnType<typeof handleError>\n> {\n  try {\n    const agent = mastra.getAgent(agentId);\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n    return formatAgent({ mastra, agent, runtimeContext, isPlayground });\n  } catch (error) {\n    return handleError(error, 'Error getting agent');\n  }\n}\n\nexport async function getEvalsByAgentIdHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n}: Context & { runtimeContext: RuntimeContext; agentId: string }) {\n  try {\n    const agent = mastra.getAgent(agentId);\n    const evals = (await mastra.getStorage()?.getEvalsByAgentName?.(agent.name, 'test')) || [];\n    const instructions = await agent.getInstructions({ runtimeContext });\n    return {\n      id: agentId,\n      name: agent.name,\n      instructions,\n      evals,\n    };\n  } catch (error) {\n    return handleError(error, 'Error getting test evals');\n  }\n}\n\nexport async function getLiveEvalsByAgentIdHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n}: Context & { runtimeContext: RuntimeContext; agentId: string }) {\n  try {\n    const agent = mastra.getAgent(agentId);\n    const evals = (await mastra.getStorage()?.getEvalsByAgentName?.(agent.name, 'live')) || [];\n    const instructions = await agent.getInstructions({ runtimeContext });\n\n    return {\n      id: agentId,\n      name: agent.name,\n      instructions,\n      evals,\n    };\n  } catch (error) {\n    return handleError(error, 'Error getting live evals');\n  }\n}\n\nexport async function generateLegacyHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'generateLegacy'> & {\n    // @deprecated use resourceId\n    resourceid?: string;\n    runtimeContext?: Record<string, unknown>;\n  };\n  abortSignal?: AbortSignal;\n}) {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, resourceId, resourceid, runtimeContext: agentRuntimeContext, ...rest } = body;\n    // Use resourceId if provided, fall back to resourceid (deprecated)\n    const finalResourceId = resourceId ?? resourceid;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const result = await agent.generateLegacy(messages, {\n      ...rest,\n      abortSignal,\n      // @ts-expect-error TODO fix types\n      resourceId: finalResourceId,\n      runtimeContext: finalRuntimeContext,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error generating from agent');\n  }\n}\n\nexport async function generateHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'generate'> & {\n    runtimeContext?: Record<string, unknown>;\n    format?: 'mastra' | 'aisdk';\n  };\n  abortSignal?: AbortSignal;\n}): Promise<ReturnType<Agent['generate']>> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const result = await agent.generate(messages, {\n      ...rest,\n      runtimeContext: finalRuntimeContext,\n      format: rest.format || 'mastra',\n      abortSignal,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error generating from agent');\n  }\n}\n\nexport async function streamGenerateLegacyHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'streamLegacy'> & {\n    // @deprecated use resourceId\n    resourceid?: string;\n    runtimeContext?: string;\n  };\n  abortSignal?: AbortSignal;\n}): Promise<Response | undefined> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    const { messages, resourceId, resourceid, runtimeContext: agentRuntimeContext, ...rest } = body;\n    // Use resourceId if provided, fall back to resourceid (deprecated)\n    const finalResourceId = resourceId ?? resourceid;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = await agent.streamLegacy(messages, {\n      ...rest,\n      abortSignal,\n      // @ts-expect-error TODO fix types\n      resourceId: finalResourceId,\n      runtimeContext: finalRuntimeContext,\n    });\n\n    const streamResponse = rest.output\n      ? streamResult.toTextStreamResponse({\n          headers: {\n            'Transfer-Encoding': 'chunked',\n          },\n        })\n      : streamResult.toDataStreamResponse({\n          sendUsage: true,\n          sendReasoning: true,\n          getErrorMessage: (error: any) => {\n            return `An error occurred while processing your request. ${error instanceof Error ? error.message : JSON.stringify(error)}`;\n          },\n          headers: {\n            'Transfer-Encoding': 'chunked',\n          },\n        });\n\n    return streamResponse;\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport function streamGenerateHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'stream'> & {\n    runtimeContext?: string;\n    format?: 'aisdk' | 'mastra';\n  };\n  abortSignal?: AbortSignal;\n}): ReturnType<Agent['stream']> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = agent.stream(messages, {\n      ...rest,\n      runtimeContext: finalRuntimeContext,\n      abortSignal,\n      format: body.format ?? 'mastra',\n    });\n\n    return streamResult;\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport function approveToolCallHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetHITLBody<'approveToolCall'> & {\n    runtimeContext?: string;\n    format?: 'aisdk' | 'mastra';\n  };\n  abortSignal?: AbortSignal;\n}): ReturnType<Agent['approveToolCall']> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { runId, runtimeContext: agentRuntimeContext, ...rest } = body;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    const streamResult = agent.approveToolCall({\n      ...rest,\n      runId,\n      runtimeContext: finalRuntimeContext,\n      abortSignal,\n      format: body.format ?? 'mastra',\n    });\n\n    return streamResult;\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport function declineToolCallHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetHITLBody<'declineToolCall'> & {\n    runtimeContext?: string;\n    format?: 'aisdk' | 'mastra';\n  };\n  abortSignal?: AbortSignal;\n}): ReturnType<Agent['declineToolCall']> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { runId, runtimeContext: agentRuntimeContext, ...rest } = body;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    const streamResult = agent.declineToolCall({\n      ...rest,\n      runId,\n      runtimeContext: finalRuntimeContext,\n      abortSignal,\n      format: body.format ?? 'mastra',\n    });\n\n    return streamResult;\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport function streamNetworkHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  // abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'network'> & {\n    thread?: string;\n    resourceId?: string;\n  };\n  // abortSignal?: AbortSignal;\n}): ReturnType<Agent['network']> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = agent.network(messages, {\n      ...rest,\n      memory: {\n        thread: rest.thread ?? '',\n        resource: rest.resourceId ?? '',\n      },\n      runtimeContext: finalRuntimeContext,\n    });\n\n    return streamResult;\n  } catch (error) {\n    return handleError(error, 'error streaming agent loop response');\n  }\n}\n\nexport async function streamUIMessageHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'stream'> & {\n    runtimeContext?: string;\n    onStepFinish?: StreamTextOnStepFinishCallback<any>;\n    onFinish?: StreamTextOnFinishCallback<any>;\n    output?: undefined;\n  };\n  abortSignal?: AbortSignal;\n}): Promise<Response | undefined> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = await agent.stream(messages, {\n      ...rest,\n      runtimeContext: finalRuntimeContext,\n      abortSignal,\n      format: 'aisdk',\n    });\n\n    return streamResult.toUIMessageStreamResponse();\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport async function updateAgentModelHandler({\n  mastra,\n  agentId,\n  body,\n}: Context & {\n  agentId: string;\n  body: {\n    modelId: string;\n    provider: string;\n  };\n}): Promise<{ message: string }> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    const { modelId, provider } = body;\n\n    // Use the universal Mastra router format: provider/model\n    const newModel = `${provider}/${modelId}`;\n\n    agent.__updateModel({ model: newModel });\n\n    return { message: 'Agent model updated' };\n  } catch (error) {\n    return handleError(error, 'error updating agent model');\n  }\n}\n\nexport async function reorderAgentModelListHandler({\n  mastra,\n  agentId,\n  body,\n}: Context & {\n  agentId: string;\n  body: {\n    reorderedModelIds: Array<string>;\n  };\n}): Promise<{ message: string }> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    const modelList = await agent.getModelList();\n    if (!modelList || modelList.length === 0) {\n      throw new HTTPException(400, { message: 'Agent model list is not found or empty' });\n    }\n\n    agent.reorderModels(body.reorderedModelIds);\n\n    return { message: 'Model list reordered' };\n  } catch (error) {\n    return handleError(error, 'error reordering model list');\n  }\n}\n\nexport async function updateAgentModelInModelListHandler({\n  mastra,\n  agentId,\n  modelConfigId,\n  body,\n}: Context & {\n  agentId: string;\n  modelConfigId: string;\n  body: {\n    model?: {\n      modelId: string;\n      provider: string;\n    };\n    maxRetries?: number;\n    enabled?: boolean;\n  };\n}): Promise<{ message: string }> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n    const { model: bodyModel, maxRetries, enabled } = body;\n\n    if (!modelConfigId) {\n      throw new HTTPException(400, { message: 'Model id is required' });\n    }\n\n    const modelList = await agent.getModelList();\n    if (!modelList || modelList.length === 0) {\n      throw new HTTPException(400, { message: 'Agent model list is not found or empty' });\n    }\n\n    const modelToUpdate = modelList.find(m => m.id === modelConfigId);\n    if (!modelToUpdate) {\n      throw new HTTPException(400, { message: 'Model to update is not found in agent model list' });\n    }\n\n    let model: string | undefined;\n    if (bodyModel) {\n      const { modelId, provider } = bodyModel;\n      // Use the universal Mastra router format: provider/model\n      model = `${provider}/${modelId}`;\n    }\n\n    agent.updateModelInModelList({ id: modelConfigId, model, maxRetries, enabled });\n\n    return { message: 'Model list updated' };\n  } catch (error) {\n    return handleError(error, 'error updating model list');\n  }\n}\n\nexport async function getProvidersHandler() {\n  try {\n    const providers = Object.entries(PROVIDER_REGISTRY).map(([id, provider]) => {\n      // Check if the provider is connected by checking for its API key env var(s)\n      const envVars = Array.isArray(provider.apiKeyEnvVar) ? provider.apiKeyEnvVar : [provider.apiKeyEnvVar];\n      const connected = envVars.every(envVar => !!process.env[envVar]);\n\n      return {\n        id,\n        name: provider.name,\n        envVar: provider.apiKeyEnvVar,\n        connected,\n        docUrl: provider.docUrl,\n        models: [...provider.models], // Convert readonly array to regular array\n      };\n    });\n\n    return { providers };\n  } catch (error) {\n    return handleError(error, 'error fetching providers');\n  }\n}\n"]}