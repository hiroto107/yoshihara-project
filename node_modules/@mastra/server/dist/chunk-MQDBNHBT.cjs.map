{"version":3,"sources":["../src/server/handlers/workflows.ts"],"names":["__export","getWorkflowInfo","handleError","HTTPException","WorkflowRegistry","ReadableStream","TransformStream"],"mappings":"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","file":"chunk-MQDBNHBT.cjs","sourcesContent":["import { ReadableStream, TransformStream } from 'node:stream/web';\nimport type { TracingOptions } from '@mastra/core/ai-tracing';\nimport type { RuntimeContext } from '@mastra/core/di';\nimport type { WorkflowRuns } from '@mastra/core/storage';\nimport type { Workflow, WatchEvent, WorkflowInfo, StreamEvent, ChunkType } from '@mastra/core/workflows';\nimport { HTTPException } from '../http-exception';\nimport type { Context } from '../types';\nimport { getWorkflowInfo, WorkflowRegistry } from '../utils';\nimport { handleError } from './error';\n\nexport interface WorkflowContext extends Context {\n  workflowId?: string;\n  runId?: string;\n}\n\nexport async function getWorkflowsHandler({ mastra }: WorkflowContext) {\n  try {\n    const workflows = mastra.getWorkflows({ serialized: false });\n    const _workflows = Object.entries(workflows).reduce<Record<string, WorkflowInfo>>((acc, [key, workflow]) => {\n      acc[key] = getWorkflowInfo(workflow);\n      return acc;\n    }, {});\n    return _workflows;\n  } catch (error) {\n    return handleError(error, 'Error getting workflows');\n  }\n}\n\nasync function getWorkflowsFromSystem({ mastra, workflowId }: WorkflowContext) {\n  const logger = mastra.getLogger();\n\n  if (!workflowId) {\n    throw new HTTPException(400, { message: 'Workflow ID is required' });\n  }\n\n  let workflow;\n\n  // First check registry for temporary workflows\n  workflow = WorkflowRegistry.getWorkflow(workflowId);\n\n  if (!workflow) {\n    try {\n      workflow = mastra.getWorkflow(workflowId);\n    } catch (error) {\n      logger.debug('Error getting workflow, searching agents for workflow', error);\n    }\n  }\n\n  if (!workflow) {\n    logger.debug('Workflow not found, searching agents for workflow', { workflowId });\n    const agents = mastra.getAgents();\n\n    if (Object.keys(agents || {}).length) {\n      for (const [_, agent] of Object.entries(agents)) {\n        try {\n          const workflows = await agent.getWorkflows();\n\n          if (workflows[workflowId]) {\n            workflow = workflows[workflowId];\n            break;\n          }\n          break;\n        } catch (error) {\n          logger.debug('Error getting workflow from agent', error);\n        }\n      }\n    }\n  }\n\n  if (!workflow) {\n    throw new HTTPException(404, { message: 'Workflow not found' });\n  }\n\n  return { workflow };\n}\n\nexport async function getWorkflowByIdHandler({ mastra, workflowId }: WorkflowContext): Promise<WorkflowInfo> {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    return getWorkflowInfo(workflow);\n  } catch (error) {\n    return handleError(error, 'Error getting workflow');\n  }\n}\n\nexport async function getWorkflowRunByIdHandler({\n  mastra,\n  workflowId,\n  runId,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>): Promise<ReturnType<Workflow['getWorkflowRunById']>> {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'Run ID is required' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    return run;\n  } catch (error) {\n    return handleError(error, 'Error getting workflow run');\n  }\n}\n\nexport async function getWorkflowRunExecutionResultHandler({\n  mastra,\n  workflowId,\n  runId,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>): Promise<WatchEvent['payload']['workflowState']> {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'Run ID is required' });\n    }\n\n    const workflow = mastra.getWorkflow(workflowId);\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const executionResult = await workflow.getWorkflowRunExecutionResult(runId);\n\n    if (!executionResult) {\n      throw new HTTPException(404, { message: 'Workflow run execution result not found' });\n    }\n\n    return executionResult;\n  } catch (error) {\n    return handleError(error, 'Error getting workflow run execution result');\n  }\n}\n\nexport async function createWorkflowRunHandler({\n  mastra,\n  workflowId,\n  runId: prevRunId,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.createRunAsync({ runId: prevRunId });\n\n    return { runId: run.runId };\n  } catch (error) {\n    return handleError(error, 'Error creating workflow run');\n  }\n}\n\nexport async function startAsyncWorkflowHandler({\n  mastra,\n  runtimeContext,\n  workflowId,\n  runId,\n  inputData,\n  tracingOptions,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {\n  inputData?: unknown;\n  runtimeContext?: RuntimeContext;\n  tracingOptions?: TracingOptions;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId });\n    const result = await _run.start({\n      inputData,\n      runtimeContext,\n      tracingOptions,\n    });\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error starting async workflow');\n  }\n}\n\nexport async function startWorkflowRunHandler({\n  mastra,\n  runtimeContext,\n  workflowId,\n  runId,\n  inputData,\n  tracingOptions,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {\n  inputData?: unknown;\n  runtimeContext?: RuntimeContext;\n  tracingOptions?: TracingOptions;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to start run' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n    void _run.start({\n      inputData,\n      runtimeContext,\n      tracingOptions,\n    });\n\n    return { message: 'Workflow run started' };\n  } catch (e) {\n    return handleError(e, 'Error starting workflow run');\n  }\n}\n\nexport async function watchWorkflowHandler({\n  mastra,\n  workflowId,\n  runId,\n  eventType = 'watch',\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {\n  eventType?: 'watch' | 'watch-v2';\n}): Promise<ReadableStream<string>> {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to watch workflow' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n    let unwatch: () => void;\n    let asyncRef: NodeJS.Immediate | null = null;\n    const stream = new ReadableStream<string>({\n      start(controller) {\n        unwatch = _run.watch((event: any) => {\n          const { type, payload, eventTimestamp } = event;\n          controller.enqueue(JSON.stringify({ type, payload, eventTimestamp, runId }));\n\n          if (asyncRef) {\n            clearImmediate(asyncRef);\n            asyncRef = null;\n          }\n\n          // a run is finished if the status is not running\n          asyncRef = setImmediate(async () => {\n            const runDone = eventType === 'watch' ? payload.workflowState.status !== 'running' : type === 'finish';\n            if (runDone) {\n              controller.close();\n              unwatch?.();\n            }\n          });\n        }, eventType);\n      },\n      cancel() {\n        if (asyncRef) {\n          clearImmediate(asyncRef);\n          asyncRef = null;\n        }\n        unwatch?.();\n      },\n    });\n\n    return stream;\n  } catch (error) {\n    return handleError(error, 'Error watching workflow');\n  }\n}\n\nexport async function streamWorkflowHandler({\n  mastra,\n  runtimeContext,\n  workflowId,\n  runId,\n  inputData,\n  tracingOptions,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {\n  inputData?: unknown;\n  runtimeContext?: RuntimeContext;\n  tracingOptions?: TracingOptions;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to resume workflow' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const serverCache = mastra.getServerCache();\n\n    const run = await workflow.createRunAsync({ runId });\n    const result = run.stream({\n      inputData,\n      runtimeContext,\n      onChunk: async chunk => {\n        if (serverCache) {\n          const cacheKey = runId;\n          await serverCache.listPush(cacheKey, chunk);\n        }\n      },\n      tracingOptions,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error executing workflow');\n  }\n}\n\nexport async function observeStreamWorkflowHandler({\n  mastra,\n  workflowId,\n  runId,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to observe workflow stream' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n    const serverCache = mastra.getServerCache();\n    if (!serverCache) {\n      throw new HTTPException(500, { message: 'Server cache not found' });\n    }\n\n    const transformStream = new TransformStream<StreamEvent, StreamEvent>();\n\n    const writer = transformStream.writable.getWriter();\n\n    const cachedRunChunks = await serverCache.listFromTo(runId, 0);\n\n    for (const chunk of cachedRunChunks) {\n      await writer.write(chunk as any);\n    }\n\n    writer.releaseLock();\n\n    const result = _run.observeStream();\n    return result.stream?.pipeThrough(transformStream);\n  } catch (error) {\n    return handleError(error, 'Error observing workflow stream');\n  }\n}\n\nexport async function streamVNextWorkflowHandler({\n  mastra,\n  runtimeContext,\n  workflowId,\n  runId,\n  inputData,\n  closeOnSuspend,\n  tracingOptions,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {\n  inputData?: unknown;\n  runtimeContext?: RuntimeContext;\n  closeOnSuspend?: boolean;\n  tracingOptions?: TracingOptions;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to stream workflow' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const serverCache = mastra.getServerCache();\n\n    const run = await workflow.createRunAsync({ runId });\n    const result = run.streamVNext({\n      inputData,\n      runtimeContext,\n      closeOnSuspend,\n      onChunk: async chunk => {\n        if (serverCache) {\n          const cacheKey = runId;\n          await serverCache.listPush(cacheKey, chunk);\n        }\n      },\n      tracingOptions,\n    });\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error streaming workflow');\n  }\n}\n\nexport async function observeStreamVNextWorkflowHandler({\n  mastra,\n  workflowId,\n  runId,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to observe workflow stream' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n    const serverCache = mastra.getServerCache();\n    if (!serverCache) {\n      throw new HTTPException(500, { message: 'Server cache not found' });\n    }\n\n    // Get cached chunks first\n    const cachedRunChunks = await serverCache.listFromTo(runId, 0);\n\n    // Create a readable stream that first emits cached chunks, then the live stream\n    const combinedStream = new ReadableStream<ChunkType>({\n      start(controller) {\n        // First, emit all cached chunks\n        const emitCachedChunks = async () => {\n          for (const chunk of cachedRunChunks) {\n            controller.enqueue(chunk as ChunkType);\n          }\n        };\n\n        // Then, pipe the live stream\n        const liveStream = _run.observeStreamVNext();\n        const reader = liveStream.getReader();\n\n        const pump = async () => {\n          try {\n            while (true) {\n              const { done, value } = await reader.read();\n              if (done) {\n                controller.close();\n                break;\n              }\n              controller.enqueue(value);\n            }\n          } catch (error) {\n            controller.error(error);\n          } finally {\n            reader.releaseLock();\n          }\n        };\n\n        // Start with cached chunks, then live stream\n        void emitCachedChunks()\n          .then(() => {\n            void pump();\n          })\n          .catch(error => {\n            controller.error(error);\n          });\n      },\n    });\n\n    return combinedStream;\n  } catch (error) {\n    return handleError(error, 'Error observing workflow stream');\n  }\n}\n\nexport async function resumeAsyncWorkflowHandler({\n  mastra,\n  workflowId,\n  runId,\n  body,\n  runtimeContext,\n  tracingOptions,\n}: WorkflowContext & {\n  body: { step: string | string[]; resumeData?: unknown };\n  runtimeContext?: RuntimeContext;\n  tracingOptions?: TracingOptions;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to resume workflow' });\n    }\n\n    if (!body.step) {\n      throw new HTTPException(400, { message: 'step required to resume workflow' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n    const result = await _run.resume({\n      step: body.step,\n      resumeData: body.resumeData,\n      runtimeContext,\n      tracingOptions,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error resuming workflow step');\n  }\n}\n\nexport async function resumeWorkflowHandler({\n  mastra,\n  workflowId,\n  runId,\n  body,\n  runtimeContext,\n  tracingOptions,\n}: WorkflowContext & {\n  body: { step: string | string[]; resumeData?: unknown };\n  runtimeContext?: RuntimeContext;\n  tracingOptions?: TracingOptions;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to resume workflow' });\n    }\n\n    if (!body.step) {\n      throw new HTTPException(400, { message: 'step required to resume workflow' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n\n    void _run.resume({\n      step: body.step,\n      resumeData: body.resumeData,\n      runtimeContext,\n      tracingOptions,\n    });\n\n    return { message: 'Workflow run resumed' };\n  } catch (error) {\n    return handleError(error, 'Error resuming workflow');\n  }\n}\n\nexport async function resumeStreamWorkflowHandler({\n  mastra,\n  workflowId,\n  runId,\n  body,\n  runtimeContext,\n  tracingOptions,\n}: WorkflowContext & {\n  body: { step: string | string[]; resumeData?: unknown };\n  runtimeContext?: RuntimeContext;\n  tracingOptions?: TracingOptions;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to resume workflow' });\n    }\n\n    if (!body.step) {\n      throw new HTTPException(400, { message: 'step required to resume workflow' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n    const serverCache = mastra.getServerCache();\n\n    const stream = _run.resumeStreamVNext({\n      step: body.step,\n      resumeData: body.resumeData,\n      runtimeContext,\n      tracingOptions,\n      onChunk: async chunk => {\n        if (serverCache) {\n          const cacheKey = runId;\n          await serverCache.listPush(cacheKey, chunk);\n        }\n      },\n    });\n\n    return stream;\n  } catch (error) {\n    return handleError(error, 'Error resuming workflow');\n  }\n}\n\nexport async function getWorkflowRunsHandler({\n  mastra,\n  workflowId,\n  fromDate,\n  toDate,\n  limit,\n  offset,\n  resourceId,\n}: WorkflowContext & {\n  fromDate?: Date;\n  toDate?: Date;\n  limit?: number;\n  offset?: number;\n  resourceId?: string;\n}): Promise<WorkflowRuns> {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const workflowRuns = (await workflow.getWorkflowRuns({ fromDate, toDate, limit, offset, resourceId })) || {\n      runs: [],\n      total: 0,\n    };\n    return workflowRuns;\n  } catch (error) {\n    return handleError(error, 'Error getting workflow runs');\n  }\n}\n\nexport async function cancelWorkflowRunHandler({\n  mastra,\n  workflowId,\n  runId,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to cancel workflow run' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n\n    await _run.cancel();\n\n    return { message: 'Workflow run cancelled' };\n  } catch (error) {\n    return handleError(error, 'Error canceling workflow run');\n  }\n}\n\nexport async function sendWorkflowRunEventHandler({\n  mastra,\n  workflowId,\n  runId,\n  event,\n  data,\n}: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {\n  event: string;\n  data: unknown;\n}) {\n  try {\n    if (!workflowId) {\n      throw new HTTPException(400, { message: 'Workflow ID is required' });\n    }\n\n    if (!runId) {\n      throw new HTTPException(400, { message: 'runId required to send workflow run event' });\n    }\n\n    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });\n\n    if (!workflow) {\n      throw new HTTPException(404, { message: 'Workflow not found' });\n    }\n\n    const run = await workflow.getWorkflowRunById(runId);\n\n    if (!run) {\n      throw new HTTPException(404, { message: 'Workflow run not found' });\n    }\n\n    const _run = await workflow.createRunAsync({ runId, resourceId: run.resourceId });\n\n    await _run.sendEvent(event, data);\n\n    return { message: 'Workflow run event sent' };\n  } catch (error) {\n    return handleError(error, 'Error sending workflow run event');\n  }\n}\n"]}