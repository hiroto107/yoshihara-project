import { handleError } from './chunk-CY4TP3FK.js';
import { HTTPException } from './chunk-MMROOK5J.js';
import { __export } from './chunk-PR4QN5HX.js';
import { scoreTraces } from '@mastra/core/scores/scoreTraces';

// src/server/handlers/observability.ts
var observability_exports = {};
__export(observability_exports, {
  getAITraceHandler: () => getAITraceHandler,
  getAITracesPaginatedHandler: () => getAITracesPaginatedHandler,
  getScoresBySpan: () => getScoresBySpan,
  scoreTracesHandler: () => scoreTracesHandler
});
async function getAITraceHandler({ mastra, traceId }) {
  try {
    if (!traceId) {
      throw new HTTPException(400, { message: "Trace ID is required" });
    }
    const storage = mastra.getStorage();
    if (!storage) {
      throw new HTTPException(500, { message: "Storage is not available" });
    }
    const trace = await storage.getAITrace(traceId);
    if (!trace) {
      throw new HTTPException(404, { message: `Trace with ID '${traceId}' not found` });
    }
    return trace;
  } catch (error) {
    handleError(error, "Error getting AI trace");
  }
}
async function getAITracesPaginatedHandler({ mastra, body }) {
  try {
    const storage = mastra.getStorage();
    if (!storage) {
      throw new HTTPException(500, { message: "Storage is not available" });
    }
    if (!body) {
      throw new HTTPException(400, { message: "Request body is required" });
    }
    const { filters, pagination } = body;
    if (pagination?.page && pagination.page < 0) {
      throw new HTTPException(400, { message: "Page must be a non-negative integer" });
    }
    if (pagination?.perPage && pagination.perPage < 0) {
      throw new HTTPException(400, { message: "Per page must be a non-negative integer" });
    }
    if (pagination?.dateRange) {
      const { start, end } = pagination.dateRange;
      if (start && !(start instanceof Date)) {
        throw new HTTPException(400, { message: "Invalid date format in date range" });
      }
      if (end && !(end instanceof Date)) {
        throw new HTTPException(400, { message: "Invalid date format in date range" });
      }
    }
    return storage.getAITracesPaginated({
      pagination,
      filters
    });
  } catch (error) {
    handleError(error, "Error getting AI traces paginated");
  }
}
async function scoreTracesHandler({ mastra, body }) {
  try {
    if (!body) {
      throw new HTTPException(400, { message: "Request body is required" });
    }
    const { scorerName, targets } = body;
    if (!scorerName) {
      throw new HTTPException(400, { message: "Scorer Name is required" });
    }
    if (!targets || targets.length === 0) {
      throw new HTTPException(400, { message: "At least one target is required" });
    }
    const storage = mastra.getStorage();
    if (!storage) {
      throw new HTTPException(500, { message: "Storage is not available" });
    }
    const scorer = mastra.getScorerByName(scorerName);
    if (!scorer) {
      throw new HTTPException(404, { message: `Scorer '${scorerName}' not found` });
    }
    const logger = mastra.getLogger();
    scoreTraces({
      scorerName,
      targets,
      mastra
    }).catch((error) => {
      logger?.error(`Background trace scoring failed: ${error.message}`, error);
    });
    return {
      status: "success",
      message: `Scoring started for ${targets.length} ${targets.length === 1 ? "trace" : "traces"}`,
      traceCount: targets.length
    };
  } catch (error) {
    handleError(error, "Error processing trace scoring");
  }
}
async function getScoresBySpan({
  mastra,
  traceId,
  spanId,
  pagination
}) {
  try {
    const storage = mastra.getStorage();
    if (!storage) {
      throw new HTTPException(500, { message: "Storage is not available" });
    }
    if (!traceId || !spanId) {
      throw new HTTPException(400, { message: "Trace ID and span ID are required" });
    }
    return await storage.getScoresBySpan({ traceId, spanId, pagination });
  } catch (error) {
    return handleError(error, "Error getting scores by span");
  }
}

export { getAITraceHandler, getAITracesPaginatedHandler, getScoresBySpan, observability_exports, scoreTracesHandler };
//# sourceMappingURL=chunk-BATEJLED.js.map
//# sourceMappingURL=chunk-BATEJLED.js.map