'use strict';

var chunkRE4RPXT2_cjs = require('./chunk-RE4RPXT2.cjs');
var chunkO7I5CWRX_cjs = require('./chunk-O7I5CWRX.cjs');

// src/server/handlers/scores.ts
var scores_exports = {};
chunkO7I5CWRX_cjs.__export(scores_exports, {
  getScorerHandler: () => getScorerHandler,
  getScorersHandler: () => getScorersHandler,
  getScoresByEntityIdHandler: () => getScoresByEntityIdHandler,
  getScoresByRunIdHandler: () => getScoresByRunIdHandler,
  getScoresByScorerIdHandler: () => getScoresByScorerIdHandler,
  saveScoreHandler: () => saveScoreHandler
});
async function getScorersFromSystem({
  mastra,
  runtimeContext
}) {
  const agents = mastra.getAgents();
  const workflows = mastra.getWorkflows();
  const scorersMap = /* @__PURE__ */ new Map();
  for (const [agentId, agent] of Object.entries(agents)) {
    const scorers = await agent.getScorers({
      runtimeContext
    }) || {};
    if (Object.keys(scorers).length > 0) {
      for (const [_scorerId, scorer] of Object.entries(scorers)) {
        const scorerName = scorer.scorer.name;
        if (scorersMap.has(scorerName)) {
          scorersMap.get(scorerName)?.agentIds.push(agentId);
          scorersMap.get(scorerName)?.agentNames.push(agent.name);
        } else {
          scorersMap.set(scorerName, {
            workflowIds: [],
            ...scorer,
            agentNames: [agent.name],
            agentIds: [agentId],
            isRegistered: false
          });
        }
      }
    }
  }
  for (const [workflowId, workflow] of Object.entries(workflows)) {
    const scorers = await workflow.getScorers({
      runtimeContext
    }) || {};
    if (Object.keys(scorers).length > 0) {
      for (const [_scorerId, scorer] of Object.entries(scorers)) {
        const scorerName = scorer.scorer.name;
        if (scorersMap.has(scorerName)) {
          scorersMap.get(scorerName)?.workflowIds.push(workflowId);
        } else {
          scorersMap.set(scorerName, {
            agentIds: [],
            agentNames: [],
            ...scorer,
            workflowIds: [workflowId],
            isRegistered: false
          });
        }
      }
    }
  }
  const registeredScorers = await mastra.getScorers();
  for (const [_scorerId, scorer] of Object.entries(registeredScorers || {})) {
    const scorerName = scorer.name;
    if (scorersMap.has(scorerName)) {
      scorersMap.get(scorerName).isRegistered = true;
    } else {
      scorersMap.set(scorerName, {
        scorer,
        agentIds: [],
        agentNames: [],
        workflowIds: [],
        isRegistered: true
      });
    }
  }
  return Object.fromEntries(scorersMap.entries());
}
async function getScorersHandler({ mastra, runtimeContext }) {
  const scorers = await getScorersFromSystem({
    mastra,
    runtimeContext
  });
  return scorers;
}
async function getScorerHandler({
  mastra,
  scorerId,
  runtimeContext
}) {
  const scorers = await getScorersFromSystem({
    mastra,
    runtimeContext
  });
  const scorer = scorers[scorerId];
  if (!scorer) {
    return null;
  }
  return scorer;
}
async function getScoresByRunIdHandler({
  mastra,
  runId,
  pagination
}) {
  try {
    const scoreResults = await mastra.getStorage()?.getScoresByRunId?.({
      runId,
      pagination
    }) || { pagination: { total: 0, page: 0, perPage: 0, hasMore: false }, scores: [] };
    return {
      pagination: scoreResults.pagination,
      scores: scoreResults.scores.map((score) => ({ ...score, ...getTraceDetails(score.traceId) }))
    };
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting scores by run id");
  }
}
async function getScoresByScorerIdHandler({
  mastra,
  scorerId,
  pagination,
  entityId,
  entityType
}) {
  try {
    const scoreResults = await mastra.getStorage()?.getScoresByScorerId?.({
      scorerId,
      pagination,
      entityId,
      entityType
    }) || { pagination: { total: 0, page: 0, perPage: 0, hasMore: false }, scores: [] };
    return {
      pagination: scoreResults.pagination,
      scores: scoreResults.scores.map((score) => ({ ...score, ...getTraceDetails(score.traceId) }))
    };
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting scores by scorer id");
  }
}
async function getScoresByEntityIdHandler({
  mastra,
  entityId,
  entityType,
  pagination
}) {
  try {
    let entityIdToUse = entityId;
    if (entityType === "AGENT") {
      const agent = mastra.getAgentById(entityId);
      entityIdToUse = agent.id;
    } else if (entityType === "WORKFLOW") {
      const workflow = mastra.getWorkflowById(entityId);
      entityIdToUse = workflow.id;
    }
    const scoreResults = await mastra.getStorage()?.getScoresByEntityId?.({
      entityId: entityIdToUse,
      entityType,
      pagination
    }) || { pagination: { total: 0, page: 0, perPage: 0, hasMore: false }, scores: [] };
    return {
      pagination: scoreResults.pagination,
      scores: scoreResults.scores.map((score) => ({ ...score, ...getTraceDetails(score.traceId) }))
    };
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting scores by entity id");
  }
}
function getTraceDetails(traceIdWithSpanId) {
  if (!traceIdWithSpanId) {
    return {};
  }
  const [traceId, spanId] = traceIdWithSpanId.split("-");
  return {
    ...traceId ? { traceId } : {},
    ...spanId ? { spanId } : {}
  };
}
async function saveScoreHandler({ mastra, score }) {
  try {
    const scores = await mastra.getStorage()?.saveScore?.(score) || [];
    return scores;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error saving score");
  }
}

exports.getScorerHandler = getScorerHandler;
exports.getScorersHandler = getScorersHandler;
exports.getScoresByEntityIdHandler = getScoresByEntityIdHandler;
exports.getScoresByRunIdHandler = getScoresByRunIdHandler;
exports.getScoresByScorerIdHandler = getScoresByScorerIdHandler;
exports.saveScoreHandler = saveScoreHandler;
exports.scores_exports = scores_exports;
//# sourceMappingURL=chunk-SPRRK3P7.cjs.map
//# sourceMappingURL=chunk-SPRRK3P7.cjs.map