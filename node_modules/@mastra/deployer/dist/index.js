import { Bundler } from './chunk-XTBMKKIY.js';
import { extractMastraOption, removeAllOptionsFromMastraExcept } from './chunk-YC7SHFJ6.js';
import { DepsService, FileService } from './chunk-5QFG6SCM.js';
export { Deps, FileService, createChildProcessLogger, createPinoStream } from './chunk-5QFG6SCM.js';

// src/deploy/base.ts
var Deployer = class extends Bundler {
  deps = new DepsService();
  constructor(args) {
    super(args.name, "DEPLOYER");
    this.deps.__setLogger(this.logger);
  }
  getEnvFiles() {
    const possibleFiles = [".env.production", ".env.local", ".env"];
    try {
      const fileService = new FileService();
      const envFile = fileService.getFirstExistingFile(possibleFiles);
      return Promise.resolve([envFile]);
    } catch {
    }
    return Promise.resolve([]);
  }
};

// src/build/babel/remove-all-options-deployer.ts
function removeAllOptionsExceptDeployer(result, logger) {
  return removeAllOptionsFromMastraExcept(result, "deployer", logger);
}

// src/build/deployer.ts
async function getDeployer(entryFile, outputDir, logger) {
  const result = await extractMastraOption(
    "deployer",
    entryFile,
    removeAllOptionsExceptDeployer,
    outputDir,
    logger
  );
  if (!result) {
    return null;
  }
  return result.getConfig();
}

export { Deployer, getDeployer };
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map