import type { Context } from 'hono';
export declare function getScorersHandler(c: Context): Promise<Response>;
export declare function getScorerHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    scorer: {
        config: {
            name: any;
            description: string;
            judge?: {
                model: import("@mastra/core/llm/model").ModelRouterModelId | {
                    readonly specificationVersion: "v1";
                    readonly provider: string;
                    readonly modelId: string;
                    readonly defaultObjectGenerationMode: "tool" | "json" | undefined;
                    readonly supportsImageUrls?: boolean | undefined;
                    readonly supportsStructuredOutputs?: boolean | undefined;
                    supportsUrl?: {} | undefined;
                    doGenerate: {};
                    doStream: {};
                } | {
                    readonly specificationVersion: "v2";
                    readonly provider: string;
                    readonly modelId: string;
                    supportedUrls: {
                        [x: string]: {
                            exec: {};
                            test: {};
                            readonly source: string;
                            readonly global: boolean;
                            readonly ignoreCase: boolean;
                            readonly multiline: boolean;
                            lastIndex: number;
                            compile: {};
                            readonly flags: string;
                            readonly sticky: boolean;
                            readonly unicode: boolean;
                            readonly dotAll: boolean;
                            readonly hasIndices: boolean;
                        }[];
                    } | {
                        then: {};
                    };
                    doGenerate: {};
                    doStream: {};
                } | {
                    id: `${string}/${string}`;
                    url?: string | undefined;
                    apiKey?: string | undefined;
                    headers?: {
                        [x: string]: string;
                    } | undefined;
                } | {
                    providerId: string;
                    modelId: string;
                    url?: string | undefined;
                    apiKey?: string | undefined;
                    headers?: {
                        [x: string]: string;
                    } | undefined;
                };
                instructions: string;
            } | undefined;
            type?: "agent" | {
                input: {
                    readonly _type: any;
                    readonly _output: any;
                    readonly _input: any;
                    readonly _def: {
                        errorMap?: {} | undefined;
                        description?: string | undefined | undefined;
                    };
                    readonly description: string | undefined;
                    "~standard": {
                        readonly version: 1;
                        readonly vendor: string;
                        readonly types?: {
                            readonly input: any;
                            readonly output: any;
                        } | undefined;
                    };
                    _parse: {};
                    _getType: {};
                    _getOrReturnCtx: {};
                    _processInputParams: {};
                    _parseSync: {};
                    _parseAsync: {};
                    parse: {};
                    safeParse: {};
                    parseAsync: {};
                    safeParseAsync: {};
                    spa: {};
                    refine: {};
                    refinement: {};
                    _refinement: {};
                    superRefine: {};
                    or: {};
                    and: {};
                    transform: {};
                    brand: {};
                    describe: {};
                    pipe: {};
                };
                output: {
                    readonly _type: any;
                    readonly _output: any;
                    readonly _input: any;
                    readonly _def: {
                        errorMap?: {} | undefined;
                        description?: string | undefined | undefined;
                    };
                    readonly description: string | undefined;
                    "~standard": {
                        readonly version: 1;
                        readonly vendor: string;
                        readonly types?: {
                            readonly input: any;
                            readonly output: any;
                        } | undefined;
                    };
                    _parse: {};
                    _getType: {};
                    _getOrReturnCtx: {};
                    _processInputParams: {};
                    _parseSync: {};
                    _parseAsync: {};
                    parse: {};
                    safeParse: {};
                    parseAsync: {};
                    safeParseAsync: {};
                    spa: {};
                    refine: {};
                    refinement: {};
                    _refinement: {};
                    superRefine: {};
                    or: {};
                    and: {};
                    transform: {};
                    brand: {};
                    describe: {};
                    pipe: {};
                };
            } | undefined;
        };
        readonly type: "agent" | {
            input: {
                readonly _type: any;
                readonly _output: any;
                readonly _input: any;
                readonly _def: {
                    errorMap?: {} | undefined;
                    description?: string | undefined | undefined;
                };
                readonly description: string | undefined;
                "~standard": {
                    readonly version: 1;
                    readonly vendor: string;
                    readonly types?: {
                        readonly input: any;
                        readonly output: any;
                    } | undefined;
                };
                _parse: {};
                _getType: {};
                _getOrReturnCtx: {};
                _processInputParams: {};
                _parseSync: {};
                _parseAsync: {};
                parse: {};
                safeParse: {};
                parseAsync: {};
                safeParseAsync: {};
                spa: {};
                refine: {};
                refinement: {};
                _refinement: {};
                superRefine: {};
                or: {};
                and: {};
                transform: {};
                brand: {};
                describe: {};
                pipe: {};
            };
            output: {
                readonly _type: any;
                readonly _output: any;
                readonly _input: any;
                readonly _def: {
                    errorMap?: {} | undefined;
                    description?: string | undefined | undefined;
                };
                readonly description: string | undefined;
                "~standard": {
                    readonly version: 1;
                    readonly vendor: string;
                    readonly types?: {
                        readonly input: any;
                        readonly output: any;
                    } | undefined;
                };
                _parse: {};
                _getType: {};
                _getOrReturnCtx: {};
                _processInputParams: {};
                _parseSync: {};
                _parseAsync: {};
                parse: {};
                safeParse: {};
                parseAsync: {};
                safeParseAsync: {};
                spa: {};
                refine: {};
                refinement: {};
                _refinement: {};
                superRefine: {};
                or: {};
                and: {};
                transform: {};
                brand: {};
                describe: {};
                pipe: {};
            };
        } | undefined;
        readonly name: any;
        readonly description: string;
        readonly judge: {
            model: import("@mastra/core/llm/model").ModelRouterModelId | {
                readonly specificationVersion: "v1";
                readonly provider: string;
                readonly modelId: string;
                readonly defaultObjectGenerationMode: "tool" | "json" | undefined;
                readonly supportsImageUrls?: boolean | undefined;
                readonly supportsStructuredOutputs?: boolean | undefined;
                supportsUrl?: {} | undefined;
                doGenerate: {};
                doStream: {};
            } | {
                readonly specificationVersion: "v2";
                readonly provider: string;
                readonly modelId: string;
                supportedUrls: {
                    [x: string]: {
                        exec: {};
                        test: {};
                        readonly source: string;
                        readonly global: boolean;
                        readonly ignoreCase: boolean;
                        readonly multiline: boolean;
                        lastIndex: number;
                        compile: {};
                        readonly flags: string;
                        readonly sticky: boolean;
                        readonly unicode: boolean;
                        readonly dotAll: boolean;
                        readonly hasIndices: boolean;
                    }[];
                } | {
                    then: {};
                };
                doGenerate: {};
                doStream: {};
            } | {
                id: `${string}/${string}`;
                url?: string | undefined;
                apiKey?: string | undefined;
                headers?: {
                    [x: string]: string;
                } | undefined;
            } | {
                providerId: string;
                modelId: string;
                url?: string | undefined;
                apiKey?: string | undefined;
                headers?: {
                    [x: string]: string;
                } | undefined;
            };
            instructions: string;
        } | undefined;
        preprocess: {};
        analyze: {};
        generateScore: {};
        generateReason: {};
        run: {};
    };
    sampling?: {
        type: "none";
    } | {
        type: "ratio";
        rate: number;
    } | undefined;
    agentIds: string[];
    agentNames: string[];
    workflowIds: string[];
    isRegistered: boolean;
} | null, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function getScoresByRunIdHandler(c: Context): Promise<Response>;
export declare function getScoresByScorerIdHandler(c: Context): Promise<Response>;
export declare function getScoresByEntityIdHandler(c: Context): Promise<Response>;
export declare function saveScoreHandler(c: Context): Promise<Response>;
//# sourceMappingURL=handlers.d.ts.map