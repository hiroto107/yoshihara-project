import type { Context } from 'hono';
export declare const sharedBodyOptions: any;
export declare const vNextBodyOptions: any;
export declare function getAgentsHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    [x: string]: {
        name: string;
        instructions?: string | string[] | {
            role: "system";
            content: string;
            providerOptions?: {
                [x: string]: {
                    [x: string]: any;
                };
            } | undefined;
            experimental_providerMetadata?: {
                [x: string]: {
                    [x: string]: any;
                };
            } | undefined;
        } | {
            role: "system";
            content: string;
            providerOptions?: {
                [x: string]: {
                    [x: string]: any;
                };
            } | undefined;
        } | {
            role: "system";
            content: string;
            providerOptions?: {
                [x: string]: {
                    [x: string]: any;
                };
            } | undefined;
            experimental_providerMetadata?: {
                [x: string]: {
                    [x: string]: any;
                };
            } | undefined;
        }[] | {
            role: "system";
            content: string;
            providerOptions?: {
                [x: string]: {
                    [x: string]: any;
                };
            } | undefined;
        }[] | undefined;
        tools: {
            [x: string]: {
                id: string;
                description?: string | undefined;
                inputSchema?: string | undefined;
                outputSchema?: string | undefined;
                requireApproval?: boolean | undefined;
            };
        };
        agents: {
            [x: string]: {
                id: string;
                name: string;
            };
        };
        workflows: {
            [x: string]: {
                name: string;
                steps?: {
                    [x: string]: {
                        id: string;
                        description?: string | undefined;
                    };
                } | undefined;
            };
        };
        inputProcessors: {
            name: string;
        }[];
        outputProcessors: {
            name: string;
        }[];
        provider?: string | undefined;
        modelId?: string | undefined;
        modelVersion?: string | undefined;
        modelList?: {
            id: string;
            maxRetries: number;
            enabled: boolean;
            model: {
                modelId: string;
                provider: string;
                modelVersion: string;
            };
        }[] | undefined;
        defaultGenerateOptions?: {
            [x: string]: never;
        } | undefined;
        defaultStreamOptions?: {
            [x: string]: never;
        } | undefined;
    };
}, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function getProvidersHandler(c: Context): Promise<Response>;
export declare function getAgentByIdHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    name: string;
    instructions?: string | string[] | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
        experimental_providerMetadata?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    } | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    } | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
        experimental_providerMetadata?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    }[] | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    }[] | undefined;
    tools: {
        [x: string]: {
            id: string;
            description?: string | undefined;
            inputSchema?: string | undefined;
            outputSchema?: string | undefined;
            requireApproval?: boolean | undefined;
        };
    };
    agents: {
        [x: string]: {
            id: string;
            name: string;
        };
    };
    workflows: {
        [x: string]: {
            name: string;
            steps?: {
                [x: string]: {
                    id: string;
                    description?: string | undefined;
                };
            } | undefined;
        };
    };
    inputProcessors: {
        name: string;
    }[];
    outputProcessors: {
        name: string;
    }[];
    provider?: string | undefined;
    modelId?: string | undefined;
    modelVersion?: string | undefined;
    modelList?: {
        id: string;
        maxRetries: number;
        enabled: boolean;
        model: {
            modelId: string;
            provider: string;
            modelVersion: string;
        };
    }[] | undefined;
    defaultGenerateOptions?: {
        [x: string]: never;
    } | undefined;
    defaultStreamOptions?: {
        [x: string]: never;
    } | undefined;
}, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function getEvalsByAgentIdHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    id: string;
    name: any;
    instructions: string | string[] | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
        experimental_providerMetadata?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    } | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    } | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
        experimental_providerMetadata?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    }[] | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    }[];
    evals: {
        input: string;
        output: string;
        result: {
            score: number;
            info?: {
                [x: string]: any;
            } | undefined;
        };
        agentName: string;
        createdAt: string;
        metricName: string;
        instructions: string;
        runId: string;
        globalRunId: string;
        testInfo?: {
            testName?: string | undefined;
            testPath?: string | undefined;
        } | undefined;
    }[];
}, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function getLiveEvalsByAgentIdHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    id: string;
    name: any;
    instructions: string | string[] | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
        experimental_providerMetadata?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    } | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    } | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
        experimental_providerMetadata?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    }[] | {
        role: "system";
        content: string;
        providerOptions?: {
            [x: string]: {
                [x: string]: any;
            };
        } | undefined;
    }[];
    evals: {
        input: string;
        output: string;
        result: {
            score: number;
            info?: {
                [x: string]: any;
            } | undefined;
        };
        agentName: string;
        createdAt: string;
        metricName: string;
        instructions: string;
        runId: string;
        globalRunId: string;
        testInfo?: {
            testName?: string | undefined;
            testPath?: string | undefined;
        } | undefined;
    }[];
}, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function generateLegacyHandler(c: Context): Promise<Response>;
export declare function generateHandler(c: Context): Promise<Response>;
export declare function streamGenerateLegacyHandler(c: Context): Promise<Response | undefined>;
export declare function streamGenerateHandler(c: Context): Promise<Response | undefined>;
export declare function approveToolCallHandler(c: Context): Promise<Response | undefined>;
export declare function declineToolCallHandler(c: Context): Promise<Response | undefined>;
export declare function streamNetworkHandler(c: Context): Promise<Response>;
export declare function streamUIMessageHandler(c: Context): Promise<Response | undefined>;
export declare function setAgentInstructionsHandler(c: Context): Promise<Response>;
export declare function updateAgentModelHandler(c: Context): Promise<Response>;
export declare function deprecatedStreamVNextHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    error: string;
    message: string;
    deprecated_endpoint: string;
    replacement_endpoint: string;
}, 410, "json">>;
export declare function getModelProvidersHandler(c: Context): Promise<(Response & import("hono").TypedResponse<{
    error: string;
}, 403, "json">) | (Response & import("hono").TypedResponse<{
    id: string;
    name: string;
    envVar: string;
    hasApiKey: boolean;
    docUrl: string | null;
    models: string[];
}[], import("hono/utils/http-status").ContentfulStatusCode, "json">)>;
export declare function updateAgentModelInModelListHandler(c: Context): Promise<Response>;
export declare function reorderAgentModelListHandler(c: Context): Promise<Response>;
//# sourceMappingURL=handlers.d.ts.map