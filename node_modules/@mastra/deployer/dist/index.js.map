{"version":3,"sources":["../src/deploy/base.ts","../src/build/babel/remove-all-options-deployer.ts","../src/build/deployer.ts"],"names":[],"mappings":";;;;;;AAMO,IAAe,QAAA,GAAf,cAAgC,OAAA,CAA6B;AAAA,EAClE,IAAA,GAAoB,IAAI,WAAA,EAAY;AAAA,EAEpC,YAAY,IAAA,EAAwB;AAClC,IAAA,KAAA,CAAM,IAAA,CAAK,MAAM,UAAU,CAAA;AAE3B,IAAA,IAAA,CAAK,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,MAAM,CAAA;AAAA,EACnC;AAAA,EAEA,WAAA,GAAiC;AAC/B,IAAA,MAAM,aAAA,GAAgB,CAAC,iBAAA,EAAmB,YAAA,EAAc,MAAM,CAAA;AAE9D,IAAA,IAAI;AACF,MAAA,MAAM,WAAA,GAAc,IAAI,WAAA,EAAY;AACpC,MAAA,MAAM,OAAA,GAAU,WAAA,CAAY,oBAAA,CAAqB,aAAa,CAAA;AAE9D,MAAA,OAAO,OAAA,CAAQ,OAAA,CAAQ,CAAC,OAAO,CAAC,CAAA;AAAA,IAClC,CAAA,CAAA,MAAQ;AAAA,IAAC;AAET,IAAA,OAAO,OAAA,CAAQ,OAAA,CAAQ,EAAE,CAAA;AAAA,EAC3B;AAGF;;;AC1BO,SAAS,8BAAA,CAA+B,QAAsC,MAAA,EAAwB;AAC3G,EAAA,OAAO,gCAAA,CAAiC,MAAA,EAAQ,UAAA,EAAY,MAAM,CAAA;AACpE;;;ACSA,eAAsB,WAAA,CACpB,SAAA,EACA,SAAA,EACA,MAAA,EACoC;AACpC,EAAA,MAAM,SAAS,MAAM,mBAAA;AAAA,IACnB,UAAA;AAAA,IACA,SAAA;AAAA,IACA,8BAAA;AAAA,IACA,SAAA;AAAA,IACA;AAAA,GACF;AACA,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,OAAO,OAAO,SAAA,EAAU;AAC1B","file":"index.js","sourcesContent":["import type { IDeployer } from '@mastra/core/deployer';\n\nimport { Bundler } from '../bundler';\nimport { DepsService } from '../services/deps.js';\nimport { FileService } from '../services/fs.js';\n\nexport abstract class Deployer extends Bundler implements IDeployer {\n  deps: DepsService = new DepsService();\n\n  constructor(args: { name: string }) {\n    super(args.name, 'DEPLOYER');\n\n    this.deps.__setLogger(this.logger);\n  }\n\n  getEnvFiles(): Promise<string[]> {\n    const possibleFiles = ['.env.production', '.env.local', '.env'];\n\n    try {\n      const fileService = new FileService();\n      const envFile = fileService.getFirstExistingFile(possibleFiles);\n\n      return Promise.resolve([envFile]);\n    } catch {}\n\n    return Promise.resolve([]);\n  }\n\n  abstract deploy(outputDirectory: string): Promise<void>;\n}\n","import { removeAllOptionsFromMastraExcept } from './remove-all-options-except';\nimport type { IMastraLogger } from '@mastra/core/logger';\n\nexport function removeAllOptionsExceptDeployer(result: { hasCustomConfig: boolean }, logger?: IMastraLogger) {\n  return removeAllOptionsFromMastraExcept(result, 'deployer', logger);\n}\n","import { removeAllOptionsExceptDeployer } from './babel/remove-all-options-deployer';\nimport type { Config } from '@mastra/core/mastra';\nimport { extractMastraOption, extractMastraOptionBundler } from './shared/extract-mastra-option';\nimport type { IMastraLogger } from '@mastra/core/logger';\n\nexport function getDeployerBundler(\n  entryFile: string,\n  result: {\n    hasCustomConfig: false;\n  },\n) {\n  return extractMastraOptionBundler('deployer', entryFile, removeAllOptionsExceptDeployer, result);\n}\n\nexport async function getDeployer(\n  entryFile: string,\n  outputDir: string,\n  logger?: IMastraLogger,\n): Promise<Config['deployer'] | null> {\n  const result = await extractMastraOption<Config['deployer']>(\n    'deployer',\n    entryFile,\n    removeAllOptionsExceptDeployer,\n    outputDir,\n    logger,\n  );\n  if (!result) {\n    return null;\n  }\n\n  return result.getConfig();\n}\n"]}