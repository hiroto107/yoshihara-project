export declare function upsertMastraDir({ dir }: {
    dir?: string;
}): void;
/**
 * Get the package name from a module ID
 */
export declare function getPackageName(id: string): string | undefined;
/**
 * Get package root path
 */
export declare function getPackageRootPath(packageName: string, parentPath?: string): Promise<string | null>;
/**
 * During `mastra dev` we are compiling TS files to JS (inside workspaces) so that users can just their workspace packages.
 * We store these compiled files inside `node_modules/.cache` for each workspace package.
 */
export declare function getCompiledDepCachePath(rootPath: string, packageName: string): string;
/**
 * Convert windows backslashes to posix slashes
 *
 * @example
 * ```ts
 * slash('C:\\Users\\user\\code\\mastra') // 'C:/Users/user/code/mastra'
 * ```
 */
export declare function slash(path: string): string;
/**
 * Make a Rollup-safe name: pathless, POSIX, and without parent/absolute segments
 */
export declare function rollupSafeName(name: string, rootDir: string): string;
/**
 * Finds the first real package from node_modules that likely contains native bindings, filtering out virtual modules and native binding loader infrastructure.
 *
 * @param moduleIds - Array of module IDs from a Rollup chunk
 * @returns The module ID of the actual native package, or undefined if not found
 *
 * @example
 * const moduleIds = [
 *   '\x00/path/node_modules/bcrypt/bcrypt.js?commonjs-module',
 *   '/path/node_modules/node-gyp-build/index.js',
 *   '/path/node_modules/bcrypt/bcrypt.js',
 * ];
 * findNativePackageModule(moduleIds); // Returns '/path/node_modules/bcrypt/bcrypt.js'
 */
export declare function findNativePackageModule(moduleIds: string[]): string | undefined;
//# sourceMappingURL=utils.d.ts.map