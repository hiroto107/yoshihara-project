{"version":3,"sources":["../src/build/bundler.ts"],"names":["nodeResolve","slash","join","pathToFileURL","alias","fileURLToPath","tsConfigPaths","esbuild","optimizeLodashImports","commonjs","esmShim","json","removeDeployer","rollup"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAeA,eAAsB,eAAA,CACpB,SAAA,EACA,kBAAA,EACA,QAAA,EACA,GAAA,GAA8B,EAAE,sBAAA,EAAwB,IAAA,CAAK,SAAA,CAAU,YAAY,CAAA,EAAE,EACrF;AAAA,EACE,SAAA,GAAY,KAAA;AAAA,EACZ,KAAA,GAAQ,KAAA;AAAA,EACR,WAAA;AAAA,EACA,aAAA,GAAgB,MAAA;AAAA,EAChB,aAAA,GAAgB;AAClB,CAAA,EAOuB;AACvB,EAAA,IAAI,iBAAA,GACF,QAAA,KAAa,MAAA,GACTA,4BAAA,CAAY;AAAA,IACV,cAAA,EAAgB,IAAA;AAAA,IAChB,gBAAA,EAAkB,CAAC,MAAM;AAAA,GAC1B,IACDA,4BAAA,CAAY;AAAA,IACV,cAAA,EAAgB,KAAA;AAAA,IAChB,OAAA,EAAS;AAAA,GACV,CAAA;AAEP,EAAA,MAAM,aAAA,uBAAoB,GAAA,EAAY;AAEtC,EAAA,KAAA,MAAW,QAAA,IAAY,mBAAmB,oBAAA,EAAsB;AAC9D,IAAA,IAAI,QAAA,CAAS,UAAA,CAAW,GAAG,CAAA,EAAG;AAC5B,MAAA,MAAM,CAAC,KAAA,EAAO,IAAI,IAAI,QAAA,CAAS,KAAA,CAAM,KAAK,CAAC,CAAA;AAC3C,MAAA,aAAA,CAAc,GAAA,CAAI,CAAA,EAAG,KAAK,CAAA,CAAA,EAAI,IAAI,CAAA,CAAE,CAAA;AACpC,MAAA,aAAA,CAAc,GAAA,CAAI,CAAA,EAAG,KAAK,CAAA,CAAA,EAAI,IAAI,CAAA,EAAA,CAAI,CAAA;AAAA,IACxC,CAAA,MAAO;AACL,MAAA,aAAA,CAAc,IAAI,QAAQ,CAAA;AAC1B,MAAA,aAAA,CAAc,GAAA,CAAI,CAAA,EAAG,QAAQ,CAAA,EAAA,CAAI,CAAA;AAAA,IACnC;AAAA,EACF;AAEA,EAAA,MAAM,SAAA,GAAY,KAAA,CAAM,IAAA,CAAK,aAAa,CAAA;AAE1C,EAAA,MAAM,mBAAA,GAAsBC,wBAAM,SAAS,CAAA;AAC3C,EAAA,OAAO;AAAA,IACL,QAAA,EAAU,OAAA,CAAQ,GAAA,CAAI,oBAAA,KAAyB,SAAS,OAAA,GAAU,QAAA;AAAA,IAClE,SAAA,EAAW,UAAA;AAAA,IACX,gBAAA,EAAkB,IAAA;AAAA,IAClB,QAAA,EAAU,SAAA;AAAA,IACV,OAAA,EAAS;AAAA,MACP;AAAA,QACE,IAAA,EAAM,sBAAA;AAAA,QACN,UAAU,EAAA,EAAY;AACpB,UAAA,IAAI,CAAC,kBAAA,CAAmB,YAAA,CAAa,GAAA,CAAI,EAAE,CAAA,EAAG;AAC5C,YAAA,OAAO,IAAA;AAAA,UACT;AAEA,UAAA,MAAM,QAAA,GAAW,kBAAA,CAAmB,YAAA,CAAa,GAAA,CAAI,EAAE,CAAA;AACvD,UAAA,MAAM,YAAA,GAAeC,SAAA,CAAK,aAAA,IAAiB,WAAA,EAAa,QAAQ,CAAA;AAGhE,UAAA,IAAI,KAAA,EAAO;AACT,YAAA,OAAO;AAAA,cACL,IAAI,OAAA,CAAQ,QAAA,KAAa,UAAUC,iBAAA,CAAc,YAAY,EAAE,IAAA,GAAO,YAAA;AAAA,cACtE,QAAA,EAAU;AAAA,aACZ;AAAA,UACF;AAGA,UAAA,OAAO;AAAA,YACL,EAAA,EAAI,YAAA;AAAA,YACJ,QAAA,EAAU;AAAA,WACZ;AAAA,QACF;AAAA,OACF;AAAA,MACAC,sBAAA,CAAM;AAAA,QACJ,OAAA,EAAS;AAAA,UACP;AAAA,YACE,IAAA,EAAM,YAAA;AAAA,YACN,aAAaH,uBAAA,CAAMI,iBAAA,CAAc,SAAY,CAAQ,yBAAyB,CAAC,CAAC;AAAA,WAClF;AAAA,UACA;AAAA,YACE,IAAA,EAAM,yBAAA;AAAA,YACN,WAAA,EAAa,CAAA,iBAAA,CAAA;AAAA,YACb,gBAAgB,CAAA,EAAA,KAAM;AACpB,cAAA,IAAI,EAAA,CAAG,UAAA,CAAW,gBAAgB,CAAA,EAAG;AACnC,gBAAA,OAAO;AAAA,kBACL,EAAA,EAAIA,iBAAA,CAAc,SAAY,CAAQ,EAAE,CAAC;AAAA,iBAC3C;AAAA,cACF;AAAA,YACF;AAAA,WACF;AAAA,UACA,EAAE,IAAA,EAAM,YAAA,EAAc,WAAA,EAAa,mBAAA;AAAoB;AACzD,OACD,CAAA;AAAA,MACDC,+BAAA,EAAc;AAAA,MACd;AAAA,QACE,IAAA,EAAM,gBAAA;AAAA,QACN,UAAU,EAAA,EAAY;AACpB,UAAA,IAAI,OAAO,QAAA,EAAU;AACnB,YAAA,OAAO;AAAA,cACL,EAAA,EAAI,aAAA;AAAA,cACJ,QAAA,EAAU;AAAA,aACZ;AAAA,UACF;AAAA,QACF;AAAA,OACF;AAAA,MACAC,yBAAA,CAAQ;AAAA,QACN,QAAA;AAAA,QACA,MAAA,EAAQ;AAAA,OACT,CAAA;AAAA,MACDC,kCAAA,CAAsB;AAAA,QACpB,OAAA,EAAS;AAAA,OACV,CAAA;AAAA,MACDC,yBAAA,CAAS;AAAA,QACP,UAAA,EAAY,CAAC,KAAA,EAAO,KAAK,CAAA;AAAA,QACzB,uBAAA,EAAyB,IAAA;AAAA,QACzB,aAAa,EAAA,EAAI;AACf,UAAA,OAAO,SAAA,CAAU,SAAS,EAAE,CAAA;AAAA,QAC9B;AAAA,OACD,CAAA;AAAA,MACD,aAAA,GAAgBC,0BAAQ,GAAI,MAAA;AAAA,MAC5B,iBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeAC,qBAAA,EAAK;AAAA,MACLC,gCAAA,CAAe,SAAA,EAAW,EAAE,SAAA,EAAW,CAAA;AAAA;AAAA,MAEvCL,yBAAA,CAAQ;AAAA,QACN,OAAA,EAAS,SAAA;AAAA,QACT;AAAA,OACD;AAAA,KACH,CAAE,OAAO,OAAO;AAAA,GAClB;AACF;AAEA,eAAsB,aAAA,CACpB,cACA,aAAA,EACA;AACA,EAAA,MAAM,OAAA,GAAU,MAAMM,aAAA,CAAO,YAAY,CAAA;AAEzC,EAAA,OAAO;AAAA,IACL,OAAO,MAAM;AACX,MAAA,OAAO,QAAQ,KAAA,CAAM;AAAA,QACnB,GAAG,aAAA;AAAA,QACH,MAAA,EAAQ,KAAA;AAAA,QACR,cAAA,EAAgB,YAAA;AAAA,QAChB,cAAA,EAAgB;AAAA,OACjB,CAAA;AAAA,IACH,CAAA;AAAA,IACA,OAAO,MAAM;AACX,MAAA,OAAO,QAAQ,KAAA,EAAM;AAAA,IACvB;AAAA,GACF;AACF","file":"chunk-XEG6MMZC.cjs","sourcesContent":["import alias from '@rollup/plugin-alias';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport nodeResolve from '@rollup/plugin-node-resolve';\nimport esmShim from '@rollup/plugin-esm-shim';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { rollup, type InputOptions, type OutputOptions, type Plugin } from 'rollup';\nimport { esbuild } from './plugins/esbuild';\nimport { optimizeLodashImports } from '@optimize-lodash/rollup-plugin';\nimport { analyzeBundle } from './analyze';\nimport { removeDeployer } from './plugins/remove-deployer';\nimport { tsConfigPaths } from './plugins/tsconfig-paths';\nimport { join } from 'node:path';\nimport { slash } from './utils';\n\nexport async function getInputOptions(\n  entryFile: string,\n  analyzedBundleInfo: Awaited<ReturnType<typeof analyzeBundle>>,\n  platform: 'node' | 'browser',\n  env: Record<string, string> = { 'process.env.NODE_ENV': JSON.stringify('production') },\n  {\n    sourcemap = false,\n    isDev = false,\n    projectRoot,\n    workspaceRoot = undefined,\n    enableEsmShim = true,\n  }: {\n    sourcemap?: boolean;\n    isDev?: boolean;\n    workspaceRoot?: string;\n    projectRoot: string;\n    enableEsmShim?: boolean;\n  },\n): Promise<InputOptions> {\n  let nodeResolvePlugin =\n    platform === 'node'\n      ? nodeResolve({\n          preferBuiltins: true,\n          exportConditions: ['node'],\n        })\n      : nodeResolve({\n          preferBuiltins: false,\n          browser: true,\n        });\n\n  const externalsCopy = new Set<string>();\n  // make all nested imports external from the same package\n  for (const external of analyzedBundleInfo.externalDependencies) {\n    if (external.startsWith('@')) {\n      const [scope, name] = external.split('/', 3);\n      externalsCopy.add(`${scope}/${name}`);\n      externalsCopy.add(`${scope}/${name}/*`);\n    } else {\n      externalsCopy.add(external);\n      externalsCopy.add(`${external}/*`);\n    }\n  }\n\n  const externals = Array.from(externalsCopy);\n\n  const normalizedEntryFile = slash(entryFile);\n  return {\n    logLevel: process.env.MASTRA_BUNDLER_DEBUG === 'true' ? 'debug' : 'silent',\n    treeshake: 'smallest',\n    preserveSymlinks: true,\n    external: externals,\n    plugins: [\n      {\n        name: 'alias-optimized-deps',\n        resolveId(id: string) {\n          if (!analyzedBundleInfo.dependencies.has(id)) {\n            return null;\n          }\n\n          const filename = analyzedBundleInfo.dependencies.get(id)!;\n          const absolutePath = join(workspaceRoot || projectRoot, filename);\n\n          // During `mastra dev` we want to keep deps as external\n          if (isDev) {\n            return {\n              id: process.platform === 'win32' ? pathToFileURL(absolutePath).href : absolutePath,\n              external: true,\n            };\n          }\n\n          // For production builds return the absolute path as-is so Rollup can handle itself\n          return {\n            id: absolutePath,\n            external: false,\n          };\n        },\n      } satisfies Plugin,\n      alias({\n        entries: [\n          {\n            find: /^\\#server$/,\n            replacement: slash(fileURLToPath(import.meta.resolve('@mastra/deployer/server'))),\n          },\n          {\n            find: /^\\@mastra\\/server\\/(.*)/,\n            replacement: `@mastra/server/$1`,\n            customResolver: id => {\n              if (id.startsWith('@mastra/server')) {\n                return {\n                  id: fileURLToPath(import.meta.resolve(id)),\n                };\n              }\n            },\n          },\n          { find: /^\\#mastra$/, replacement: normalizedEntryFile },\n        ],\n      }),\n      tsConfigPaths(),\n      {\n        name: 'tools-rewriter',\n        resolveId(id: string) {\n          if (id === '#tools') {\n            return {\n              id: './tools.mjs',\n              external: true,\n            };\n          }\n        },\n      } satisfies Plugin,\n      esbuild({\n        platform,\n        define: env,\n      }),\n      optimizeLodashImports({\n        include: '**/*.{js,ts,mjs,cjs}',\n      }),\n      commonjs({\n        extensions: ['.js', '.ts'],\n        transformMixedEsModules: true,\n        esmExternals(id) {\n          return externals.includes(id);\n        },\n      }),\n      enableEsmShim ? esmShim() : undefined,\n      nodeResolvePlugin,\n      // for debugging\n      // {\n      //   name: 'logger',\n      //   //@ts-ignore\n      //   resolveId(id, ...args) {\n      //     console.log({ id, args });\n      //   },\n      //   // @ts-ignore\n      // transform(code, id) {\n      //   if (code.includes('class Duplexify ')) {\n      //     console.log({ duplex: id });\n      //   }\n      // },\n      // },\n      json(),\n      removeDeployer(entryFile, { sourcemap }),\n      // treeshake unused imports\n      esbuild({\n        include: entryFile,\n        platform,\n      }),\n    ].filter(Boolean),\n  } satisfies InputOptions;\n}\n\nexport async function createBundler(\n  inputOptions: InputOptions,\n  outputOptions: Partial<OutputOptions> & { dir: string },\n) {\n  const bundler = await rollup(inputOptions);\n\n  return {\n    write: () => {\n      return bundler.write({\n        ...outputOptions,\n        format: 'esm',\n        entryFileNames: '[name].mjs',\n        chunkFileNames: '[name].mjs',\n      });\n    },\n    close: () => {\n      return bundler.close();\n    },\n  };\n}\n"]}