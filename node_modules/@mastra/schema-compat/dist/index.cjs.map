{"version":3,"sources":["../src/utils.ts","../src/schema-compatibility-v3.ts","../src/schema-compatibility-v4.ts","../src/schema-compatibility.ts","../src/zodTypes.ts","../src/provider-compats/anthropic.ts","../src/provider-compats/deepseek.ts","../src/provider-compats/google.ts","../src/provider-compats/meta.ts","../src/provider-compats/openai.ts","../src/provider-compats/openai-reasoning.ts"],"names":["zodToJsonSchema","jsonSchema","z","convertJsonSchemaToZod","convertJsonSchemaToZodV3","ZodOptional","ZodObject","ZodArray","ZodUnion","ZodString","ZodNumber","ZodNull","ZodDate","ZodDefault","ALL_STRING_CHECKS","ALL_NUMBER_CHECKS","ALL_ARRAY_CHECKS","UNSUPPORTED_ZOD_TYPES","SUPPORTED_ZOD_TYPES","SchemaCompatLayer","isOptional","isObj","isArr","isUnion","isString","isNumber"],"mappings":"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","file":"index.cjs","sourcesContent":["import { jsonSchema } from 'ai';\nimport type { Schema } from 'ai';\nimport type { JSONSchema7 } from 'json-schema';\nimport { z } from 'zod';\nimport type { ZodSchema as ZodSchemaV3, ZodType as ZodTypeV3 } from 'zod/v3';\nimport type { ZodType as ZodSchemaV4, ZodType as ZodTypeV4 } from 'zod/v4';\nimport { convertJsonSchemaToZod } from 'zod-from-json-schema';\nimport { convertJsonSchemaToZod as convertJsonSchemaToZodV3 } from 'zod-from-json-schema-v3';\nimport type { JSONSchema } from 'zod-from-json-schema-v3';\nimport type { Targets } from 'zod-to-json-schema';\nimport type { SchemaCompatLayer } from './schema-compatibility';\nimport { zodToJsonSchema } from './zod-to-json';\n\ntype ZodSchema = ZodSchemaV3 | ZodSchemaV4;\ntype ZodType = ZodTypeV3 | ZodTypeV4;\n\n/**\n * Converts a Zod schema to an AI SDK Schema with validation support.\n *\n * This function mirrors the behavior of Vercel's AI SDK zod-schema utility but allows\n * customization of the JSON Schema target format.\n *\n * @param zodSchema - The Zod schema to convert\n * @param target - The JSON Schema target format (defaults to 'jsonSchema7')\n * @returns An AI SDK Schema object with built-in validation\n *\n * @example\n * ```typescript\n * import { z } from 'zod';\n * import { convertZodSchemaToAISDKSchema } from '@mastra/schema-compat';\n *\n * const userSchema = z.object({\n *   name: z.string(),\n *   age: z.number().min(0)\n * });\n *\n * const aiSchema = convertZodSchemaToAISDKSchema(userSchema);\n * ```\n */\n// mirrors https://github.com/vercel/ai/blob/main/packages/ui-utils/src/zod-schema.ts#L21 but with a custom target\nexport function convertZodSchemaToAISDKSchema(zodSchema: ZodSchema, target: Targets = 'jsonSchema7') {\n  const jsonSchemaToUse = zodToJsonSchema(zodSchema, target) as JSONSchema7;\n\n  return jsonSchema(jsonSchemaToUse, {\n    validate: value => {\n      const result = zodSchema.safeParse(value);\n      return result.success ? { success: true, value: result.data } : { success: false, error: result.error };\n    },\n  });\n}\n\n/**\n * Checks if a value is a Zod type by examining its properties and methods.\n *\n * @param value - The value to check\n * @returns True if the value is a Zod type, false otherwise\n * @internal\n */\nexport function isZodType(value: unknown): value is ZodType {\n  // Check if it's a Zod schema by looking for common Zod properties and methods\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    '_def' in value &&\n    'parse' in value &&\n    typeof (value as any).parse === 'function' &&\n    'safeParse' in value &&\n    typeof (value as any).safeParse === 'function'\n  );\n}\n\n/**\n * Converts an AI SDK Schema or Zod schema to a Zod schema.\n *\n * If the input is already a Zod schema, it returns it unchanged.\n * If the input is an AI SDK Schema, it extracts the JSON schema and converts it to Zod.\n *\n * @param schema - The schema to convert (AI SDK Schema or Zod schema)\n * @returns A Zod schema equivalent of the input\n * @throws Error if the conversion fails\n *\n * @example\n * ```typescript\n * import { jsonSchema } from 'ai';\n * import { convertSchemaToZod } from '@mastra/schema-compat';\n *\n * const aiSchema = jsonSchema({\n *   type: 'object',\n *   properties: {\n *     name: { type: 'string' }\n *   }\n * });\n *\n * const zodSchema = convertSchemaToZod(aiSchema);\n * ```\n */\nexport function convertSchemaToZod(schema: Schema | ZodSchema): ZodType {\n  if (isZodType(schema)) {\n    return schema;\n  } else {\n    const jsonSchemaToConvert = ('jsonSchema' in schema ? schema.jsonSchema : schema) as JSONSchema;\n    try {\n      if ('toJSONSchema' in z) {\n        // @ts-expect-error - zod type issue\n        return convertJsonSchemaToZod(jsonSchemaToConvert);\n      } else {\n        return convertJsonSchemaToZodV3(jsonSchemaToConvert);\n      }\n    } catch (e: unknown) {\n      const errorMessage = `[Schema Builder] Failed to convert schema parameters to Zod. Original schema: ${JSON.stringify(jsonSchemaToConvert)}`;\n      console.error(errorMessage, e);\n      throw new Error(errorMessage + (e instanceof Error ? `\\n${e.stack}` : '\\nUnknown error object'));\n    }\n  }\n}\n\n/**\n * Processes a schema using provider compatibility layers and converts it to an AI SDK Schema.\n *\n * @param options - Configuration object for schema processing\n * @param options.schema - The schema to process (AI SDK Schema or Zod object schema)\n * @param options.compatLayers - Array of compatibility layers to try\n * @param options.mode - Must be 'aiSdkSchema'\n * @returns Processed schema as an AI SDK Schema\n */\nexport function applyCompatLayer(options: {\n  schema: Schema | ZodSchema;\n  compatLayers: SchemaCompatLayer[];\n  mode: 'aiSdkSchema';\n}): Schema;\n\n/**\n * Processes a schema using provider compatibility layers and converts it to a JSON Schema.\n *\n * @param options - Configuration object for schema processing\n * @param options.schema - The schema to process (AI SDK Schema or Zod object schema)\n * @param options.compatLayers - Array of compatibility layers to try\n * @param options.mode - Must be 'jsonSchema'\n * @returns Processed schema as a JSONSchema7\n */\nexport function applyCompatLayer(options: {\n  schema: Schema | ZodSchema;\n  compatLayers: SchemaCompatLayer[];\n  mode: 'jsonSchema';\n}): JSONSchema7;\n\n/**\n * Processes a schema using provider compatibility layers and converts it to the specified format.\n *\n * This function automatically applies the first matching compatibility layer from the provided\n * list based on the model configuration. If no compatibility applies, it falls back to\n * standard conversion.\n *\n * @param options - Configuration object for schema processing\n * @param options.schema - The schema to process (AI SDK Schema or Zod object schema)\n * @param options.compatLayers - Array of compatibility layers to try\n * @param options.mode - Output format: 'jsonSchema' for JSONSchema7 or 'aiSdkSchema' for AI SDK Schema\n * @returns Processed schema in the requested format\n *\n * @example\n * ```typescript\n * import { z } from 'zod';\n * import { applyCompatLayer, OpenAISchemaCompatLayer, AnthropicSchemaCompatLayer } from '@mastra/schema-compat';\n *\n * const schema = z.object({\n *   query: z.string().email(),\n *   limit: z.number().min(1).max(100)\n * });\n *\n * const compatLayers = [\n *   new OpenAISchemaCompatLayer(model),\n *   new AnthropicSchemaCompatLayer(model)\n * ];\n *\n * const result = applyCompatLayer({\n *   schema,\n *   compatLayers,\n *   mode: 'aiSdkSchema'\n * });\n * ```\n */\nexport function applyCompatLayer({\n  schema,\n  compatLayers,\n  mode,\n}: {\n  schema: Schema | ZodSchema;\n  compatLayers: SchemaCompatLayer[];\n  mode: 'jsonSchema' | 'aiSdkSchema';\n}): JSONSchema7 | Schema {\n  let zodSchema: ZodSchema;\n\n  if (!isZodType(schema)) {\n    // Convert non-zod schema to Zod\n    zodSchema = convertSchemaToZod(schema);\n  } else {\n    zodSchema = schema;\n  }\n\n  for (const compat of compatLayers) {\n    if (compat.shouldApply()) {\n      return mode === 'jsonSchema' ? compat.processToJSONSchema(zodSchema) : compat.processToAISDKSchema(zodSchema);\n    }\n  }\n  // If no compatibility applied, convert back to appropriate format\n  if (mode === 'jsonSchema') {\n    return zodToJsonSchema(zodSchema, 'jsonSchema7') as JSONSchema7;\n  } else {\n    return convertZodSchemaToAISDKSchema(zodSchema);\n  }\n}\n","import type { Schema } from 'ai';\nimport type { JSONSchema7 } from 'json-schema';\nimport { z, ZodOptional, ZodObject, ZodArray, ZodUnion, ZodString, ZodNumber, ZodDate, ZodDefault, ZodNull } from 'zod';\nimport type { ZodTypeAny } from 'zod';\nimport type { Targets } from 'zod-to-json-schema';\nimport type { SchemaCompatLayer as ParentSchemaCompatLayer } from './schema-compatibility';\nimport type { ModelInformation } from './types';\nimport { convertZodSchemaToAISDKSchema } from './utils';\n\n/**\n * All supported string validation check types that can be processed or converted to descriptions.\n * @constant\n */\nexport const ALL_STRING_CHECKS = ['regex', 'emoji', 'email', 'url', 'uuid', 'cuid', 'min', 'max'] as const;\n\n/**\n * All supported number validation check types that can be processed or converted to descriptions.\n * @constant\n */\nexport const ALL_NUMBER_CHECKS = [\n  'min', // gte internally\n  'max', // lte internally\n  'multipleOf',\n] as const;\n\n/**\n * All supported array validation check types that can be processed or converted to descriptions.\n * @constant\n */\nexport const ALL_ARRAY_CHECKS = ['min', 'max', 'length'] as const;\n\nexport const isOptional = (v: ZodTypeAny): v is ZodOptional<any> => v instanceof ZodOptional;\nexport const isObj = (v: ZodTypeAny): v is ZodObject<any, any, any> => v instanceof ZodObject;\nexport const isNull = (v: ZodTypeAny): v is ZodNull => v instanceof ZodNull;\nexport const isArr = (v: ZodTypeAny): v is ZodArray<any, any> => v instanceof ZodArray;\nexport const isUnion = (v: ZodTypeAny): v is ZodUnion<[ZodTypeAny, ...ZodTypeAny[]]> => v instanceof ZodUnion;\nexport const isString = (v: ZodTypeAny): v is ZodString => v instanceof ZodString;\nexport const isNumber = (v: ZodTypeAny): v is ZodNumber => v instanceof ZodNumber;\nexport const isDate = (v: ZodTypeAny): v is ZodDate => v instanceof ZodDate;\nexport const isDefault = (v: ZodTypeAny): v is ZodDefault<any> => v instanceof ZodDefault;\n\n/**\n * Zod types that are not supported by most AI model providers and should be avoided.\n * @constant\n */\nexport const UNSUPPORTED_ZOD_TYPES = ['ZodIntersection', 'ZodNever', 'ZodNull', 'ZodTuple', 'ZodUndefined'] as const;\n\n/**\n * Zod types that are generally supported by AI model providers.\n * @constant\n */\nexport const SUPPORTED_ZOD_TYPES = [\n  'ZodObject',\n  'ZodArray',\n  'ZodUnion',\n  'ZodString',\n  'ZodNumber',\n  'ZodDate',\n  'ZodAny',\n  'ZodDefault',\n] as const;\n\n/**\n * All Zod types (both supported and unsupported).\n * @constant\n */\nexport const ALL_ZOD_TYPES = [...SUPPORTED_ZOD_TYPES, ...UNSUPPORTED_ZOD_TYPES] as const;\n\n/**\n * Type representing string validation checks.\n */\nexport type StringCheckType = (typeof ALL_STRING_CHECKS)[number];\n\n/**\n * Type representing number validation checks.\n */\nexport type NumberCheckType = (typeof ALL_NUMBER_CHECKS)[number];\n\n/**\n * Type representing array validation checks.\n */\nexport type ArrayCheckType = (typeof ALL_ARRAY_CHECKS)[number];\n\n/**\n * Type representing unsupported Zod schema types.\n */\nexport type UnsupportedZodType = (typeof UNSUPPORTED_ZOD_TYPES)[number];\n\n/**\n * Type representing supported Zod schema types.\n */\nexport type SupportedZodType = (typeof SUPPORTED_ZOD_TYPES)[number];\n\n/**\n * Type representing all Zod schema types (supported and unsupported).\n */\nexport type AllZodType = (typeof ALL_ZOD_TYPES)[number];\n\n/**\n * Utility type to extract the shape of a Zod object schema.\n */\nexport type ZodShape<T extends z.AnyZodObject> = T['shape'];\n\n/**\n * Utility type to extract the keys from a Zod object shape.\n */\nexport type ShapeKey<T extends z.AnyZodObject> = keyof ZodShape<T>;\n\n/**\n * Utility type to extract the value types from a Zod object shape.\n */\nexport type ShapeValue<T extends z.AnyZodObject> = ZodShape<T>[ShapeKey<T>];\n\n// Add constraint types at the top\n\ntype StringConstraints = {\n  minLength?: number;\n  maxLength?: number;\n  email?: boolean;\n  url?: boolean;\n  uuid?: boolean;\n  cuid?: boolean;\n  emoji?: boolean;\n  regex?: { pattern: string; flags?: string };\n};\n\ntype NumberConstraints = {\n  gt?: number;\n  gte?: number;\n  lt?: number;\n  lte?: number;\n  multipleOf?: number;\n};\n\ntype ArrayConstraints = {\n  minLength?: number;\n  maxLength?: number;\n  exactLength?: number;\n};\n\ntype DateConstraints = {\n  minDate?: string;\n  maxDate?: string;\n  dateFormat?: string;\n};\n\n/**\n * Abstract base class for creating schema compatibility layers for different AI model providers.\n *\n * This class provides a framework for transforming Zod schemas to work with specific AI model\n * provider requirements and limitations. Each provider may have different support levels for\n * JSON Schema features, validation constraints, and data types.\n *\n *\n * @example\n * ```typescript\n * import { SchemaCompatLayer } from '@mastra/schema-compat';\n * import type { LanguageModelV1 } from 'ai';\n *\n * class CustomProviderCompat extends SchemaCompatLayer {\n *   constructor(model: ModelInformation) {\n *     super(model);\n *   }\n *\n *   shouldApply(): boolean {\n *     return this.getModel().provider === 'custom-provider';\n *   }\n *\n *   getSchemaTarget() {\n *     return 'jsonSchema7';\n *   }\n *\n *   processZodType<T extends z.AnyZodObject>(value: z.ZodTypeAny): ShapeValue<T> {\n *     // Custom processing logic for this provider\n *     switch (value._def.typeName) {\n *       case 'ZodString':\n *         return this.defaultZodStringHandler(value, ['email', 'url']);\n *       default:\n *         return this.defaultUnsupportedZodTypeHandler(value);\n *     }\n *   }\n * }\n * ```\n */\nexport class SchemaCompatLayer {\n  private model: ModelInformation;\n  private parent: ParentSchemaCompatLayer;\n\n  /**\n   * Creates a new schema compatibility instance.\n   *\n   * @param model - The language model this compatibility layer applies to\n   */\n  constructor(model: ModelInformation, parent: ParentSchemaCompatLayer) {\n    this.model = model;\n    this.parent = parent;\n  }\n\n  /**\n   * Gets the language model associated with this compatibility layer.\n   *\n   * @returns The language model instance\n   */\n  getModel(): ModelInformation {\n    return this.model;\n  }\n\n  getUnsupportedZodTypes(): readonly string[] {\n    return UNSUPPORTED_ZOD_TYPES;\n  }\n\n  /**\n   * Type guard for optional Zod types\n   */\n  isOptional(v: ZodTypeAny): v is ZodOptional<any> {\n    return v instanceof ZodOptional;\n  }\n\n  /**\n   * Type guard for object Zod types\n   */\n  isObj(v: ZodTypeAny): v is ZodObject<any, any, any> {\n    return v instanceof ZodObject;\n  }\n\n  /**\n   * Type guard for null Zod types\n   */\n  isNull(v: ZodTypeAny): v is ZodNull {\n    return v instanceof ZodNull;\n  }\n\n  /**\n   * Type guard for array Zod types\n   */\n  isArr(v: ZodTypeAny): v is ZodArray<any, any> {\n    return v instanceof ZodArray;\n  }\n\n  /**\n   * Type guard for union Zod types\n   */\n  isUnion(v: ZodTypeAny): v is ZodUnion<[ZodTypeAny, ...ZodTypeAny[]]> {\n    return v instanceof ZodUnion;\n  }\n\n  /**\n   * Type guard for string Zod types\n   */\n  isString(v: ZodTypeAny): v is ZodString {\n    return v instanceof ZodString;\n  }\n\n  /**\n   * Type guard for number Zod types\n   */\n  isNumber(v: ZodTypeAny): v is ZodNumber {\n    return v instanceof ZodNumber;\n  }\n\n  /**\n   * Type guard for date Zod types\n   */\n  isDate(v: ZodTypeAny): v is ZodDate {\n    return v instanceof ZodDate;\n  }\n\n  /**\n   * Type guard for default Zod types\n   */\n  isDefault(v: ZodTypeAny): v is ZodDefault<any> {\n    return v instanceof ZodDefault;\n  }\n\n  /**\n   * Determines whether this compatibility layer should be applied for the current model.\n   *\n   * @returns True if this compatibility layer should be used, false otherwise\n   * @abstract\n   */\n  shouldApply(): boolean {\n    return this.parent.shouldApply();\n  }\n\n  /**\n   * Returns the JSON Schema target format for this provider.\n   *\n   * @returns The schema target format, or undefined to use the default 'jsonSchema7'\n   * @abstract\n   */\n  getSchemaTarget(): Targets | undefined {\n    return this.parent.getSchemaTarget();\n  }\n\n  /**\n   * Processes a specific Zod type according to the provider's requirements.\n   *\n   * @param value - The Zod type to process\n   * @returns The processed Zod type\n   * @abstract\n   */\n  processZodType(value: ZodTypeAny): ZodTypeAny {\n    return this.parent.processZodType(value);\n  }\n\n  /**\n   * Default handler for Zod object types. Recursively processes all properties in the object.\n   *\n   * @param value - The Zod object to process\n   * @returns The processed Zod object\n   */\n  public defaultZodObjectHandler(\n    value: ZodObject<any, any, any>,\n    options: { passthrough?: boolean } = { passthrough: true },\n  ): ZodObject<any, any, any> {\n    const processedShape = Object.entries(value.shape).reduce<Record<string, ZodTypeAny>>((acc, [key, propValue]) => {\n      acc[key] = this.processZodType(propValue as ZodTypeAny);\n      return acc;\n    }, {});\n\n    let result: ZodObject<any, any, any> = z.object(processedShape);\n\n    if (value._def.unknownKeys === 'strict') {\n      result = result.strict();\n    }\n    if (value._def.catchall && !(value._def.catchall instanceof z.ZodNever)) {\n      result = result.catchall(value._def.catchall);\n    }\n\n    if (value.description) {\n      result = result.describe(value.description);\n    }\n\n    if (options.passthrough && value._def.unknownKeys === 'passthrough') {\n      result = result.passthrough();\n    }\n\n    return result;\n  }\n\n  /**\n   * Merges validation constraints into a parameter description.\n   *\n   * This helper method converts validation constraints that may not be supported\n   * by a provider into human-readable descriptions.\n   *\n   * @param description - The existing parameter description\n   * @param constraints - The validation constraints to merge\n   * @returns The updated description with constraints, or undefined if no constraints\n   */\n  public mergeParameterDescription(\n    description: string | undefined,\n    constraints:\n      | NumberConstraints\n      | StringConstraints\n      | ArrayConstraints\n      | DateConstraints\n      | { defaultValue?: unknown },\n  ): string | undefined {\n    if (Object.keys(constraints).length > 0) {\n      return (description ? description + '\\n' : '') + JSON.stringify(constraints);\n    } else {\n      return description;\n    }\n  }\n\n  /**\n   * Default handler for unsupported Zod types. Throws an error for specified unsupported types.\n   *\n   * @param value - The Zod type to check\n   * @param throwOnTypes - Array of type names to throw errors for\n   * @returns The original value if not in the throw list\n   * @throws Error if the type is in the unsupported list\n   */\n  public defaultUnsupportedZodTypeHandler<T extends z.AnyZodObject>(\n    value: z.ZodTypeAny,\n    throwOnTypes: readonly UnsupportedZodType[] = UNSUPPORTED_ZOD_TYPES,\n  ): ShapeValue<T> {\n    if (throwOnTypes.includes(value._def?.typeName as UnsupportedZodType)) {\n      throw new Error(`${this.model.modelId} does not support zod type: ${value._def?.typeName}`);\n    }\n    return value as ShapeValue<T>;\n  }\n\n  /**\n   * Default handler for Zod array types. Processes array constraints according to provider support.\n   *\n   * @param value - The Zod array to process\n   * @param handleChecks - Array constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod array\n   */\n  public defaultZodArrayHandler(\n    value: ZodArray<any, any>,\n    handleChecks: readonly ArrayCheckType[] = ALL_ARRAY_CHECKS,\n  ): ZodArray<any, any> {\n    const zodArrayDef = value._def;\n    const processedType = this.processZodType(zodArrayDef.type);\n\n    let result = z.array(processedType);\n\n    const constraints: ArrayConstraints = {};\n\n    if (zodArrayDef.minLength?.value !== undefined) {\n      if (handleChecks.includes('min')) {\n        constraints.minLength = zodArrayDef.minLength.value;\n      } else {\n        result = result.min(zodArrayDef.minLength.value);\n      }\n    }\n\n    if (zodArrayDef.maxLength?.value !== undefined) {\n      if (handleChecks.includes('max')) {\n        constraints.maxLength = zodArrayDef.maxLength.value;\n      } else {\n        result = result.max(zodArrayDef.maxLength.value);\n      }\n    }\n\n    if (zodArrayDef.exactLength?.value !== undefined) {\n      if (handleChecks.includes('length')) {\n        constraints.exactLength = zodArrayDef.exactLength.value;\n      } else {\n        result = result.length(zodArrayDef.exactLength.value);\n      }\n    }\n\n    const description = this.mergeParameterDescription(value.description, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod union types. Processes all union options.\n   *\n   * @param value - The Zod union to process\n   * @returns The processed Zod union\n   * @throws Error if union has fewer than 2 options\n   */\n  public defaultZodUnionHandler(value: ZodUnion<[ZodTypeAny, ...ZodTypeAny[]]>): ZodTypeAny {\n    const processedOptions = value._def.options.map((option: ZodTypeAny) => this.processZodType(option));\n    if (processedOptions.length < 2) throw new Error('Union must have at least 2 options');\n    let result = z.union(processedOptions as [ZodTypeAny, ZodTypeAny, ...ZodTypeAny[]]);\n    if (value.description) {\n      result = result.describe(value.description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod string types. Processes string validation constraints.\n   *\n   * @param value - The Zod string to process\n   * @param handleChecks - String constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod string\n   */\n  public defaultZodStringHandler(\n    value: ZodString,\n    handleChecks: readonly StringCheckType[] = ALL_STRING_CHECKS,\n  ): ZodString {\n    const constraints: StringConstraints = {};\n    const checks = value._def.checks || [];\n    type ZodStringCheck = (typeof checks)[number];\n    const newChecks: ZodStringCheck[] = [];\n    for (const check of checks) {\n      if ('kind' in check) {\n        if (handleChecks.includes(check.kind as StringCheckType)) {\n          switch (check.kind) {\n            case 'regex': {\n              constraints.regex = {\n                pattern: check.regex.source,\n                flags: check.regex.flags,\n              };\n              break;\n            }\n            case 'emoji': {\n              constraints.emoji = true;\n              break;\n            }\n            case 'email': {\n              constraints.email = true;\n              break;\n            }\n            case 'url': {\n              constraints.url = true;\n              break;\n            }\n            case 'uuid': {\n              constraints.uuid = true;\n              break;\n            }\n            case 'cuid': {\n              constraints.cuid = true;\n              break;\n            }\n            case 'min': {\n              constraints.minLength = check.value;\n              break;\n            }\n            case 'max': {\n              constraints.maxLength = check.value;\n              break;\n            }\n          }\n        } else {\n          newChecks.push(check);\n        }\n      }\n    }\n    let result = z.string();\n    for (const check of newChecks) {\n      result = result._addCheck(check);\n    }\n    const description = this.mergeParameterDescription(value.description, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod number types. Processes number validation constraints.\n   *\n   * @param value - The Zod number to process\n   * @param handleChecks - Number constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod number\n   */\n  public defaultZodNumberHandler(\n    value: ZodNumber,\n    handleChecks: readonly NumberCheckType[] = ALL_NUMBER_CHECKS,\n  ): ZodNumber {\n    const constraints: NumberConstraints = {};\n    const checks = value._def.checks || [];\n    type ZodNumberCheck = (typeof checks)[number];\n    const newChecks: ZodNumberCheck[] = [];\n    for (const check of checks) {\n      if ('kind' in check) {\n        if (handleChecks.includes(check.kind as NumberCheckType)) {\n          switch (check.kind) {\n            case 'min':\n              if (check.inclusive) {\n                constraints.gte = check.value;\n              } else {\n                constraints.gt = check.value;\n              }\n              break;\n            case 'max':\n              if (check.inclusive) {\n                constraints.lte = check.value;\n              } else {\n                constraints.lt = check.value;\n              }\n              break;\n            case 'multipleOf': {\n              constraints.multipleOf = check.value;\n              break;\n            }\n          }\n        } else {\n          newChecks.push(check);\n        }\n      }\n    }\n    let result = z.number();\n    for (const check of newChecks) {\n      switch (check.kind) {\n        case 'int':\n          result = result.int();\n          break;\n        case 'finite':\n          result = result.finite();\n          break;\n        default:\n          result = result._addCheck(check);\n      }\n    }\n    const description = this.mergeParameterDescription(value.description, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod date types. Converts dates to ISO strings with constraint descriptions.\n   *\n   * @param value - The Zod date to process\n   * @returns A Zod string schema representing the date in ISO format\n   */\n  public defaultZodDateHandler(value: ZodDate): ZodString {\n    const constraints: DateConstraints = {};\n    const checks = value._def.checks || [];\n    type ZodDateCheck = (typeof checks)[number];\n    const newChecks: ZodDateCheck[] = [];\n    for (const check of checks) {\n      if ('kind' in check) {\n        switch (check.kind) {\n          case 'min':\n            const minDate = new Date(check.value);\n            if (!isNaN(minDate.getTime())) {\n              constraints.minDate = minDate.toISOString();\n            }\n            break;\n          case 'max':\n            const maxDate = new Date(check.value);\n            if (!isNaN(maxDate.getTime())) {\n              constraints.maxDate = maxDate.toISOString();\n            }\n            break;\n          default:\n            newChecks.push(check);\n        }\n      }\n    }\n    constraints.dateFormat = 'date-time';\n    let result = z.string().describe('date-time');\n    const description = this.mergeParameterDescription(value.description, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod optional types. Processes the inner type and maintains optionality.\n   *\n   * @param value - The Zod optional to process\n   * @param handleTypes - Types that should be processed vs passed through\n   * @returns The processed Zod optional\n   */\n  public defaultZodOptionalHandler(\n    value: ZodOptional<any>,\n    handleTypes: readonly AllZodType[] = SUPPORTED_ZOD_TYPES,\n  ): ZodTypeAny {\n    if (handleTypes.includes(value._def.innerType._def.typeName as AllZodType)) {\n      return this.processZodType(value._def.innerType).optional();\n    } else {\n      return value;\n    }\n  }\n\n  /**\n   * Processes a Zod object schema and converts it to an AI SDK Schema.\n   *\n   * @param zodSchema - The Zod object schema to process\n   * @returns An AI SDK Schema with provider-specific compatibility applied\n   */\n  public processToAISDKSchema(zodSchema: z.ZodSchema): Schema {\n    const processedSchema = this.processZodType(zodSchema);\n\n    return convertZodSchemaToAISDKSchema(processedSchema, this.getSchemaTarget());\n  }\n\n  /**\n   * Processes a Zod object schema and converts it to a JSON Schema.\n   *\n   * @param zodSchema - The Zod object schema to process\n   * @returns A JSONSchema7 object with provider-specific compatibility applied\n   */\n  public processToJSONSchema(zodSchema: z.ZodSchema): JSONSchema7 {\n    return this.processToAISDKSchema(zodSchema).jsonSchema;\n  }\n}\n","import type { Schema } from 'ai';\nimport type { JSONSchema7 } from 'json-schema';\nimport {\n  z,\n  ZodOptional,\n  ZodObject,\n  ZodArray,\n  ZodUnion,\n  ZodString,\n  ZodNumber,\n  ZodDate,\n  ZodDefault,\n  ZodNull,\n} from 'zod/v4';\nimport type { ZodAny, ZodType } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport type { SchemaCompatLayer as ParentSchemaCompatLayer } from './schema-compatibility';\nimport type { ModelInformation } from './types';\nimport { convertZodSchemaToAISDKSchema } from './utils';\n\n/**\n * All supported string validation check types that can be processed or converted to descriptions.\n * @constant\n */\nexport const ALL_STRING_CHECKS = [\n  'regex',\n  'emoji',\n  'email',\n  'url',\n  'uuid',\n  'cuid',\n  'min_length',\n  'max_length',\n  'string_format',\n] as const;\n\n/**\n * All supported number validation check types that can be processed or converted to descriptions.\n * @constant\n */\nexport const ALL_NUMBER_CHECKS = ['greater_than', 'less_than', 'multiple_of'] as const;\n\n/**\n * All supported array validation check types that can be processed or converted to descriptions.\n * @constant\n */\nexport const ALL_ARRAY_CHECKS = ['min', 'max', 'length'] as const;\n\n/**\n * Zod types that are not supported by most AI model providers and should be avoided.\n * @constant\n */\nexport const UNSUPPORTED_ZOD_TYPES = ['ZodIntersection', 'ZodNever', 'ZodNull', 'ZodTuple', 'ZodUndefined'] as const;\n\n/**\n * Zod types that are generally supported by AI model providers.\n * @constant\n */\nexport const SUPPORTED_ZOD_TYPES = [\n  'ZodObject',\n  'ZodArray',\n  'ZodUnion',\n  'ZodString',\n  'ZodNumber',\n  'ZodDate',\n  'ZodAny',\n  'ZodDefault',\n] as const;\n\n/**\n * All Zod types (both supported and unsupported).\n * @constant\n */\nexport const ALL_ZOD_TYPES = [...SUPPORTED_ZOD_TYPES, ...UNSUPPORTED_ZOD_TYPES] as const;\n\n/**\n * Type representing string validation checks.\n */\nexport type StringCheckType = (typeof ALL_STRING_CHECKS)[number];\n\n/**\n * Type representing number validation checks.\n */\nexport type NumberCheckType = (typeof ALL_NUMBER_CHECKS)[number];\n\n/**\n * Type representing array validation checks.\n */\nexport type ArrayCheckType = (typeof ALL_ARRAY_CHECKS)[number];\n\n/**\n * Type representing unsupported Zod schema types.\n */\nexport type UnsupportedZodType = (typeof UNSUPPORTED_ZOD_TYPES)[number];\n\n/**\n * Type representing supported Zod schema types.\n */\nexport type SupportedZodType = (typeof SUPPORTED_ZOD_TYPES)[number];\n\n/**\n * Type representing all Zod schema types (supported and unsupported).\n */\nexport type AllZodType = (typeof ALL_ZOD_TYPES)[number];\n\n/**\n * Utility type to extract the shape of a Zod object schema.\n */\nexport type ZodShape<T extends z.ZodObject<any, any>> = T['shape'];\n\n/**\n * Utility type to extract the keys from a Zod object shape.\n */\nexport type ShapeKey<T extends z.ZodObject<any, any>> = keyof ZodShape<T>;\n\n/**\n * Utility type to extract the value types from a Zod object shape.\n */\nexport type ShapeValue<T extends z.ZodObject<any, any>> = ZodShape<T>[ShapeKey<T>];\n\n// Add constraint types at the top\n\ntype StringConstraints = {\n  minLength?: number;\n  maxLength?: number;\n  email?: boolean;\n  url?: boolean;\n  uuid?: boolean;\n  cuid?: boolean;\n  emoji?: boolean;\n  regex?: { pattern: string; flags?: string };\n};\n\ntype NumberConstraints = {\n  gt?: number;\n  gte?: number;\n  lt?: number;\n  lte?: number;\n  multipleOf?: number;\n};\n\ntype ArrayConstraints = {\n  minLength?: number;\n  maxLength?: number;\n  exactLength?: number;\n};\n\ntype DateConstraints = {\n  minDate?: string;\n  maxDate?: string;\n  dateFormat?: string;\n};\n\n/**\n * Abstract base class for creating schema compatibility layers for different AI model providers.\n *\n * This class provides a framework for transforming Zod schemas to work with specific AI model\n * provider requirements and limitations. Each provider may have different support levels for\n * JSON Schema features, validation constraints, and data types.\n *\n *\n * @example\n * ```typescript\n * import { SchemaCompatLayer } from '@mastra/schema-compat';\n * import type { LanguageModelV1 } from 'ai';\n *\n * class CustomProviderCompat extends SchemaCompatLayer {\n *   constructor(model: LanguageModelV1) {\n *     super(model);\n *   }\n *\n *   shouldApply(): boolean {\n *     return this.getModel().provider === 'custom-provider';\n *   }\n *\n *   getSchemaTarget() {\n *     return 'jsonSchema7';\n *   }\n *\n *   processZodType<T extends z.AnyZodObject>(value: z.ZodAny): ShapeValue<T> {\n *     // Custom processing logic for this provider\n *     switch (value._def.typeName) {\n *       case 'ZodString':\n *         return this.defaultZodStringHandler(value, ['email', 'url']);\n *       default:\n *         return this.defaultUnsupportedZodTypeHandler(value);\n *     }\n *   }\n * }\n * ```\n */\nexport class SchemaCompatLayer {\n  private model: ModelInformation;\n  private parent: ParentSchemaCompatLayer;\n\n  /**\n   * Creates a new schema compatibility instance.\n   *\n   * @param model - The language model this compatibility layer applies to\n   */\n  constructor(model: ModelInformation, parent: ParentSchemaCompatLayer) {\n    this.model = model;\n    this.parent = parent;\n  }\n\n  /**\n   * Gets the language model associated with this compatibility layer.\n   *\n   * @returns The language model instance\n   */\n  getModel(): ModelInformation {\n    return this.model;\n  }\n\n  getUnsupportedZodTypes(): readonly string[] {\n    return UNSUPPORTED_ZOD_TYPES;\n  }\n\n  /**\n   * Type guard for optional Zod types\n   */\n  isOptional(v: ZodAny | ZodOptional<any>): v is ZodOptional<any> {\n    return v instanceof ZodOptional;\n  }\n\n  /**\n   * Type guard for object Zod types\n   */\n  isObj(v: ZodAny | ZodObject<any, any>): v is ZodObject<any, any> {\n    return v instanceof ZodObject;\n  }\n\n  /**\n   * Type guard for null Zod types\n   */\n  isNull(v: ZodAny | ZodNull): v is ZodNull {\n    return v instanceof ZodNull;\n  }\n\n  /**\n   * Type guard for array Zod types\n   */\n  isArr(v: ZodAny | ZodArray<any>): v is ZodArray<any> {\n    return v instanceof ZodArray;\n  }\n\n  /**\n   * Type guard for union Zod types\n   */\n  isUnion(v: ZodAny | ZodUnion<[ZodAny, ...ZodAny[]]>): v is ZodUnion<[ZodAny, ...ZodAny[]]> {\n    return v instanceof ZodUnion;\n  }\n\n  /**\n   * Type guard for string Zod types\n   */\n  isString(v: ZodAny | ZodString): v is ZodString {\n    return v instanceof ZodString;\n  }\n\n  /**\n   * Type guard for number Zod types\n   */\n  isNumber(v: ZodAny | ZodNumber): v is ZodNumber {\n    return v instanceof ZodNumber;\n  }\n\n  /**\n   * Type guard for date Zod types\n   */\n  isDate(v: ZodAny | ZodDate): v is ZodDate {\n    return v instanceof ZodDate;\n  }\n\n  /**\n   * Type guard for default Zod types\n   */\n  isDefault(v: ZodAny | ZodDefault<any>): v is ZodDefault<any> {\n    return v instanceof ZodDefault;\n  }\n\n  /**\n   * Determines whether this compatibility layer should be applied for the current model.\n   *\n   * @returns True if this compatibility layer should be used, false otherwise\n   * @abstract\n   */\n  shouldApply(): boolean {\n    return this.parent.shouldApply();\n  }\n\n  /**\n   * Returns the JSON Schema target format for this provider.\n   *\n   * @returns The schema target format, or undefined to use the default 'jsonSchema7'\n   * @abstract\n   */\n  getSchemaTarget(): Targets | undefined {\n    return this.parent.getSchemaTarget();\n  }\n\n  /**\n   * Processes a specific Zod type according to the provider's requirements.\n   *\n   * @param value - The Zod type to process\n   * @returns The processed Zod type\n   * @abstract\n   */\n  processZodType(value: ZodType): ZodType {\n    return this.parent.processZodType(value);\n  }\n\n  /**\n   * Default handler for Zod object types. Recursively processes all properties in the object.\n   *\n   * @param value - The Zod object to process\n   * @returns The processed Zod object\n   */\n  public defaultZodObjectHandler(\n    value: ZodObject<any, any>,\n    options: { passthrough?: boolean } = { passthrough: true },\n  ): ZodObject<any, any> {\n    const processedShape = Object.entries(value.shape).reduce<Record<string, ZodType>>((acc, [key, propValue]) => {\n      acc[key] = this.processZodType(propValue as ZodAny);\n      return acc;\n    }, {});\n\n    let result: ZodObject<any, any> = z.object(processedShape);\n\n    if (value._zod.def.catchall instanceof z.ZodNever) {\n      result = z.strictObject(processedShape);\n    }\n    if (value._zod.def.catchall && !(value._zod.def.catchall instanceof z.ZodNever)) {\n      result = result.catchall(value._zod.def.catchall);\n    }\n\n    if (value.description) {\n      result = result.describe(value.description);\n    }\n\n    if (options.passthrough && value._zod.def.catchall instanceof z.ZodUnknown) {\n      result = z.looseObject(processedShape);\n    }\n\n    return result;\n  }\n\n  /**\n   * Merges validation constraints into a parameter description.\n   *\n   * This helper method converts validation constraints that may not be supported\n   * by a provider into human-readable descriptions.\n   *\n   * @param description - The existing parameter description\n   * @param constraints - The validation constraints to merge\n   * @returns The updated description with constraints, or undefined if no constraints\n   */\n  public mergeParameterDescription(\n    description: string | undefined,\n    constraints:\n      | NumberConstraints\n      | StringConstraints\n      | ArrayConstraints\n      | DateConstraints\n      | { defaultValue?: unknown },\n  ): string | undefined {\n    if (Object.keys(constraints).length > 0) {\n      return (description ? description + '\\n' : '') + JSON.stringify(constraints);\n    } else {\n      return description;\n    }\n  }\n\n  /**\n   * Default handler for unsupported Zod types. Throws an error for specified unsupported types.\n   *\n   * @param value - The Zod type to check\n   * @param throwOnTypes - Array of type names to throw errors for\n   * @returns The original value if not in the throw list\n   * @throws Error if the type is in the unsupported list\n   */\n  public defaultUnsupportedZodTypeHandler<T extends z.ZodObject<any, any>>(\n    value: z.ZodAny,\n    throwOnTypes: readonly UnsupportedZodType[] = UNSUPPORTED_ZOD_TYPES,\n  ): ShapeValue<T> {\n    if (throwOnTypes.includes(value.constructor.name as UnsupportedZodType)) {\n      throw new Error(`${this.model.modelId} does not support zod type: ${value.constructor.name}`);\n    }\n    return value as ShapeValue<T>;\n  }\n\n  /**\n   * Default handler for Zod array types. Processes array constraints according to provider support.\n   *\n   * @param value - The Zod array to process\n   * @param handleChecks - Array constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod array\n   */\n  public defaultZodArrayHandler(\n    value: ZodArray<any>,\n    handleChecks: readonly ArrayCheckType[] = ALL_ARRAY_CHECKS,\n  ): ZodArray<any> {\n    const zodArrayDef = value._zod.def;\n    const processedType = this.processZodType(zodArrayDef.element);\n\n    let result = z.array(processedType);\n\n    const constraints: ArrayConstraints = {};\n    if (zodArrayDef.checks) {\n      for (const check of zodArrayDef.checks) {\n        if (check._zod.def.check === 'min_length') {\n          if (handleChecks.includes('min')) {\n            // @ts-expect-error - fix later\n            constraints.minLength = check._zod.def.minimum;\n          } else {\n            // @ts-expect-error - fix later\n            result = result.min(check._zod.def.minimum);\n          }\n        }\n        if (check._zod.def.check === 'max_length') {\n          if (handleChecks.includes('max')) {\n            // @ts-expect-error - fix later\n            constraints.maxLength = check._zod.def.maximum;\n          } else {\n            // @ts-expect-error - fix later\n            result = result.max(check._zod.def.maximum);\n          }\n        }\n        if (check._zod.def.check === 'length_equals') {\n          if (handleChecks.includes('length')) {\n            // @ts-expect-error - fix later\n            constraints.exactLength = check._zod.def.length;\n          } else {\n            // @ts-expect-error - fix later\n            result = result.length(check._zod.def.length);\n          }\n        }\n      }\n    }\n\n    const metaDescription = value.meta()?.description;\n    const legacyDescription = value.description;\n\n    const description = this.mergeParameterDescription(metaDescription || legacyDescription, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod union types. Processes all union options.\n   *\n   * @param value - The Zod union to process\n   * @returns The processed Zod union\n   * @throws Error if union has fewer than 2 options\n   */\n  public defaultZodUnionHandler(value: ZodUnion<[ZodAny, ...ZodAny[]]>): ZodAny {\n    const processedOptions = value._zod.def.options.map((option: ZodAny) => this.processZodType(option));\n    if (processedOptions.length < 2) throw new Error('Union must have at least 2 options');\n    let result = z.union(processedOptions as [ZodAny, ZodAny, ...ZodAny[]]);\n    if (value.description) {\n      result = result.describe(value.description);\n    }\n    // @ts-expect-error - fix later\n    return result;\n  }\n\n  /**\n   * Default handler for Zod string types. Processes string validation constraints.\n   *\n   * @param value - The Zod string to process\n   * @param handleChecks - String constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod string\n   */\n  public defaultZodStringHandler(\n    value: ZodString,\n    handleChecks: readonly StringCheckType[] = ALL_STRING_CHECKS,\n  ): ZodString {\n    const constraints: StringConstraints = {};\n    const checks = value._zod.def.checks || [];\n    type ZodStringCheck = (typeof checks)[number];\n    const newChecks: ZodStringCheck[] = [];\n\n    if (checks) {\n      for (const check of checks) {\n        if (handleChecks.includes(check._zod.def.check as StringCheckType)) {\n          switch (check._zod.def.check) {\n            case 'min_length':\n              // @ts-expect-error - fix later\n              constraints.minLength = check._zod.def.minimum;\n              break;\n            case 'max_length':\n              // @ts-expect-error - fix later\n              constraints.maxLength = check._zod.def.maximum;\n              break;\n            case 'string_format':\n              {\n                // @ts-expect-error - fix later\n                switch (check._zod.def.format) {\n                  case 'email':\n                    constraints.email = true;\n                    break;\n                  case 'url':\n                    constraints.url = true;\n                    break;\n                  case 'emoji':\n                    constraints.emoji = true;\n                    break;\n                  case 'uuid':\n                    constraints.uuid = true;\n                    break;\n                  case 'cuid':\n                    constraints.cuid = true;\n                    break;\n                  case 'regex':\n                    constraints.regex = {\n                      // @ts-expect-error - fix later\n                      pattern: check._zod.def.pattern,\n                      // @ts-expect-error - fix later\n                      flags: check._zod.def.flags,\n                    };\n                    break;\n                }\n              }\n              break;\n          }\n        } else {\n          newChecks.push(check);\n        }\n      }\n    }\n\n    let result = z.string();\n    for (const check of newChecks) {\n      result = result.check(check);\n    }\n\n    const metaDescription = value.meta()?.description;\n    const legacyDescription = value.description;\n\n    const description = this.mergeParameterDescription(metaDescription || legacyDescription, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod number types. Processes number validation constraints.\n   *\n   * @param value - The Zod number to process\n   * @param handleChecks - Number constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod number\n   */\n  public defaultZodNumberHandler(\n    value: ZodNumber,\n    handleChecks: readonly NumberCheckType[] = ALL_NUMBER_CHECKS,\n  ): ZodNumber {\n    const constraints: NumberConstraints = {};\n    const checks = value._zod.def.checks || [];\n    type ZodNumberCheck = (typeof checks)[number];\n    const newChecks: ZodNumberCheck[] = [];\n\n    if (checks) {\n      for (const check of checks) {\n        if (handleChecks.includes(check._zod.def.check as NumberCheckType)) {\n          switch (check._zod.def.check) {\n            case 'greater_than':\n              // @ts-expect-error - fix later\n              if (check._zod.def.inclusive) {\n                // @ts-expect-error - fix later\n                constraints.gte = check._zod.def.value;\n              } else {\n                // @ts-expect-error - fix later\n                constraints.gt = check._zod.def.value;\n              }\n              break;\n            case 'less_than':\n              // @ts-expect-error - fix later\n              if (check._zod.def.inclusive) {\n                // @ts-expect-error - fix later\n                constraints.lte = check._zod.def.value;\n              } else {\n                // @ts-expect-error - fix later\n                constraints.lt = check._zod.def.value;\n              }\n              break;\n            case 'multiple_of': {\n              // @ts-expect-error - fix later\n              constraints.multipleOf = check._zod.def.value;\n              break;\n            }\n          }\n        } else {\n          newChecks.push(check);\n        }\n      }\n    }\n    let result = z.number();\n\n    for (const check of newChecks) {\n      switch (check._zod.def.check) {\n        case 'number_format': {\n          // @ts-expect-error - fix later\n          switch (check._zod.def.format) {\n            case 'safeint':\n              result = result.int();\n              break;\n          }\n          break;\n        }\n        default:\n          // @ts-expect-error - fix later\n          result = result.check(check);\n      }\n    }\n    const description = this.mergeParameterDescription(value.description, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod date types. Converts dates to ISO strings with constraint descriptions.\n   *\n   * @param value - The Zod date to process\n   * @returns A Zod string schema representing the date in ISO format\n   */\n  public defaultZodDateHandler(value: ZodDate): ZodString {\n    const constraints: DateConstraints = {};\n    const checks = value._zod.def.checks || [];\n    type ZodDateCheck = (typeof checks)[number];\n    const newChecks: ZodDateCheck[] = [];\n    if (checks) {\n      for (const check of checks) {\n        switch (check._zod.def.check) {\n          case 'less_than':\n            // @ts-expect-error - fix later\n            const minDate = new Date(check._zod.def.value);\n            if (!isNaN(minDate.getTime())) {\n              constraints.minDate = minDate.toISOString();\n            }\n            break;\n          case 'greater_than':\n            // @ts-expect-error - fix later\n            const maxDate = new Date(check._zod.def.value);\n            if (!isNaN(maxDate.getTime())) {\n              constraints.maxDate = maxDate.toISOString();\n            }\n            break;\n          default:\n            newChecks.push(check);\n        }\n      }\n    }\n    constraints.dateFormat = 'date-time';\n    let result = z.string().describe('date-time');\n    const description = this.mergeParameterDescription(value.description, constraints);\n    if (description) {\n      result = result.describe(description);\n    }\n    return result;\n  }\n\n  /**\n   * Default handler for Zod optional types. Processes the inner type and maintains optionality.\n   *\n   * @param value - The Zod optional to process\n   * @param handleTypes - Types that should be processed vs passed through\n   * @returns The processed Zod optional\n   */\n  public defaultZodOptionalHandler(\n    value: ZodOptional<any>,\n    handleTypes: readonly AllZodType[] = SUPPORTED_ZOD_TYPES,\n  ): ZodType {\n    if (handleTypes.includes(value.constructor.name as AllZodType)) {\n      return this.processZodType(value._zod.def.innerType).optional();\n    } else {\n      return value;\n    }\n  }\n\n  /**\n   * Processes a Zod object schema and converts it to an AI SDK Schema.\n   *\n   * @param zodSchema - The Zod object schema to process\n   * @returns An AI SDK Schema with provider-specific compatibility applied\n   */\n  public processToAISDKSchema(zodSchema: ZodType): Schema {\n    const processedSchema = this.processZodType(zodSchema);\n\n    return convertZodSchemaToAISDKSchema(processedSchema, this.getSchemaTarget());\n  }\n\n  /**\n   * Processes a Zod object schema and converts it to a JSON Schema.\n   *\n   * @param zodSchema - The Zod object schema to process\n   * @returns A JSONSchema7 object with provider-specific compatibility applied\n   */\n  public processToJSONSchema(zodSchema: ZodType): JSONSchema7 {\n    return this.processToAISDKSchema(zodSchema).jsonSchema;\n  }\n}\n","import type { Schema } from 'ai';\nimport type { JSONSchema7 } from 'json-schema';\nimport type { z as zV3 } from 'zod/v3';\nimport type { z as zV4, ZodType } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport {\n  SchemaCompatLayer as SchemaCompatLayerV3,\n  ALL_STRING_CHECKS,\n  ALL_NUMBER_CHECKS,\n  ALL_ARRAY_CHECKS,\n  UNSUPPORTED_ZOD_TYPES as UNSUPPORTED_ZOD_TYPES_V3,\n  SUPPORTED_ZOD_TYPES as SUPPORTED_ZOD_TYPES_V3,\n} from './schema-compatibility-v3';\nimport type {\n  UnsupportedZodType as UnsupportedZodTypeV3,\n  ShapeValue as ShapeValueV3,\n  StringCheckType,\n  NumberCheckType,\n  ArrayCheckType,\n  AllZodType as AllZodTypeV3,\n} from './schema-compatibility-v3';\nimport {\n  SchemaCompatLayer as SchemaCompatLayerV4,\n  UNSUPPORTED_ZOD_TYPES as UNSUPPORTED_ZOD_TYPES_V4,\n  SUPPORTED_ZOD_TYPES as SUPPORTED_ZOD_TYPES_V4,\n} from './schema-compatibility-v4';\nimport type {\n  UnsupportedZodType as UnsupportedZodTypeV4,\n  ShapeValue as ShapeValueV4,\n  AllZodType as AllZodTypeV4,\n} from './schema-compatibility-v4';\n\n// Define constraint types locally since they're not exported from v3/v4 files\ntype StringConstraints = {\n  minLength?: number;\n  maxLength?: number;\n  email?: boolean;\n  url?: boolean;\n  uuid?: boolean;\n  cuid?: boolean;\n  emoji?: boolean;\n  regex?: { pattern: string; flags?: string };\n};\n\ntype NumberConstraints = {\n  gt?: number;\n  gte?: number;\n  lt?: number;\n  lte?: number;\n  multipleOf?: number;\n};\n\ntype ArrayConstraints = {\n  minLength?: number;\n  maxLength?: number;\n  exactLength?: number;\n};\n\ntype DateConstraints = {\n  minDate?: string;\n  maxDate?: string;\n  dateFormat?: string;\n};\nimport type { ModelInformation } from './types';\nimport { convertZodSchemaToAISDKSchema } from './utils';\n\nexport abstract class SchemaCompatLayer {\n  private model: ModelInformation;\n  private v3Layer: SchemaCompatLayerV3;\n  private v4Layer: SchemaCompatLayerV4;\n\n  /**\n   * Creates a new schema compatibility instance.\n   *\n   * @param model - The language model this compatibility layer applies to\n   */\n  constructor(model: ModelInformation) {\n    this.model = model;\n    this.v3Layer = new SchemaCompatLayerV3(model, this);\n    this.v4Layer = new SchemaCompatLayerV4(model, this);\n  }\n\n  /**\n   * Gets the language model associated with this compatibility layer.\n   *\n   * @returns The language model instance\n   */\n  getModel(): ModelInformation {\n    return this.model;\n  }\n\n  getUnsupportedZodTypes(v: ZodType): readonly string[] {\n    if ('_zod' in v) {\n      return this.v4Layer.getUnsupportedZodTypes();\n    } else {\n      return this.v3Layer.getUnsupportedZodTypes();\n    }\n  }\n\n  /**\n   * Type guard for optional Zod types\n   */\n  isOptional(v: zV4.ZodType): v is zV4.ZodOptional<any>;\n  isOptional(v: zV3.ZodType): v is zV3.ZodOptional<any>;\n  isOptional(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isOptional(v);\n    } else {\n      return this.v3Layer.isOptional(v);\n    }\n  }\n\n  /**\n   * Type guard for object Zod types\n   */\n  isObj(v: zV4.ZodType): v is zV4.ZodObject<any, any>;\n  isObj(v: zV3.ZodType): v is zV3.ZodObject<any, any, any, any, any>;\n  isObj(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isObj(v);\n    } else {\n      return this.v3Layer.isObj(v);\n    }\n  }\n\n  /**\n   * Type guard for null Zod types\n   */\n  isNull(v: zV4.ZodType): v is zV4.ZodNull;\n  isNull(v: zV3.ZodType): v is zV3.ZodNull;\n  isNull(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isNull(v);\n    } else {\n      return this.v3Layer.isNull(v);\n    }\n  }\n\n  /**\n   * Type guard for array Zod types\n   */\n  isArr(v: zV4.ZodType): v is zV4.ZodArray<any>;\n  isArr(v: zV3.ZodType): v is zV3.ZodArray<any, any>;\n  isArr(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isArr(v);\n    } else {\n      return this.v3Layer.isArr(v);\n    }\n  }\n\n  /**\n   * Type guard for union Zod types\n   */\n  isUnion(v: zV4.ZodType): v is zV4.ZodUnion<[zV4.ZodType, ...zV4.ZodType[]]>;\n  isUnion(v: zV3.ZodType): v is zV3.ZodUnion<[zV3.ZodType, ...zV3.ZodType[]]>;\n  isUnion(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isUnion(v);\n    } else {\n      return this.v3Layer.isUnion(v);\n    }\n  }\n\n  /**\n   * Type guard for string Zod types\n   */\n  isString(v: zV4.ZodType): v is zV4.ZodString;\n  isString(v: zV3.ZodType): v is zV3.ZodString;\n  isString(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isString(v);\n    } else {\n      return this.v3Layer.isString(v);\n    }\n  }\n\n  /**\n   * Type guard for number Zod types\n   */\n  isNumber(v: zV4.ZodType): v is zV4.ZodNumber;\n  isNumber(v: zV3.ZodType): v is zV3.ZodNumber;\n  isNumber(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isNumber(v);\n    } else {\n      return this.v3Layer.isNumber(v);\n    }\n  }\n\n  /**\n   * Type guard for date Zod types\n   */\n  isDate(v: zV4.ZodType): v is zV4.ZodDate;\n  isDate(v: zV3.ZodType): v is zV3.ZodDate;\n  isDate(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isDate(v);\n    } else {\n      return this.v3Layer.isDate(v);\n    }\n  }\n\n  /**\n   * Type guard for default Zod types\n   */\n  isDefault(v: zV4.ZodType): v is zV4.ZodDefault<any>;\n  isDefault(v: zV3.ZodType): v is zV3.ZodDefault<any>;\n  isDefault(v: zV3.ZodType | zV4.ZodType) {\n    if ('_zod' in v) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.isDefault(v);\n    } else {\n      return this.v3Layer.isDefault(v);\n    }\n  }\n\n  /**\n   * Determines whether this compatibility layer should be applied for the current model.\n   *\n   * @returns True if this compatibility layer should be used, false otherwise\n   * @abstract\n   */\n  abstract shouldApply(): boolean;\n\n  /**\n   * Returns the JSON Schema target format for this provider.\n   *\n   * @returns The schema target format, or undefined to use the default 'jsonSchema7'\n   * @abstract\n   */\n  abstract getSchemaTarget(): Targets | undefined;\n\n  /**\n   * Processes a specific Zod type according to the provider's requirements.\n   *\n   * @param value - The Zod type to process\n   * @returns The processed Zod type\n   * @abstract\n   */\n  abstract processZodType(value: zV4.ZodType): zV4.ZodType;\n  abstract processZodType(value: zV3.ZodType): zV3.ZodType;\n  abstract processZodType(value: zV4.ZodType | zV3.ZodType): zV4.ZodType | zV3.ZodType;\n\n  /**\n   * Default handler for Zod object types. Recursively processes all properties in the object.\n   *\n   * @param value - The Zod object to process\n   * @returns The processed Zod object\n   */\n  public defaultZodObjectHandler(\n    value: zV4.ZodObject<any, any>,\n    options?: { passthrough?: boolean },\n  ): zV4.ZodObject<any, any>;\n  public defaultZodObjectHandler(\n    value: zV3.ZodObject<any, any>,\n    options?: { passthrough?: boolean },\n  ): zV3.ZodObject<any, any>;\n  public defaultZodObjectHandler(\n    value: zV3.ZodObject<any, any, any, any, any> | zV4.ZodObject<any, any>,\n    options: { passthrough?: boolean } = { passthrough: true },\n  ): zV3.ZodObject<any, any, any, any, any> | zV4.ZodObject<any, any> {\n    if ('_zod' in value) {\n      return this.v4Layer.defaultZodObjectHandler(value, options);\n    } else {\n      return this.v3Layer.defaultZodObjectHandler(value, options);\n    }\n  }\n\n  /**\n   * Merges validation constraints into a parameter description.\n   *\n   * This helper method converts validation constraints that may not be supported\n   * by a provider into human-readable descriptions.\n   *\n   * @param description - The existing parameter description\n   * @param constraints - The validation constraints to merge\n   * @returns The updated description with constraints, or undefined if no constraints\n   */\n  public mergeParameterDescription(\n    description: string | undefined,\n    constraints:\n      | NumberConstraints\n      | StringConstraints\n      | ArrayConstraints\n      | DateConstraints\n      | { defaultValue?: unknown },\n  ): string | undefined {\n    // This method doesn't depend on Zod version, so we can use either layer\n    return this.v3Layer.mergeParameterDescription(description, constraints);\n  }\n\n  /**\n   * Default handler for unsupported Zod types. Throws an error for specified unsupported types.\n   *\n   * @param value - The Zod type to check\n   * @param throwOnTypes - Array of type names to throw errors for\n   * @returns The original value if not in the throw list\n   * @throws Error if the type is in the unsupported list\n   */\n  public defaultUnsupportedZodTypeHandler<T extends zV4.ZodObject | zV3.AnyZodObject>(\n    value: T,\n    throwOnTypes?: T extends zV4.ZodObject\n      ? UnsupportedZodTypeV4[]\n      : T extends zV3.AnyZodObject\n        ? UnsupportedZodTypeV3[]\n        : never,\n  ): T extends zV4.ZodObject ? ShapeValueV4<T> : T extends zV3.AnyZodObject ? ShapeValueV3<T> : never {\n    if ('_zod' in value) {\n      return this.v4Layer.defaultUnsupportedZodTypeHandler(\n        // @ts-expect-error - fix later\n        value,\n        (throwOnTypes ?? UNSUPPORTED_ZOD_TYPES_V4) as typeof UNSUPPORTED_ZOD_TYPES_V4,\n      );\n    } else {\n      return this.v3Layer.defaultUnsupportedZodTypeHandler(\n        value,\n        (throwOnTypes ?? UNSUPPORTED_ZOD_TYPES_V3) as typeof UNSUPPORTED_ZOD_TYPES_V3,\n      );\n    }\n  }\n\n  /**\n   * Default handler for Zod array types. Processes array constraints according to provider support.\n   *\n   * @param value - The Zod array to process\n   * @param handleChecks - Array constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod array\n   */\n  public defaultZodArrayHandler(value: zV4.ZodArray<any>, handleChecks?: readonly ArrayCheckType[]): zV4.ZodArray<any>;\n  public defaultZodArrayHandler(\n    value: zV3.ZodArray<any, any>,\n    handleChecks?: readonly ArrayCheckType[],\n  ): zV3.ZodArray<any, any>;\n  public defaultZodArrayHandler(\n    value: zV4.ZodArray<any> | zV3.ZodArray<any, any>,\n    handleChecks: readonly ArrayCheckType[] = ALL_ARRAY_CHECKS,\n  ): zV4.ZodArray<any> | zV3.ZodArray<any, any> {\n    if ('_zod' in value) {\n      return this.v4Layer.defaultZodArrayHandler(value, handleChecks);\n    } else {\n      return this.v3Layer.defaultZodArrayHandler(value, handleChecks);\n    }\n  }\n\n  /**\n   * Default handler for Zod union types. Processes all union options.\n   *\n   * @param value - The Zod union to process\n   * @returns The processed Zod union\n   * @throws Error if union has fewer than 2 options\n   */\n  public defaultZodUnionHandler(value: zV4.ZodUnion<[zV4.ZodType, ...zV4.ZodType[]]>): zV4.ZodType;\n  public defaultZodUnionHandler(value: zV3.ZodUnion<[zV3.ZodType, ...zV3.ZodType[]]>): zV3.ZodType;\n  public defaultZodUnionHandler(\n    value: zV4.ZodUnion<[zV4.ZodType, ...zV4.ZodType[]]> | zV3.ZodUnion<[zV3.ZodType, ...zV3.ZodType[]]>,\n  ): zV4.ZodType | zV3.ZodType {\n    if ('_zod' in value) {\n      // @ts-expect-error - fix later\n      return this.v4Layer.defaultZodUnionHandler(value);\n    } else {\n      return this.v3Layer.defaultZodUnionHandler(value);\n    }\n  }\n\n  /**\n   * Default handler for Zod string types. Processes string validation constraints.\n   *\n   * @param value - The Zod string to process\n   * @param handleChecks - String constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod string\n   */\n  public defaultZodStringHandler(value: zV4.ZodString, handleChecks?: readonly StringCheckType[]): zV4.ZodString;\n  public defaultZodStringHandler(value: zV3.ZodString, handleChecks?: readonly StringCheckType[]): zV3.ZodString;\n  public defaultZodStringHandler(\n    value: zV4.ZodString | zV3.ZodString,\n    handleChecks: readonly StringCheckType[] = ALL_STRING_CHECKS,\n  ): zV4.ZodString | zV3.ZodString {\n    if ('_zod' in value) {\n      return this.v4Layer.defaultZodStringHandler(value);\n    } else {\n      return this.v3Layer.defaultZodStringHandler(value, handleChecks);\n    }\n  }\n\n  /**\n   * Default handler for Zod number types. Processes number validation constraints.\n   *\n   * @param value - The Zod number to process\n   * @param handleChecks - Number constraints to convert to descriptions vs keep as validation\n   * @returns The processed Zod number\n   */\n  public defaultZodNumberHandler(value: zV4.ZodNumber, handleChecks?: readonly NumberCheckType[]): zV4.ZodNumber;\n  public defaultZodNumberHandler(value: zV3.ZodNumber, handleChecks?: readonly NumberCheckType[]): zV3.ZodNumber;\n  public defaultZodNumberHandler(\n    value: zV4.ZodNumber | zV3.ZodNumber,\n    handleChecks: readonly NumberCheckType[] = ALL_NUMBER_CHECKS,\n  ): zV4.ZodNumber | zV3.ZodNumber {\n    if ('_zod' in value) {\n      return this.v4Layer.defaultZodNumberHandler(value);\n    } else {\n      return this.v3Layer.defaultZodNumberHandler(value, handleChecks);\n    }\n  }\n\n  /**\n   * Default handler for Zod date types. Converts dates to ISO strings with constraint descriptions.\n   *\n   * @param value - The Zod date to process\n   * @returns A Zod string schema representing the date in ISO format\n   */\n  public defaultZodDateHandler(value: zV4.ZodDate): zV4.ZodString;\n  public defaultZodDateHandler(value: zV3.ZodDate): zV3.ZodString;\n  public defaultZodDateHandler(value: zV4.ZodDate | zV3.ZodDate): zV4.ZodString | zV3.ZodString {\n    if ('_zod' in value) {\n      return this.v4Layer.defaultZodDateHandler(value);\n    } else {\n      return this.v3Layer.defaultZodDateHandler(value);\n    }\n  }\n\n  /**\n   * Default handler for Zod optional types. Processes the inner type and maintains optionality.\n   *\n   * @param value - The Zod optional to process\n   * @param handleTypes - Types that should be processed vs passed through\n   * @returns The processed Zod optional\n   */\n  public defaultZodOptionalHandler(value: zV4.ZodOptional<any>, handleTypes?: readonly AllZodTypeV4[]): zV4.ZodType;\n  public defaultZodOptionalHandler(value: zV3.ZodOptional<any>, handleTypes?: readonly AllZodTypeV3[]): zV3.ZodType;\n  public defaultZodOptionalHandler(\n    value: zV4.ZodOptional<any> | zV3.ZodOptional<any>,\n    handleTypes?: readonly AllZodTypeV3[] | readonly AllZodTypeV4[],\n  ): zV4.ZodType | zV3.ZodType {\n    if ('_zod' in value) {\n      return this.v4Layer.defaultZodOptionalHandler(value, handleTypes ?? SUPPORTED_ZOD_TYPES_V4);\n    } else {\n      return this.v3Layer.defaultZodOptionalHandler(value, handleTypes ?? SUPPORTED_ZOD_TYPES_V3);\n    }\n  }\n\n  /**\n   * Processes a Zod object schema and converts it to an AI SDK Schema.\n   *\n   * @param zodSchema - The Zod object schema to process\n   * @returns An AI SDK Schema with provider-specific compatibility applied\n   */\n  public processToAISDKSchema(zodSchema: zV3.ZodSchema | zV4.ZodType): Schema {\n    const processedSchema = this.processZodType(zodSchema);\n\n    return convertZodSchemaToAISDKSchema(processedSchema, this.getSchemaTarget());\n  }\n\n  /**\n   * Processes a Zod object schema and converts it to a JSON Schema.\n   *\n   * @param zodSchema - The Zod object schema to process\n   * @returns A JSONSchema7 object with provider-specific compatibility applied\n   */\n  public processToJSONSchema(zodSchema: zV3.ZodSchema | zV4.ZodType): JSONSchema7 {\n    return this.processToAISDKSchema(zodSchema).jsonSchema;\n  }\n}\n","import type { z as zV3 } from 'zod/v3';\nimport type { z as zV4 } from 'zod/v4';\n\nexport function isOptional<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodOptional<any>;\nexport function isOptional<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodOptional<any>;\nexport function isOptional<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodOptional'] => v instanceof z['ZodOptional'];\n}\n\nexport function isObj<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodObject<any>;\nexport function isObj<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodObject;\nexport function isObj<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodObject'] => v instanceof z['ZodObject'];\n}\n\nexport function isNull<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodNull;\nexport function isNull<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodNull;\nexport function isNull<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodNull'] => v instanceof z['ZodNull'];\n}\n\nexport function isArr<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodArray<any>;\nexport function isArr<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodArray;\nexport function isArr<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodArray'] => v instanceof z['ZodArray'];\n}\n\nexport function isUnion<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodUnion<any>;\nexport function isUnion<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodUnion;\nexport function isUnion<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodUnion'] => v instanceof z['ZodUnion'];\n}\n\nexport function isString<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodString;\nexport function isString<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodString;\nexport function isString<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodString'] => v instanceof z['ZodString'];\n}\n\nexport function isNumber<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodNumber;\nexport function isNumber<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodNumber;\nexport function isNumber<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodNumber'] => v instanceof z['ZodNumber'];\n}\n\nexport function isDate<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodDate;\nexport function isDate<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodDate;\nexport function isDate<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodDate'] => v instanceof z['ZodDate'];\n}\n\nexport function isDefault<Z extends typeof zV3>(z: Z): (v: any) => v is zV3.ZodDefault<any>;\nexport function isDefault<Z extends typeof zV4>(z: Z): (v: any) => v is zV4.ZodDefault;\nexport function isDefault<Z extends typeof zV3 | typeof zV4>(z: Z) {\n  return (v: any): v is Z['ZodDefault'] => v instanceof z['ZodDefault'];\n}\n","import { z } from 'zod';\nimport type { ZodType as ZodTypeV3, ZodObject as ZodObjectV3 } from 'zod/v3';\nimport type { ZodType as ZodTypeV4, ZodObject as ZodObjectV4 } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport { SchemaCompatLayer } from '../schema-compatibility';\nimport type { AllZodType as AllZodTypeV3 } from '../schema-compatibility-v3';\nimport type { AllZodType as AllZodTypeV4 } from '../schema-compatibility-v4';\nimport type { ModelInformation } from '../types';\nimport { isOptional, isObj, isArr, isUnion, isString } from '../zodTypes';\n\nexport class AnthropicSchemaCompatLayer extends SchemaCompatLayer {\n  constructor(model: ModelInformation) {\n    super(model);\n  }\n\n  getSchemaTarget(): Targets | undefined {\n    return 'jsonSchema7';\n  }\n\n  shouldApply(): boolean {\n    return this.getModel().modelId.includes('claude');\n  }\n\n  processZodType(value: ZodTypeV3): ZodTypeV3;\n  processZodType(value: ZodTypeV4): ZodTypeV4;\n  processZodType(value: ZodTypeV3 | ZodTypeV4): ZodTypeV3 | ZodTypeV4 {\n    if (isOptional(z)(value)) {\n      const handleTypes: AllZodTypeV3[] | AllZodTypeV4 = [\n        'ZodObject',\n        'ZodArray',\n        'ZodUnion',\n        'ZodNever',\n        'ZodUndefined',\n        'ZodTuple',\n      ];\n      if (this.getModel().modelId.includes('claude-3.5-haiku')) handleTypes.push('ZodString');\n      return this.defaultZodOptionalHandler(value, handleTypes);\n    } else if (isObj(z)(value)) {\n      return this.defaultZodObjectHandler(value);\n    } else if (isArr(z)(value)) {\n      return this.defaultZodArrayHandler(value, []);\n    } else if (isUnion(z)(value)) {\n      return this.defaultZodUnionHandler(value);\n    } else if (isString(z)(value)) {\n      // the claude-3.5-haiku model support these properties but the model doesn't respect them, but it respects them when they're\n      // added to the tool description\n\n      if (this.getModel().modelId.includes('claude-3.5-haiku')) {\n        return this.defaultZodStringHandler(value, ['max', 'min']);\n      } else {\n        return value;\n      }\n    }\n\n    return this.defaultUnsupportedZodTypeHandler(value as ZodObjectV4<any> | ZodObjectV3<any>, [\n      'ZodNever',\n      'ZodTuple',\n      'ZodUndefined',\n    ]);\n  }\n}\n","import { z } from 'zod';\nimport type { ZodType as ZodTypeV3 } from 'zod/v3';\nimport type { ZodType as ZodTypeV4 } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport { SchemaCompatLayer } from '../schema-compatibility';\nimport type { ModelInformation } from '../types';\nimport { isOptional, isObj, isArr, isUnion, isString } from '../zodTypes';\n\nexport class DeepSeekSchemaCompatLayer extends SchemaCompatLayer {\n  constructor(model: ModelInformation) {\n    super(model);\n  }\n\n  getSchemaTarget(): Targets | undefined {\n    return 'jsonSchema7';\n  }\n\n  shouldApply(): boolean {\n    // Deepseek R1 performs perfectly without this compat layer\n    return this.getModel().modelId.includes('deepseek') && !this.getModel().modelId.includes('r1');\n  }\n\n  processZodType(value: ZodTypeV3): ZodTypeV3;\n  processZodType(value: ZodTypeV4): ZodTypeV4;\n  processZodType(value: ZodTypeV3 | ZodTypeV4): ZodTypeV3 | ZodTypeV4 {\n    if (isOptional(z)(value)) {\n      return this.defaultZodOptionalHandler(value, ['ZodObject', 'ZodArray', 'ZodUnion', 'ZodString', 'ZodNumber']);\n    } else if (isObj(z)(value)) {\n      return this.defaultZodObjectHandler(value);\n    } else if (isArr(z)(value)) {\n      return this.defaultZodArrayHandler(value, ['min', 'max']);\n    } else if (isUnion(z)(value)) {\n      return this.defaultZodUnionHandler(value);\n    } else if (isString(z)(value)) {\n      return this.defaultZodStringHandler(value);\n    }\n\n    return value;\n  }\n}\n","import { z } from 'zod';\nimport type { ZodType as ZodTypeV3, ZodObject as ZodObjectV3 } from 'zod/v3';\nimport type { ZodType as ZodTypeV4, ZodObject as ZodObjectV4 } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport { SchemaCompatLayer } from '../schema-compatibility';\nimport type { ModelInformation } from '../types';\nimport { isOptional, isNull, isObj, isArr, isUnion, isString, isNumber } from '../zodTypes';\n\nexport class GoogleSchemaCompatLayer extends SchemaCompatLayer {\n  constructor(model: ModelInformation) {\n    super(model);\n  }\n\n  getSchemaTarget(): Targets | undefined {\n    return 'jsonSchema7';\n  }\n\n  shouldApply(): boolean {\n    return this.getModel().provider.includes('google') || this.getModel().modelId.includes('google');\n  }\n  processZodType(value: ZodTypeV3): ZodTypeV3;\n  processZodType(value: ZodTypeV4): ZodTypeV4;\n  processZodType(value: ZodTypeV3 | ZodTypeV4): ZodTypeV3 | ZodTypeV4 {\n    if (isOptional(z)(value)) {\n      return this.defaultZodOptionalHandler(value, ['ZodObject', 'ZodArray', 'ZodUnion', 'ZodString', 'ZodNumber']);\n    } else if (isNull(z)(value)) {\n      // Google models don't support null, so we need to convert it to any and then refine it to null\n      return z\n        .any()\n        .refine(v => v === null, { message: 'must be null' })\n        .describe(value.description || 'must be null');\n    } else if (isObj(z)(value)) {\n      return this.defaultZodObjectHandler(value);\n    } else if (isArr(z)(value)) {\n      return this.defaultZodArrayHandler(value, []);\n    } else if (isUnion(z)(value)) {\n      return this.defaultZodUnionHandler(value);\n    } else if (isString(z)(value)) {\n      // Google models support these properties but the model doesn't respect them, but it respects them when they're\n      // added to the tool description\n      return this.defaultZodStringHandler(value);\n    } else if (isNumber(z)(value)) {\n      // Google models support these properties but the model doesn't respect them, but it respects them when they're\n      // added to the tool description\n      return this.defaultZodNumberHandler(value);\n    }\n    return this.defaultUnsupportedZodTypeHandler(value as ZodObjectV4<any> | ZodObjectV3<any>);\n  }\n}\n","import { z } from 'zod';\nimport type { ZodType as ZodTypeV3 } from 'zod/v3';\nimport type { ZodType as ZodTypeV4 } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport { SchemaCompatLayer } from '../schema-compatibility';\nimport type { ModelInformation } from '../types';\nimport { isOptional, isObj, isArr, isUnion, isNumber, isString } from '../zodTypes';\n\nexport class MetaSchemaCompatLayer extends SchemaCompatLayer {\n  constructor(model: ModelInformation) {\n    super(model);\n  }\n\n  getSchemaTarget(): Targets | undefined {\n    return 'jsonSchema7';\n  }\n\n  shouldApply(): boolean {\n    return this.getModel().modelId.includes('meta');\n  }\n\n  processZodType(value: ZodTypeV3): ZodTypeV3;\n  processZodType(value: ZodTypeV4): ZodTypeV4;\n  processZodType(value: ZodTypeV3 | ZodTypeV4): ZodTypeV3 | ZodTypeV4 {\n    if (isOptional(z)(value)) {\n      return this.defaultZodOptionalHandler(value, ['ZodObject', 'ZodArray', 'ZodUnion', 'ZodString', 'ZodNumber']);\n    } else if (isObj(z)(value)) {\n      return this.defaultZodObjectHandler(value);\n    } else if (isArr(z)(value)) {\n      return this.defaultZodArrayHandler(value, ['min', 'max']);\n    } else if (isUnion(z)(value)) {\n      return this.defaultZodUnionHandler(value);\n    } else if (isNumber(z)(value)) {\n      return this.defaultZodNumberHandler(value);\n    } else if (isString(z)(value)) {\n      return this.defaultZodStringHandler(value);\n    }\n\n    return value;\n  }\n}\n","import { z } from 'zod';\nimport type { ZodType as ZodTypeV3, ZodObject as ZodObjectV3 } from 'zod/v3';\nimport type { ZodType as ZodTypeV4, ZodObject as ZodObjectV4 } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport { SchemaCompatLayer } from '../schema-compatibility';\nimport type { ModelInformation } from '../types';\nimport { isOptional, isObj, isUnion, isArr, isString } from '../zodTypes';\n\nexport class OpenAISchemaCompatLayer extends SchemaCompatLayer {\n  constructor(model: ModelInformation) {\n    super(model);\n  }\n\n  getSchemaTarget(): Targets | undefined {\n    return `jsonSchema7`;\n  }\n\n  shouldApply(): boolean {\n    if (\n      !this.getModel().supportsStructuredOutputs &&\n      (this.getModel().provider.includes(`openai`) || this.getModel().modelId.includes(`openai`))\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  processZodType(value: ZodTypeV3): ZodTypeV3;\n  processZodType(value: ZodTypeV4): ZodTypeV4;\n  processZodType(value: ZodTypeV3 | ZodTypeV4): ZodTypeV3 | ZodTypeV4 {\n    if (isOptional(z)(value)) {\n      return this.defaultZodOptionalHandler(value, [\n        'ZodObject',\n        'ZodArray',\n        'ZodUnion',\n        'ZodString',\n        'ZodNever',\n        'ZodUndefined',\n        'ZodTuple',\n      ]);\n    } else if (isObj(z)(value)) {\n      return this.defaultZodObjectHandler(value);\n    } else if (isUnion(z)(value)) {\n      return this.defaultZodUnionHandler(value);\n    } else if (isArr(z)(value)) {\n      return this.defaultZodArrayHandler(value);\n    } else if (isString(z)(value)) {\n      const model = this.getModel();\n      const checks = ['emoji'] as const;\n\n      if (model.modelId.includes('gpt-4o-mini')) {\n        return this.defaultZodStringHandler(value, ['emoji', 'regex']);\n      }\n\n      return this.defaultZodStringHandler(value, checks);\n    }\n\n    return this.defaultUnsupportedZodTypeHandler(value as ZodObjectV4<any> | ZodObjectV3<any>, [\n      'ZodNever',\n      'ZodUndefined',\n      'ZodTuple',\n    ]);\n  }\n}\n","import { z } from 'zod';\nimport type { ZodType as ZodTypeV3, ZodObject as ZodObjectV3 } from 'zod/v3';\nimport type { ZodType as ZodTypeV4, ZodObject as ZodObjectV4 } from 'zod/v4';\nimport type { Targets } from 'zod-to-json-schema';\nimport { SchemaCompatLayer } from '../schema-compatibility';\nimport type { ModelInformation } from '../types';\nimport { isOptional, isObj, isArr, isUnion, isDefault, isNumber, isString, isDate } from '../zodTypes';\n\nexport class OpenAIReasoningSchemaCompatLayer extends SchemaCompatLayer {\n  constructor(model: ModelInformation) {\n    super(model);\n  }\n\n  getSchemaTarget(): Targets | undefined {\n    return `openApi3`;\n  }\n\n  isReasoningModel(): boolean {\n    // there isn't a good way to automatically detect reasoning models besides doing this.\n    // in the future when o5 is released this compat wont apply and we'll want to come back and update this class + our tests\n    return (\n      this.getModel().modelId.includes(`o3`) ||\n      this.getModel().modelId.includes(`o4`) ||\n      this.getModel().modelId.includes(`o1`)\n    );\n  }\n\n  shouldApply(): boolean {\n    if (\n      (this.getModel().supportsStructuredOutputs || this.isReasoningModel()) &&\n      (this.getModel().provider.includes(`openai`) || this.getModel().modelId.includes(`openai`))\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  processZodType(value: ZodTypeV3): ZodTypeV3;\n  processZodType(value: ZodTypeV4): ZodTypeV4;\n  processZodType(value: ZodTypeV3 | ZodTypeV4): ZodTypeV3 | ZodTypeV4 {\n    if (isOptional(z)(value)) {\n      const innerZodType = this.processZodType(value._def.innerType);\n      return innerZodType.nullable();\n    } else if (isObj(z)(value)) {\n      return this.defaultZodObjectHandler(value, { passthrough: false });\n    } else if (isArr(z)(value)) {\n      return this.defaultZodArrayHandler(value);\n    } else if (isUnion(z)(value)) {\n      return this.defaultZodUnionHandler(value);\n    } else if (isDefault(z)(value)) {\n      const defaultDef = value._def;\n      const innerType = defaultDef.innerType;\n      // Handle both Zod v3 (function) and v4 (direct value)\n      const defaultValue =\n        typeof defaultDef.defaultValue === 'function' ? defaultDef.defaultValue() : defaultDef.defaultValue;\n      const constraints: { defaultValue?: unknown } = {};\n      if (defaultValue !== undefined) {\n        constraints.defaultValue = defaultValue;\n      }\n\n      const description = this.mergeParameterDescription(value.description, constraints);\n      let result = this.processZodType(innerType);\n      if (description) {\n        result = result.describe(description);\n      }\n      return result;\n    } else if (isNumber(z)(value)) {\n      return this.defaultZodNumberHandler(value);\n    } else if (isString(z)(value)) {\n      return this.defaultZodStringHandler(value);\n    } else if (isDate(z)(value)) {\n      return this.defaultZodDateHandler(value);\n    } else if (value.constructor.name === 'ZodAny') {\n      // It's bad practice in the tool to use any, it's not reasonable for models that don't support that OOTB, to cast every single possible type\n      // in the schema. Usually when it's \"any\" it could be a json object or a union of specific types.\n      return z\n        .string()\n        .describe(\n          (value.description ?? '') +\n            `\\nArgument was an \"any\" type, but you (the LLM) do not support \"any\", so it was cast to a \"string\" type`,\n        );\n    }\n\n    return this.defaultUnsupportedZodTypeHandler(value as ZodObjectV4<any> | ZodObjectV3<any>);\n  }\n}\n"]}