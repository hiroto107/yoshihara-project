interface DevLoggerOptions {
    timestamp?: boolean;
    colors?: boolean;
}
interface HTTPSOptions {
    key: Buffer;
    cert: Buffer;
}
export declare class DevLogger {
    private options;
    constructor(options?: DevLoggerOptions);
    private formatTime;
    private formatPrefix;
    info(message: string): void;
    success(message: string): void;
    warn(message: string): void;
    error(message: string): void;
    starting(): void;
    ready(host: string, port: number, startTime?: number, https?: HTTPSOptions): void;
    bundling(): void;
    bundleComplete(): void;
    watching(): void;
    restarting(): void;
    fileChange(file: string): void;
    serverError(error: string): void;
    shutdown(): void;
    envInfo(info: {
        port: number;
        env?: string;
        root: string;
    }): void;
    raw(message: string): void;
    debug(message: string): void;
    private spinnerChars;
    private spinnerIndex;
    getSpinnerChar(): string;
    clearLine(): void;
    update(message: string): void;
}
export declare const devLogger: DevLogger;
export {};
//# sourceMappingURL=dev-logger.d.ts.map