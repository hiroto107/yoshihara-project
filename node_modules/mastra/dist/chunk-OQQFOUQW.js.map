{"version":3,"sources":["../src/analytics/index.ts"],"names":[],"mappings":"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","file":"chunk-OQQFOUQW.js","sourcesContent":["import { randomUUID } from 'crypto';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { PostHog } from 'posthog-node';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface CommandData {\n  command: string;\n  args?: Record<string, unknown>;\n  durationMs?: number;\n  status: 'success' | 'error';\n  error?: string;\n}\n\nexport type CLI_ORIGIN = 'mastra-cloud' | 'oss';\n\nlet analyticsInstance: PosthogAnalytics | null = null;\n\nexport function getAnalytics(): PosthogAnalytics | null {\n  return analyticsInstance;\n}\n\nexport function setAnalytics(instance: PosthogAnalytics): void {\n  analyticsInstance = instance;\n}\n\nexport class PosthogAnalytics {\n  private sessionId: string;\n  private client?: PostHog;\n  private distinctId: string;\n  private version: string;\n\n  constructor({\n    version,\n    apiKey,\n    host = 'https://app.posthog.com',\n  }: {\n    version: string;\n    apiKey: string;\n    host: string;\n  }) {\n    this.version = version;\n    const cliConfigPath = path.join(__dirname, 'mastra-cli.json');\n    if (existsSync(cliConfigPath)) {\n      try {\n        const { distinctId, sessionId } = JSON.parse(readFileSync(cliConfigPath, 'utf-8'));\n        this.distinctId = distinctId;\n        this.sessionId = sessionId;\n      } catch {\n        this.sessionId = randomUUID();\n        this.distinctId = this.getDistinctId();\n      }\n\n      this.writeCliConfig({\n        distinctId: this.distinctId,\n        sessionId: this.sessionId,\n      });\n    } else {\n      this.sessionId = randomUUID();\n      this.distinctId = this.getDistinctId();\n      this.writeCliConfig({\n        distinctId: this.distinctId,\n        sessionId: this.sessionId,\n      });\n    }\n\n    if (this.isTelemetryEnabled()) {\n      this.initializePostHog(apiKey, host);\n    }\n  }\n\n  private writeCliConfig({ distinctId, sessionId }: { distinctId: string; sessionId: string }): void {\n    try {\n      writeFileSync(path.join(__dirname, 'mastra-cli.json'), JSON.stringify({ distinctId, sessionId }));\n    } catch {\n      //swallow\n    }\n  }\n\n  private initializePostHog(apiKey: string, host: string): void {\n    this.client = new PostHog(apiKey, {\n      host,\n      flushAt: 1,\n      flushInterval: 0,\n      disableGeoip: false,\n    });\n\n    this.captureSessionStart();\n\n    process.on('exit', () => {\n      this.client?.flush().catch(() => {});\n    });\n  }\n\n  private isTelemetryEnabled(): boolean {\n    // Check environment variable first\n    if (process.env.MASTRA_TELEMETRY_DISABLED) {\n      return false;\n    }\n    // Default to enabled\n    return true;\n  }\n\n  private getDistinctId(): string {\n    // Use machine-id or generate a persistent ID\n    // This helps track unique CLI installations\n    const machineId = os.hostname();\n    return `mastra-${machineId}`;\n  }\n\n  private getSystemProperties(): Record<string, any> {\n    return {\n      os: process.platform,\n      os_version: os.release(),\n      node_version: process.version,\n      platform: process.arch,\n      session_id: this.sessionId,\n      cli_version: this.version || 'unknown',\n      machine_id: os.hostname(),\n    };\n  }\n\n  private captureSessionStart(): void {\n    if (!this.client) {\n      return;\n    }\n\n    this.client.capture({\n      distinctId: this.distinctId,\n      event: 'cli_session_start',\n      properties: {\n        ...this.getSystemProperties(),\n      },\n    });\n  }\n\n  trackEvent(eventName: string, properties?: Record<string, any>): void {\n    try {\n      if (!this.client) {\n        return;\n      }\n\n      this.client.capture({\n        distinctId: this.distinctId,\n        event: eventName,\n        properties: {\n          ...this.getSystemProperties(),\n          ...properties,\n        },\n      });\n    } catch {\n      //swallow\n    }\n  }\n\n  trackCommand(options: {\n    command: string;\n    args?: Record<string, unknown>;\n    durationMs?: number;\n    status?: 'success' | 'error';\n    error?: string;\n    origin?: CLI_ORIGIN;\n  }): void {\n    try {\n      if (!this.client) {\n        return;\n      }\n\n      const commandData: CommandData = {\n        command: options.command,\n        status: options.status || 'success',\n      };\n\n      if (options.args) {\n        commandData.args = options.args;\n      }\n\n      if (options.durationMs) {\n        commandData.durationMs = options.durationMs;\n      }\n\n      if (options.error) {\n        commandData.error = options.error;\n      }\n\n      this.client.capture({\n        distinctId: this.distinctId,\n        event: 'cli_command',\n        properties: {\n          ...this.getSystemProperties(),\n          ...commandData,\n          origin: options?.origin || 'oss',\n        },\n      });\n    } catch {\n      //swallow\n    }\n  }\n\n  // Helper method to wrap command execution with timing\n  async trackCommandExecution<T>({\n    command,\n    args,\n    execution,\n    origin,\n  }: {\n    command: string;\n    args: Record<string, unknown>;\n    execution: () => Promise<T>;\n    origin?: CLI_ORIGIN;\n  }): Promise<T> {\n    const startTime = process.hrtime();\n\n    try {\n      const result = await execution();\n      const [seconds, nanoseconds] = process.hrtime(startTime);\n      const durationMs = seconds * 1000 + nanoseconds / 1000000;\n\n      this.trackCommand({\n        command,\n        args,\n        durationMs,\n        status: 'success',\n        origin,\n      });\n\n      return result;\n    } catch (error) {\n      const [seconds, nanoseconds] = process.hrtime(startTime);\n      const durationMs = seconds * 1000 + nanoseconds / 1000000;\n\n      this.trackCommand({\n        command,\n        args,\n        durationMs,\n        status: 'error',\n        error: error instanceof Error ? error.message : String(error),\n        origin,\n      });\n\n      throw error;\n    }\n  }\n\n  // Ensure PostHog client is shutdown properly\n  async shutdown(): Promise<void> {\n    if (!this.client) {\n      return;\n    }\n    try {\n      await this.client.shutdown();\n    } catch {\n      //swallow\n    }\n  }\n}\n"]}